<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis学习</title>
    <link href="/2023/11/01/redis/"/>
    <url>/2023/11/01/redis/</url>
    
    <content type="html"><![CDATA[<h1 id="redis学习"><a class="markdownIt-Anchor" href="#redis学习"></a> Redis学习</h1><p><strong>Redis诞生于2009年，全称<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mi>R</mi><mi>e</mi><mstyle mathcolor="black"><mi>m</mi><mi>o</mi><mi>t</mi><mi>e</mi><mtext> </mtext><mstyle mathcolor="red"><mi>D</mi><mi>i</mi><mstyle mathcolor="black"><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>a</mi><mi>r</mi><mi>y</mi><mtext> </mtext><mstyle mathcolor="red"><mi>S</mi><mstyle mathcolor="black"><mi>e</mi><mi>r</mi><mi>v</mi><mi>e</mi><mi>r</mi></mstyle></mstyle></mstyle></mstyle></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\color{red}Re\color{black}mote\ \color{red}Di\color{black}ctionary\ \color{red}S\color{black}erver</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;color:red;">R</span><span class="mord mathnormal" style="color:red;">e</span><span class="mord mathnormal" style="color:black;">m</span><span class="mord mathnormal" style="color:black;">o</span><span class="mord mathnormal" style="color:black;">t</span><span class="mord mathnormal" style="color:black;">e</span><span class="mspace" style="color:black;"><span style="color:black;"> </span></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">D</span><span class="mord mathnormal" style="color:red;">i</span><span class="mord mathnormal" style="color:black;">c</span><span class="mord mathnormal" style="color:black;">t</span><span class="mord mathnormal" style="color:black;">i</span><span class="mord mathnormal" style="color:black;">o</span><span class="mord mathnormal" style="color:black;">n</span><span class="mord mathnormal" style="color:black;">a</span><span class="mord mathnormal" style="margin-right:0.02778em;color:black;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;color:black;">y</span><span class="mspace" style="color:black;"><span style="color:black;"> </span></span><span class="mord mathnormal" style="margin-right:0.05764em;color:red;">S</span><span class="mord mathnormal" style="color:black;">e</span><span class="mord mathnormal" style="margin-right:0.02778em;color:black;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;color:black;">v</span><span class="mord mathnormal" style="color:black;">e</span><span class="mord mathnormal" style="margin-right:0.02778em;color:black;">r</span></span></span></span>，远程词典服务，是一个基于内存的键值型NoSQL数据库。</strong></p><p><a href="https://redis.io">https://redis.io</a></p><p><strong>特征：</strong></p><ul><li><p>键值（key-value）型，value支持多种不同数据结构，功能丰富</p></li><li><p>单线程，每个命令具备原子性</p></li><li><p>低延迟，速度快（基于内存、IO多路复用、良好的编码）</p></li><li><p>支持数据持久化</p></li><li><p>支持主从集群、分片集群</p></li><li><p>支持多语言客户端</p></li></ul><h2 id="redis通用命令"><a class="markdownIt-Anchor" href="#redis通用命令"></a> Redis通用命令</h2><p>通用命令就是部分数据类型都可以使用的命令，通过<code>help [command]</code>可以一个命令的具体用法，例如：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202310250952128.png" alt="image-20231025095236032" /></p><p>常见有：</p><ul><li><p>KEYS：查看符合模板的所有key，因为是模糊查询，数据量大时就会很慢，所以不建议在生产环境设备去使用</p><p>这个模板其实正则类似，具有通配符。<code>?</code>匹配一个字符，<code>*</code>匹配多个，<code>[ab]</code>只匹配a或b，<code>[^e]</code>不匹配e，<code>[a-c]</code>匹配a到c之间的字符（包含端点），用<code>\</code>来规避特殊字符。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202310250959832.png" alt="image-20231025095918786" /></p></li><li><p>DEL：删除指定的key，可以删一个，也可以删多个</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202310251004611.png" alt="image-20231025100433587" /></p></li><li><p>EXiSTS：判断key是否存在</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202310251005843.png" alt="image-20231025100547820" /></p></li><li><p>EXPIRE：给一个key设置有效期，有效期到期该key会被自动删除</p></li><li><p>TTL：查看一个key的剩余有效期。<code>正数</code>代表剩余有效时间，<code>-2</code>代表已经过期，<code>-1</code>代表永久有效。创建key时，都是默认永久有效</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202310251009041.png" alt="image-20231025100916016" /></p></li></ul><h2 id="redis数据结构以及操作它们的命令"><a class="markdownIt-Anchor" href="#redis数据结构以及操作它们的命令"></a> Redis数据结构以及操作它们的命令</h2><p>Redis是一个key-value的数据库，key一般是String类型，不过value的类型是多种多样</p><table><thead><tr><th>类型</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>String</td><td>hello world</td><td>字符串，基本类型</td></tr><tr><td>Hash</td><td>{name : &quot;jack&quot; , age : 12}</td><td>哈希表，基本类型</td></tr><tr><td>List</td><td>[a -&gt; b -&gt; c -&gt; d]</td><td>链表，基本类型</td></tr><tr><td>Set</td><td>{a, b, c}</td><td>无序集合，基本类型</td></tr><tr><td>SortedSet</td><td>{a : 1, b : 2, c : 3}</td><td>有序集合，基本类型</td></tr><tr><td>GEO</td><td>{A : {120.3, 30.5} }</td><td>地理坐标特殊类型</td></tr><tr><td>BitMap</td><td>0110110101110101011</td><td>特殊类型</td></tr><tr><td>HyperLog</td><td>0110110101110101011</td><td>特殊类型</td></tr><tr><td>.......</td><td>.......</td><td>.......</td></tr></tbody></table><p>操作这些数据的命令可以在<a href="https://redis.io/commands">官网</a>查看，也可以通过<code>help @&lt;group&gt;</code>查看</p><p>例如：<code>help @String</code>可以查看和String类型相关的命令</p><h3 id="key的层级格式"><a class="markdownIt-Anchor" href="#key的层级格式"></a> key的层级格式</h3><h4 id="key的结构"><a class="markdownIt-Anchor" href="#key的结构"></a> key的结构</h4><p>Redis的key允许多个单词形成层级结构，多个单词之间用<code>:</code>隔开，格式如下：</p><p><code>项目名:业务名:类型:id</code></p><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p><p>例如：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">和user相关的key baidu:user:1<br>和article相关的key  baidu:article:1<br></code></pre></td></tr></table></figure><p>如果Value是一个java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储</p><h3 id="string类型"><a class="markdownIt-Anchor" href="#string类型"></a> String类型</h3><p>字符串类型,Redis中最简单的数据类型。其value虽然都是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li>string：普通字符串</li><li>int：整数类型，可以做自增、自减操作</li><li>float：浮点类型，可以做自增、自减操作</li></ul><p>它们的底层都是字节数组形式存储，只不过编码方式不同，字符串类型的最大空间不能超过512MB</p><h4 id="string类型的常见命令"><a class="markdownIt-Anchor" href="#string类型的常见命令"></a> String类型的常见命令：</h4><ul><li>SET：添加或者修改已经存在的一个String类型的键值对</li><li>GET：根据key获取String类型的value</li><li>MSET：批量添加多个String类型 的value</li><li>MGET：根据多个key获取多个String类型的value</li><li>INCR：让一个整型的key自增1</li><li>INCRBY：让一个整型的key自增并指定步长</li><li>INCRBYFLOAT：让一个浮点型的key自增并指定步长</li><li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li>SETEX：添加一个String类型的键值对，并且指定有效期</li></ul><h3 id="hash类型"><a class="markdownIt-Anchor" href="#hash类型"></a> Hash类型</h3><p>hash类型，也叫散列，其value是一个无序字典，类似Java中HashMap结构</p><p>String 结构是将对象序列化为JSON后存储，当需要修改对象某个字段时很不方便：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202311012243873.png" alt="image-20231101224259784" /></p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段作CRUD:</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202311012243045.png" alt="image-20231101224312908" /></p><h4 id="hash类型的常见命令"><a class="markdownIt-Anchor" href="#hash类型的常见命令"></a> Hash类型的常见命令</h4><ul><li><code>HSET key field value</code>：添加或者修改hash类型key的field的值</li><li><code>HGET key field</code>：获取一个hash类型key的field的值</li><li><code>HMSET</code>：批量添加一个hash类型的多个key的field的值</li><li><code>HMGET</code>：批量获取一个hash类型的多个key的field的值</li><li><code>HGETALL</code>：获取一个hash类型key的全部field的值</li><li><code>HKEYS</code>：获取一个hash类型key的所有field</li><li><code>HVALS</code>：获取一个hash类型key的所有的value</li><li><code>HINCRBY</code>：让一个hash类型key的字段值自增并指定步长</li><li><code>HSETNX</code>：添加一个hash类型key的field的值，前提是这个field不存在，否则不执行</li></ul><h3 id="list类型"><a class="markdownIt-Anchor" href="#list类型"></a> List类型</h3><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构，既可以支持正向检索也可以支持反向检索。特征也和LinkedList类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><h4 id="list类型的常见命令"><a class="markdownIt-Anchor" href="#list类型的常见命令"></a> List类型的常见命令</h4><ul><li><code>LPUSH key element...</code>：向列表左边插入一个或多个元素</li><li><code>LPOP key </code>：移除并返回列表左侧的第一个元素，没有则返回<code>nil</code></li><li><code>RPUSH key element...</code>：向列表右边插入一个或多个元素</li><li><code>RPOP key</code>：移除并返回列表左侧的第一个元素，没有则返回<code>nil</code></li><li><code>LRANGE key star end</code>：返回一段角标内的所有元素<ul><li><code>BLPOP</code>和<code>BRPOP</code>：与<code>LPOP</code>和<code>RPOP</code>类似，只不过在没有元素时等待指定时间，而不是直接返回<code>nil</code></li></ul></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202311030914396.png" alt="image-20231103091443365" /></p><h3 id="set类型"><a class="markdownIt-Anchor" href="#set类型"></a> Set类型</h3><p>Redis的Set结构与Java中的HashSet类似，可以看作一个value为null的HashMap，因为也是一个hash表，因此具备和HashSet类似的特征：</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集、并集、差集等功能</li></ul><h4 id="set类型的常见命令"><a class="markdownIt-Anchor" href="#set类型的常见命令"></a> Set类型的常见命令</h4><ul><li><code>SADD key member...</code>： 向set中添加一个或多个元素</li><li><code>SREM key member...</code>：移除set中的指定元素</li><li><code>SCARD key</code>：返回set中元素的个数</li><li><code>SISMEMBER key member</code>：判断一个元素是否存在于set中</li><li><code>SMEMEBERS</code>：获取set中的所有元素</li><li><code>SINTER key1 key2...</code>：求key1集合与key2的交集</li><li><code>SDFF key1 key2...</code>：求key1与key2的差集</li><li><code>SUNION key1 key2...</code>：求key1与key2的并集</li></ul><h3 id="sortedset类型"><a class="markdownIt-Anchor" href="#sortedset类型"></a> SortedSet类型</h3><p>Redis的SortedSet是一个可排序的Set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元排序，底层的实现是一个跳表(SkipList)加hash表。</p><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><h4 id="sortedset的常见类型"><a class="markdownIt-Anchor" href="#sortedset的常见类型"></a> SortedSet的常见类型</h4><ul><li><code>ZADD key score member</code>：添加一个或多个元素到SortedSet中，如果已经存在则更新其score值</li><li><code>ZREM key member</code>：删除SortedSet中的指定元素</li><li><code>ZSCORE key member</code>：获取SortedSet中的指定元素的score值</li><li><code>ZRANK key member</code>：获取SortedSet中的指定元素的排名</li><li><code>ZCARD key</code>：获取SortedSet中的元素个数</li><li><code>ZCOUNT key min max</code>： 统计score值在指定范围内的所有元素个数</li><li><code>ZINCRBY key increment member</code>：让SortedSet中的指定元素自增，步长为<code>increment</code>的值</li><li><code>ZRANGE key min max</code>：按照score排序后，获取指定score范围内的元素</li><li><code>ZRANGEBYSCORE key min max </code>：按照score排序后，获取指定score范围内的元素</li><li><code>ZDFF、ZINTER、ZUNION</code>：求差集、交集、并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后添加REV即可。</p><h2 id="redis的java客户端"><a class="markdownIt-Anchor" href="#redis的java客户端"></a> Redis的java客户端</h2><p>在Redis官网中提供了各种语言的客户端，地址：<a href="https://redis.io/clients">https://redis.io/clients</a></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202311051618547.png" alt="image-20231105161814429" /></p><h4 id="redis中的java客户端"><a class="markdownIt-Anchor" href="#redis中的java客户端"></a> Redis中的java客户端</h4><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202311051625395.png" alt="image-20231105162525337" /></p><h4 id="jedis"><a class="markdownIt-Anchor" href="#jedis"></a> Jedis</h4><p>Jedis的官网地址：<a href="https://github.com/redis.jedis">https://github.com/redis.jedis</a></p><p>1.引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.建立连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Jedis jedis;<br><span class="hljs-comment">//1.建立连接</span><br>jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">6379</span>);<br><span class="hljs-comment">//2.设置密码</span><br>jedis.auth(<span class="hljs-string">&quot;redispassword&quot;</span>);<br><span class="hljs-comment">//3.选择库</span><br>jedis.select(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>3.测试String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-comment">//操作String类型</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;ymxl&quot;</span>);<br>     System.out.println(<span class="hljs-string">&quot;res = &quot;</span> + res);<br><br>     <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>     System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4.释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(jedis != <span class="hljs-literal">null</span>) &#123;<br>    jedis.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="jedis连接池"><a class="markdownIt-Anchor" href="#jedis连接池"></a> Jedis连接池</h4><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用jedis连接池代替jedis的直连方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.lxg;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPool;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPoolConfig;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectionFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> JedisPool jedisPool;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        <span class="hljs-comment">//最大连接</span><br>        poolConfig.setMaxTotal(<span class="hljs-number">8</span>);<br>        <span class="hljs-comment">//最大空闲连接</span><br>        poolConfig.setMaxIdle(<span class="hljs-number">8</span>);<br>        <span class="hljs-comment">//最小空闲连接</span><br>        poolConfig.setMinIdle(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//设置最长等待时间,ms</span><br>        poolConfig.setMaxWaitMillis(<span class="hljs-number">200</span>);<br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig,<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">6379</span>,<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;redispassword&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> jedisPool.getResource();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果是使用springboot整合的话，上边的相关设置，直接写在配置文件中即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">jedis:</span><br>        <span class="hljs-attr">pool:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>          <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>          <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>          <span class="hljs-attr">max-wait:</span> <span class="hljs-number">200</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">118.31</span><span class="hljs-number">.33</span><span class="hljs-number">.161</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">1923403646redis</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">connect-timeout:</span> <span class="hljs-number">2000</span><br></code></pre></td></tr></table></figure><p>然后创建JedisConfig配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.lxg.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPool;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPoolConfig;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.data.redis.host&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String host;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.data.redis.port&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.data.redis.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.data.redis.connect-timeout&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> timeout;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.data.redis.jedis.pool.max-active&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxActive;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.data.redis.jedis.pool.max-idle&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxIdle;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.data.redis.jedis.pool.min-idle&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> minIdle;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JedisPool <span class="hljs-title function_">jedisPool</span><span class="hljs-params">()</span>&#123;<br>        JedisPoolConfig jedisPoolConfig=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        jedisPoolConfig.setMaxIdle(maxIdle);<br>        jedisPoolConfig.setMinIdle(minIdle);<br>        jedisPoolConfig.setMaxTotal(maxActive);<br><br>        JedisPool jedisPool;<br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(jedisPoolConfig,host,port,timeout,password);<br>        <span class="hljs-keyword">return</span> jedisPool;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>   <span class="hljs-keyword">private</span> JedisPool jedisPool;<br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJedisPool</span><span class="hljs-params">()</span> &#123;<br>       jedis = jedisPool.getResource();<br>       <span class="hljs-comment">//操作String类型</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;ymxl&quot;</span>);<br>       System.out.println(<span class="hljs-string">&quot;res = &quot;</span> + res);<br><br>       <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>       System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="spring-data-redis"><a class="markdownIt-Anchor" href="#spring-data-redis"></a> Spring-Data-Redis</h4><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网网址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis的哨兵和Redis集群</li><li>支持基于JDK,JSON，字符串，Spring对象的数据序列化以及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><h5 id="springdataredis快速入门"><a class="markdownIt-Anchor" href="#springdataredis快速入门"></a> SpringDataRedis快速入门</h5><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202311052116311.png" alt="image-20231105211450049" /></p><p>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单：</p><p>1.依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--连接池依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">connect-timeout:</span> <span class="hljs-number">2000</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">118.31</span><span class="hljs-number">.33</span><span class="hljs-number">.161</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">1923403646redis</span><br>      <span class="hljs-attr">lettuce:</span><br>        <span class="hljs-attr">pool:</span><br>          <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>          <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>          <span class="hljs-attr">min-idle:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">time-between-eviction-runs:</span> <span class="hljs-string">10s</span><br><br><br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate; <br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedis</span><span class="hljs-params">()</span> &#123;<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;ymxl&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) redisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202311052134922.png" alt="image-20231105213407764" /></p><p><strong><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202311052137186.png" alt="image-20231105213711055" /></strong></p><p>使用json序列化时需要jackson的依赖，但平时开发时，不需要自己导入，因为springMvc自带了jackson依赖。</p><h5 id="stringredistemplate"><a class="markdownIt-Anchor" href="#stringredistemplate"></a> StringRedisTemplate</h5><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202311052142361.png" alt="image-20231105214207280" /></p><p>为了节省内存空间，我们并不会使用JSON序列化器来处理value,而是统一使用String序列化器，要求只能存储String类型的key和value。当只需要存储Java对象时，手动完成对象序列化和反序列化。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202311052146774.png" alt="image-20231105214628704" /></p><p>而Spring默认提供了一个StringRedisTemplate类，它的key和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202311052148862.png" alt="image-20231105214857790" /></p>]]></content>
    
    
    <categories>
      
      <category>NOSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis在CentOs7上的安装教程</title>
    <link href="/2023/11/01/%E5%AE%89%E8%A3%85Redis(centos%207)/"/>
    <url>/2023/11/01/%E5%AE%89%E8%A3%85Redis(centos%207)/</url>
    
    <content type="html"><![CDATA[<h2 id="1-安装redis基于centos"><a class="markdownIt-Anchor" href="#1-安装redis基于centos"></a> 1、安装Redis(基于CentOS)</h2><h3 id="11-安装redis依赖"><a class="markdownIt-Anchor" href="#11-安装redis依赖"></a> 1.1、安装Redis依赖</h3><p>Redis基于c语言编写的，因此首先需要安装Redis依赖的gcc依赖</p><p><code>yum install -y gcc tcl</code></p><h3 id="12-下载安装包并解压"><a class="markdownIt-Anchor" href="#12-下载安装包并解压"></a> 1.2、下载安装包并解压</h3><ul><li><p>下载</p><p><code>wget http://download.redis.io/releases/redis-6.2.6.tar.gz</code></p></li><li><p>解压</p><p><code>tar -xzvf redis-6.2.6.tar.gz</code></p></li><li><p>进入resdis目录：</p><p><code>cd redis-6.2.6</code></p></li><li><p>运行编译命令</p><p><code>make &amp;&amp; make install</code></p></li></ul><p>如果没有出错，应该就安装成功了。默认的安装路径是<code>/usr/local/bin</code></p><p>该目录已经默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li><code>redis-cli</code>：是redis提供的命令行客户端</li><li><code>redis-server</code>：是redis的服务端启动脚本</li><li><code>redis-sentinel</code>：是redis的哨兵启动脚本</li></ul><h3 id="13-启动"><a class="markdownIt-Anchor" href="#13-启动"></a> 1.3、启动</h3><p>redis启动方式有很多</p><h4 id="131-默认启动"><a class="markdownIt-Anchor" href="#131-默认启动"></a> 1.3.1、默认启动</h4><p>可以直接在命令行输入<code>redis-server</code>来启动，这种方式属于<code>前台启动</code>，执行命令后会阻塞命令行窗口。需要你另外开一个窗口才能继续操作redis。若当前窗口关闭或者按下<code>ctrl + C</code></p><p>都会关闭redis</p><h4 id="132-指定配置启动"><a class="markdownIt-Anchor" href="#132-指定配置启动"></a> 1.3.2、指定配置启动</h4><p>要让redis以后台方式启动，则必须修改redis的配置文件，位置在解压目录下：名叫<code>redis.conf</code>：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202310241132729.png" alt="image-20231024103954405" /></p><p>为了防止我们修改过程中误操作导致出问题，我们可以先将该文件备份，再去修改。</p><p><code>cp redis.conf redis.conf.bck</code></p><p>然后就可以放心大胆的修改了。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 允许访问redis的地址，默认是127.0.0.1，也就是只允许本地访问，修改为0.0.0.0则可以在任意IP访问，生产环境下不要设置0.0.0.0</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">0.0.0.0</span><br><span class="hljs-comment"># 守护进程，修改为yes后即可后台运行</span><br><span class="hljs-attr">daemonize</span> <span class="hljs-string">yes</span><br><span class="hljs-comment"># 密码，设置后访问redis必须输入密码</span><br><span class="hljs-attr">requirepass</span> <span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p>Redis其它常见配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 监听的端口</span><br><span class="hljs-attr">port</span> <span class="hljs-string">6379</span><br><span class="hljs-comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span><br><span class="hljs-attr">dir</span> <span class="hljs-string">.</span><br><span class="hljs-comment"># 数据库数量，设置为1，代表只使用一个库，默认有16个库，编号0-15</span><br><span class="hljs-attr">database</span> <span class="hljs-string">1</span><br><span class="hljs-comment"># 设置redis能够使用的最大内存</span><br><span class="hljs-attr">maxmemory</span> <span class="hljs-string">512mb</span><br><span class="hljs-comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span><br><span class="hljs-attr">logfile</span> <span class="hljs-string">&quot;redis.log&quot;</span><br></code></pre></td></tr></table></figure><p>启动redis:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入redis安装目录</span><br>cd /home/root/software/redis/redis-6.2.6<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动</span><br>redis-server redis.conf<br></code></pre></td></tr></table></figure><p>停止服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 利用redis-cli来执行shutdown命令 即可停止redis服务</span><br><span class="hljs-comment"># 因为之前配置了密码，因此需要通过-a来指定密码</span><br>redis-cli -a 123456 shutdown<br></code></pre></td></tr></table></figure><h4 id="133-开机自启"><a class="markdownIt-Anchor" href="#133-开机自启"></a> 1.3.3、开机自启</h4><p>我们也可以通过配置来实现开机自启。首先，新建一个系统服务文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/systemd/system/redis.service<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs conf">[Unit]<br>Description=redis-server<br>After=network.target<br><br>[Service]<br>Type=forking<br>ExecStart=/usr/local/bin/redis-server /home/root/software/redis/redis-6.2.6/redis.conf<br>PrivateTmp=true<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后重新加载系统服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>然后就可以设置开机自启了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动服务</span><br>systemctl start redis<br><span class="hljs-comment"># 停止服务</span><br>systemctl stop redis<br><span class="hljs-comment"># 查看服务状态</span><br>systemctl status redis<br><span class="hljs-comment"># 设置开机自启</span><br>systemctl <span class="hljs-built_in">enable</span> redis<br></code></pre></td></tr></table></figure><h2 id="2-redis命令行客户端"><a class="markdownIt-Anchor" href="#2-redis命令行客户端"></a> 2、Redis命令行客户端</h2><p>redis安装完后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli [options] [commonds]<br></code></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code> ：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点端口，默认6379</li><li><code>-a 123456</code>：指定redis的访问密码</li></ul><p>其中的commonds就是默认Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常就会返回p<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202310242128143.png" alt="image-20231024212803054" /></p><p>若默认执行<code>redis-cli</code>进入redis命令行，执行<code>ping</code>会报错，说你没有权限，需要密码。但当你用<code>-a</code>选项携带密码时，他会告诉你不安全。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202310242134734.png" alt="image-20231024213433702" /></p><p>这里有一个好的替代方案：</p><ul><li>不携带密码连接redis命令行</li><li>进入redis命令行后再用<code>AUTH 密码</code>，进行认证获得权限</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202310242136809.png" alt="image-20231024213614783" /></p><p>进入redis交互控制台后就可以使用命令进行增删改查了</p><p><strong>远程连接redis时会显示超时，如果配置没有问题的化，就可能是云服务器给访问拒绝了，需要去服务器控制面板配置下安全组</strong></p><p>还有一些redis图形化客户端，方便用户操作，比如：</p><p>RedisDesktopManager：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">Releases · lework/RedisDesktopManager-Windows (github.com)</a></p><p>Another-RedisDesktopManager：<a href="https://gitee.com/qishibo/AnotherRedisDesktopManager/releases">AnotherRedisDesktopManager 发行版 - Gitee.com</a></p>]]></content>
    
    
    <categories>
      
      <category>安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令学习</title>
    <link href="/2023/09/06/linux/"/>
    <url>/2023/09/06/linux/</url>
    
    <content type="html"><![CDATA[<h1 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> Linux</h1><p><em>注：本文使用的示意图均为CentOs系统的图形界面</em></p><h2 id="linux的目录结构"><a class="markdownIt-Anchor" href="#linux的目录结构"></a> Linux的目录结构</h2><ul><li><p>Linux目录结构是一个树型结构</p></li><li><p>Windows系统可以拥有多个盘符，如：C盘、D盘、E盘</p></li><li><p>Linux没有盘符的概念，只有一个根目录<code>/</code>，所有文件都在它的下面</p><p>Windows示意：</p></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309062204062.png" alt="image-20230906220332191" /></p><p>Linux示意：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309062204399.png" alt="image-20230906220341610" /></p><h2 id="linux路径的描述方式"><a class="markdownIt-Anchor" href="#linux路径的描述方式"></a> Linux路径的描述方式</h2><ul><li><p>在Linux系统中，路径之间的层级关系，使用：<code>/</code>来表示</p></li><li><p>在Windows系统中，路径之间的层级关系，使用：<code>\</code>来表示</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309062210748.png" alt="image-20230906221037689" /></p></li></ul><p>比如上图中的<code>hello.txt</code>文件，Windows下路径为：<code>D:\data\work\hello.txt</code>，Linux下路径为：</p><p><code>/usr/local/hello.txt</code>。</p><h2 id="linux基础命令"><a class="markdownIt-Anchor" href="#linux基础命令"></a> Linux基础命令</h2><p>学习Linux，本质上是在学习命令行下熟练使用Linux的各类命令。</p><ul><li>命令行：即Linux终端（Terminal），是一种命令提示符页面。以纯“字符”的形式操作系统，可以使用各种字符化命令对系统发出操作指令</li><li>命令：即Linux程序。一个命令就是Linux的程序。命令没有图形化页面，可以在命令行（终端中）提供字符化的反馈。</li></ul><h3 id="linux命令基础格式"><a class="markdownIt-Anchor" href="#linux命令基础格式"></a> Linux命令基础格式</h3><p>无论是什么命令，用于什么用途，在Linux中命令有其通用的格式：</p><p><code>command [-options][parameter]</code></p><ul><li>command：命令本身</li><li>-options：[可选，非必填]命令的一些选项，可以通过选项控制命令的一些行为细节</li><li>parameter：[可选，非必填]命令的参数，多数用于命令的指向目标等</li></ul><p><strong>示例：</strong></p><ul><li><code>ls -l /home/xxx</code>，ls是命令本身，-l是选项，/home/xxx是参数。意思是：以列表的形式，显示<code>/home/xxx</code>目录的内容</li><li><code>cp -r test1 test2</code>，cp是命令本身，-r是选项，test1和test2是参数。意思是：复制文件夹 test1 成为 test2</li></ul><h3 id="ls命令入门"><a class="markdownIt-Anchor" href="#ls命令入门"></a> <code>ls</code>命令入门</h3><h4 id="基本格式"><a class="markdownIt-Anchor" href="#基本格式"></a> 基本格式</h4><p>ls命令的作用是列出目录下的内容，语法细节如下：</p><p><code>ls [-a -l -h] [Linux路径]</code></p><ul><li><code>-a -l -h</code>是可选的选项</li><li>Linux路径是此命令的可选的参数</li></ul><p>当不适用选项和参数，直接使用<code>ls</code>命令本体，表示：以平铺形式，列出当前工作目录下的内容</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309062242455.png" alt="image-20230906224200381" /></p><p><strong>HOME目录和当前工作目录</strong></p><p>Linux系统的命令行终端，在启动的时候，默认会加载：</p><ul><li><p>HOME目录：每个Linux操作用户在Linux新系统的个人账户目录，路径在：<code>/home/用户名</code></p><ul><li>如：图中的Linux用户是ymxl，其HOME目录是：<code>/home/ymxl</code></li><li>Windows系统和Linux系统均设有用户的HOME目录</li></ul><p>Windows示意：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309062246791.png" alt="image-20230906224607726" /></p><p>Linux示意：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309062245826.png" alt="image-20230906224503741" /></p></li></ul><h4 id="ls命令的可选参数"><a class="markdownIt-Anchor" href="#ls命令的可选参数"></a> ls命令的可选参数</h4><ul><li><p>参数：显示参数给出的路径下的所有文件夹</p></li><li><p>选项：</p><ul><li><code>-a</code>：表示all的意思，即列出全部文件（包含隐藏的文件/文件夹）</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309062252218.png" alt="image-20230906225248141" /></p><p>可以看出这里显示的文件更多了。其中还有一些<code>.</code>开头的文件，则是表示LInux系统的隐藏文件/文件夹（只要以<code>.</code>开头，就自动隐藏），只有通过<code>-a</code>选项才能看到这些隐藏文件\文件夹</p><ul><li><code>-l</code>：表示以列表（竖向排列）的形式展示内容，并展示更多信息</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309062256916.png" alt="" /></p><ul><li><code>-h</code>:表示以易于阅读的形式，列出文件大小，如：K、M、G。<strong>注意：<code>-h</code>选项要搭配<code>-l</code>一起使用</strong></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309062303602.png" alt="image-20230906230318481" /></p></li></ul><p><strong>语法中的选项是可以组合使用的，比如<code>-a</code>、<code>-l</code>可以组合应用。</strong></p><p>写法：</p><ul><li><code>ls -l -a</code></li><li><code>ls -la</code></li><li><code>ls -al</code></li></ul><p>上述三种写法，都是一样的，表示同时应用<code>-l</code>和<code>-a</code>的功能</p><h3 id="目录切换相关命令cdpwd"><a class="markdownIt-Anchor" href="#目录切换相关命令cdpwd"></a> 目录切换相关命令（<code>cd</code>\<code>pwd</code>）</h3><h4 id="cd切换工作目录"><a class="markdownIt-Anchor" href="#cd切换工作目录"></a> cd切换工作目录</h4><p>当Linux终端（命令行）打开的时候，会默认以用户的HOME目录作为当前的工作目录，我们可以通过<code>cd</code>命令，更改当前所在的工作目录。<code>cd</code>命令来自英文：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mi>C</mi><mstyle mathcolor="black"><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext> </mtext><mstyle mathcolor="red"><mi>D</mi><mstyle mathcolor="black"><mi>i</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>y</mi></mstyle></mstyle></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\color{red}C\color{black}hange\ \color{red}D\color{black}irectory</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;color:red;">C</span><span class="mord mathnormal" style="color:black;">h</span><span class="mord mathnormal" style="color:black;">a</span><span class="mord mathnormal" style="color:black;">n</span><span class="mord mathnormal" style="margin-right:0.03588em;color:black;">g</span><span class="mord mathnormal" style="color:black;">e</span><span class="mspace" style="color:black;"><span style="color:black;"> </span></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">D</span><span class="mord mathnormal" style="color:black;">i</span><span class="mord mathnormal" style="margin-right:0.02778em;color:black;">r</span><span class="mord mathnormal" style="color:black;">e</span><span class="mord mathnormal" style="color:black;">c</span><span class="mord mathnormal" style="color:black;">t</span><span class="mord mathnormal" style="color:black;">o</span><span class="mord mathnormal" style="margin-right:0.02778em;color:black;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;color:black;">y</span></span></span></span></p><p>语法：<code>cd [Linux目录]</code></p><ul><li><p><code>cd</code>命令无需选项，只有参数，表示要切换到那个目录下</p><p>如：切换到根目录，并以列表展示</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309070904629.png" alt="" /></p></li><li><p>如果<code>cd</code>命令直接执行，不写参数，表示回到用户的HOME目录。即目录<code>/home/用户名</code></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309070905635.png" alt="image-20230907090553542" /></p></li></ul><h4 id="pwd查看当前工作目录"><a class="markdownIt-Anchor" href="#pwd查看当前工作目录"></a> pwd查看当前工作目录</h4><p>通过<code>ls</code>来验证当前的工作目录，其实是不恰当的。我们可以通过<code>pwd</code>命令，来查看当前所在的工作目录。</p><p>pwd命令来自：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mi>P</mi><mstyle mathcolor="black"><mi>r</mi><mi>i</mi><mi>n</mi><mi>t</mi><mtext> </mtext><mstyle mathcolor="red"><mi>W</mi><mstyle mathcolor="black"><mi>o</mi><mi>r</mi><mi>k</mi><mtext> </mtext><mstyle mathcolor="red"><mi>D</mi><mstyle mathcolor="black"><mi>i</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>y</mi></mstyle></mstyle></mstyle></mstyle></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\color{red}P\color{black}rint\ \color{red}W\color{black}ork\ \color{red}D\color{black}irectory</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;color:red;">P</span><span class="mord mathnormal" style="margin-right:0.02778em;color:black;">r</span><span class="mord mathnormal" style="color:black;">i</span><span class="mord mathnormal" style="color:black;">n</span><span class="mord mathnormal" style="color:black;">t</span><span class="mspace" style="color:black;"><span style="color:black;"> </span></span><span class="mord mathnormal" style="margin-right:0.13889em;color:red;">W</span><span class="mord mathnormal" style="color:black;">o</span><span class="mord mathnormal" style="margin-right:0.02778em;color:black;">r</span><span class="mord mathnormal" style="margin-right:0.03148em;color:black;">k</span><span class="mspace" style="color:black;"><span style="color:black;"> </span></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">D</span><span class="mord mathnormal" style="color:black;">i</span><span class="mord mathnormal" style="margin-right:0.02778em;color:black;">r</span><span class="mord mathnormal" style="color:black;">e</span><span class="mord mathnormal" style="color:black;">c</span><span class="mord mathnormal" style="color:black;">t</span><span class="mord mathnormal" style="color:black;">o</span><span class="mord mathnormal" style="margin-right:0.02778em;color:black;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;color:black;">y</span></span></span></span></p><p>语法：<code>pwd</code></p><ul><li><p><code>pwd</code>命令，无选项，无参数，直接输入<code>pwd</code>命令即可</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309070914136.png" alt="image-20230907091438072" /></p></li></ul><h3 id="相对路径-绝对路径和特殊路径符"><a class="markdownIt-Anchor" href="#相对路径-绝对路径和特殊路径符"></a> 相对路径、绝对路径和特殊路径符</h3><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309070921386.png" alt="image-20230907092131336" /></p><p>如图：通过<code>pwd</code>命令得知当前所在HOME目录：<code>/home/ymxl</code>现在想要通过<code>cd</code>命令。切换工作目录到Desktop文件中去。</p><p>那么，<code>cd</code>命令的参数（Linux路径）应该怎么写呢？</p><ul><li><code>cd /home/ymxl/Desktop</code></li><li><code>cd Desktop</code></li></ul><p>上述两种写法，都可以正确的切换目录到指定的Desktop中。</p><ul><li><p>绝对路径写法：<code>cd /home/ymxl/Desktop</code></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309070959675.png" alt="image-20230907092904825" /></p></li><li><p>相对路径写法：<code>cd Desktop</code></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309070959765.png" alt="" /></p><p>绝对路径：以<strong>根目录为起点</strong>，描述路径的一种写法，路径描述以<code>/</code>开头</p><p>相对路径：以<strong>当前目录为起点</strong>，描述路径的一种的写法，路径描述无需以<code>/</code>开头</p></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309070934255.png" alt="image-20230907093447208" /></p><p>如图：当前工作目录处于：<code>/hoem/ymxl/Desktop</code>，现在想要，向上回退一级，切换目录到<code>/home/ymxl</code>中，如何做呢？</p><ul><li>可以直接通过<code>cd</code>，即可回到HOME目录</li><li>也可以通过特殊路径符来完成。</li></ul><p><strong>特殊路径符</strong></p><ul><li><p><code>.</code>：表示当前目录，比如<code>cd ./Desktop</code> 表示切换到当前目录下的Desktop目录内，和<code>cd Desktop</code>效果一致</p></li><li><p><code>..</code>：表示上一级目录，比如：<code>cd ..</code> 即可切换到上一级目录，<code>cd ../..</code>切换到上二级目录</p></li><li><p><code>~</code>：表示HOME目录，比如：<code>cd ~</code> 即可切换到HOME目录或<code>cd ~/Desktop</code>，切换到HOME内的Desktop目录。</p><p>可以理解为<code> ~ == /home/ymxl</code></p></li></ul><h3 id="创建目录命令mkdir"><a class="markdownIt-Anchor" href="#创建目录命令mkdir"></a> 创建目录命令（<code>mkdir</code>）</h3><p>通过<code>mkdir</code>命令可以创建新的目录（文件夹）</p><p><code>mkdir</code>来自英文：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mi>M</mi><mstyle mathcolor="black"><mi>a</mi><mi>k</mi><mi>e</mi><mtext> </mtext><mstyle mathcolor="red"><mi>D</mi><mstyle mathcolor="black"><mi>i</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mi>y</mi></mstyle></mstyle></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\color{red}M\color{black}ake\ \color{red}D\color{black}irectory</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;color:red;">M</span><span class="mord mathnormal" style="color:black;">a</span><span class="mord mathnormal" style="margin-right:0.03148em;color:black;">k</span><span class="mord mathnormal" style="color:black;">e</span><span class="mspace" style="color:black;"><span style="color:black;"> </span></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">D</span><span class="mord mathnormal" style="color:black;">i</span><span class="mord mathnormal" style="margin-right:0.02778em;color:black;">r</span><span class="mord mathnormal" style="color:black;">e</span><span class="mord mathnormal" style="color:black;">c</span><span class="mord mathnormal" style="color:black;">t</span><span class="mord mathnormal" style="color:black;">o</span><span class="mord mathnormal" style="margin-right:0.02778em;color:black;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;color:black;">y</span></span></span></span></p><p>语法：<code>mkdir [-p] Linux路径</code></p><ul><li><p>参数<strong>必填</strong>，表示Linux路径，即要创建的文件夹的路径，相对路径或绝对路径均可</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071014799.png" alt="image-20230907101310917" /></p></li><li><p><code>-p</code>选项，表示自动创建不存在的父目录，适用于创建连续多层级的目录。</p><p>如果想要一次性创建多个层级的目录，如下图：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071017768.png" alt="image-20230907101740729" /></p><p>会报错，因为上级目录xxx和yyy都不存在，所以无法创建zzz目录</p><p>可以通过<code>-p</code>选项，将一整个链条都创建完成</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071018118.png" alt="image-20230907101828057" /></p></li></ul><p><strong>注意：创建文件夹需要修改权限，请确保操作均在HOME目录下，不要再HOME外操作，会涉及到权限问题，HOME外无法成功。关于权限管控的知识，等后续书写</strong></p><h3 id="文件操作命令touch-cat-more-cp-mv-rm"><a class="markdownIt-Anchor" href="#文件操作命令touch-cat-more-cp-mv-rm"></a> 文件操作命令(<code>touch</code>、<code>cat</code>、<code>more</code>、<code>cp</code>、<code>mv</code>、<code>rm</code>)</h3><p><em>在命令行中区分文件和文件夹：</em></p><p><em>1.可以通过颜色来区分，文件夹为蓝色，文件为白色</em></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071028762.png" alt="image-20230907102845695" /></p><p><em>2.通过<code>ls -lh</code>命令展示出的目录结构中文件以<code>-</code>开头，文件夹以<code>d</code>开头</em></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071029098.png" alt="image-20230907102910025" /></p><h4 id="touch创建文件"><a class="markdownIt-Anchor" href="#touch创建文件"></a> touch创建文件</h4><p>通过<code>touch</code>命令创建文件</p><p>语法：<code>touch Linux路径</code></p><ul><li><p><code>touch</code>命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径符均可以使用</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071025935.png" alt="image-20230907102519859" /></p></li></ul><h4 id="cat命令查看文件内容"><a class="markdownIt-Anchor" href="#cat命令查看文件内容"></a> cat命令查看文件内容</h4><p>有了文件后，我们可以通过<code>cat</code>命令查看文件内容。不过，现在我们还未学习vi编辑器，无法向文件内编辑内容，所以，暂时，我们先通过图形化，手动向文件内添加内容，来测试<code>cat</code>命令</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071034910.png" alt="image-20230907103416840" /></p><p>准备文件内容后，可以通过<code>cat</code>查看内容。</p><p>语法：<code>cat Linux路径</code></p><ul><li><code>cat</code>同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li></ul><h4 id="more命令查看文件内容"><a class="markdownIt-Anchor" href="#more命令查看文件内容"></a> more命令查看文件内容</h4><p><code>more</code>命令同样可以查看文件内容，与<code>cat</code>不同的是：</p><ul><li><code>cat</code>是直接将内容全部展示出来</li><li><code>more</code>支持翻页，如果文件内容过多，可以一页一页的展示。翻页通过按<code>空格</code>控制。按<code>q</code>退出查看</li></ul><p>语法：<code>more Linux路径</code></p><ul><li>同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li></ul><h4 id="cp命令复制文件-文件夹"><a class="markdownIt-Anchor" href="#cp命令复制文件-文件夹"></a> cp命令复制文件、文件夹</h4><p><code>cp</code>命令可以用于复制文件、文件夹，来自英文单词 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mi>c</mi><mstyle mathcolor="black"><mi>o</mi><mstyle mathcolor="red"><mi>p</mi><mstyle mathcolor="black"><mi>y</mi></mstyle></mstyle></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\color{red}c\color{black}o\color{red}p\color{black}y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="color:red;">c</span><span class="mord mathnormal" style="color:black;">o</span><span class="mord mathnormal" style="color:red;">p</span><span class="mord mathnormal" style="margin-right:0.03588em;color:black;">y</span></span></span></span></p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li><p><code>-r</code>选项，可选，用于复制文件夹使用，表示递归</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071048634.png" alt="image-20230907104811574" /></p></li><li><p><code>参数1</code>，Linux路径，表示被复制的文件或文件夹</p></li><li><p><code>参数2</code>，Linux路径，表示要复制去的地方</p></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071047344.png" alt="image-20230907104705291" /></p><h4 id="mv命令移动文件-文件夹"><a class="markdownIt-Anchor" href="#mv命令移动文件-文件夹"></a> mv命令移动文件、文件夹</h4><p><code>mv</code>命令可以用于移动文件、文件夹，<code>mv</code>命令来自英文单词 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mi>m</mi><mstyle mathcolor="black"><mi>o</mi><mstyle mathcolor="red"><mi>v</mi><mstyle mathcolor="black"><mi>e</mi></mstyle></mstyle></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\color{red}m\color{black}o\color{red}v\color{black}e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="color:red;">m</span><span class="mord mathnormal" style="color:black;">o</span><span class="mord mathnormal" style="margin-right:0.03588em;color:red;">v</span><span class="mord mathnormal" style="color:black;">e</span></span></span></span></p><p>语法：<code>mv 参数1 参数2</code></p><ul><li><p><code>参数1</code>，Linux路径，表示被移动的文件或文件夹</p></li><li><p><code>参数2</code>，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071053670.png" alt="image-20230907105332621" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071054327.png" alt="image-20230907105422293" /></p></li></ul><h4 id="rm命令删除文件-文件夹"><a class="markdownIt-Anchor" href="#rm命令删除文件-文件夹"></a> rm命令删除文件、文件夹</h4><p><code>rm</code>命令可用于删除文件、文件夹，来自英文单词 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mi>r</mi><mstyle mathcolor="black"><mi>o</mi><mstyle mathcolor="red"><mi>m</mi><mstyle mathcolor="black"><mi>o</mi><mi>v</mi><mi>e</mi></mstyle></mstyle></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\color{red}r\color{black}o\color{red}m\color{black}ove</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;color:red;">r</span><span class="mord mathnormal" style="color:black;">o</span><span class="mord mathnormal" style="color:red;">m</span><span class="mord mathnormal" style="color:black;">o</span><span class="mord mathnormal" style="margin-right:0.03588em;color:black;">v</span><span class="mord mathnormal" style="color:black;">e</span></span></span></span></p><p>语法：<code>rm [-r -f] 参数1 参数2 ... 参数n</code></p><ul><li>同<code>cp</code>命令一样，<code>-r</code>选项用于文件夹</li><li><code>-f</code>表示force，强制删除（不会弹出提示确认信息）<ul><li>普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示</li><li>所以一般普通用户用不到<code>-f</code>选项</li></ul></li><li><code>参数1 参数2 ... 参数n</code>表示要删除的文件或文件夹路径，可以一次删除多个，按照空格隔开</li></ul><p>删除HOME目录下的文件<code>hello2.txt</code></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071104954.png" alt="image-20230907110438869" /></p><p>删除文件夹<code>test1 test2 test 3</code></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071106796.png" alt="image-20230907110611719" /></p><p><strong>rm命令支持通配符，用来做模糊匹配，这样就可以方便删除大量的某一类文件</strong></p><ul><li><p><code>*</code>：表示通配符，即匹配任意内容（包含空）。</p><ul><li><code>xxx*</code>,表示匹配任何前缀为<code>xxx</code>的内容</li><li><code>*xxx</code>，表示匹配任何后缀为<code>xxx</code>的内容</li><li><code>*xxx*</code>，表示匹配任何包含<code>xxx</code>的内容</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071113687.png" alt="image-20230907111327597" /></p></li></ul><p><strong>强制删除，<code>-f</code>选项</strong></p><ul><li>可以通过<code>su -root</code>，并输入密码<code>123456</code>（和普通用户默认一样）临时切换到root用户（管理员用户）体验</li><li>通过输入<code>exit</code>命令，返回普通用户。（临时用root，用完记退出，不要一直用）</li></ul><p><code>rm</code>命令是一个危险命令，特别是处于root（超级管理员）用户的时候，请谨慎使用</p><p>如下命令，千万千万不要在root用户下执行：</p><p><code>rm -rf /</code>、<code>rm -rf /*</code></p><p>效果就是强制删除根目录或根目录下的内容，后果可想而知！！！</p><h3 id="查找命令which-find"><a class="markdownIt-Anchor" href="#查找命令which-find"></a> 查找命令（<code>which</code>、<code>find</code>）</h3><h4 id="which命令"><a class="markdownIt-Anchor" href="#which命令"></a> which命令</h4><p>我们正在学习的Linux命令，其实它们的本质就是一个个二进制可执行程序和Windows系统中的<code>.exe</code>文件一样</p><p>我们可以通过<code>which</code>命令，查看所使用的一系列命令的程序文件存放在哪里</p><p>语法：<code>which 要查找的命令</code></p><h4 id="find命令"><a class="markdownIt-Anchor" href="#find命令"></a> find命令</h4><h5 id="按文件名查找"><a class="markdownIt-Anchor" href="#按文件名查找"></a> 按文件名查找</h5><p>在Linux系统中，我们可以通过<code>find</code>命令去搜索指定的文件。</p><p>语法：<code>find 起始路径 -name &quot;被查找的文件名&quot;</code></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071127897.png" alt="image-20230907112752831" /></p><h5 id="通配符匹配查找"><a class="markdownIt-Anchor" href="#通配符匹配查找"></a> 通配符匹配查找</h5><p>同<code>rm</code>命令一样，可以使用通配符来模糊匹配文件，进行模糊查询</p><h5 id="按文件大小查找文件"><a class="markdownIt-Anchor" href="#按文件大小查找文件"></a> 按文件大小查找文件</h5><p>语法：<code>find 起始路径 -size +|-n[kMG] </code></p><ul><li><code>+、-</code>表示大于、小于</li><li><code>n</code>表示数字</li><li><code>kMG</code>表示大小单位，k(注意k是小写,MG是大写)表示kb，M表示MB，G表示GB</li></ul><p>示例：</p><ul><li>查找小于10KB的文件：<code>find / -size -10k</code></li><li>查找大于100MB的文件：<code>find / -size +100M</code></li><li>查找大于1GB的文件：<code>find / -size +1G</code></li></ul><h3 id="grep-wc和管道符"><a class="markdownIt-Anchor" href="#grep-wc和管道符"></a> grep、wc和管道符</h3><h4 id="grep命令"><a class="markdownIt-Anchor" href="#grep命令"></a> grep命令</h4><p>通过<code>grep</code>命令，可以从文件中通过关键字过滤文件行。</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项<code>-n</code>，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用“ ”将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，<strong>可作为内容输入端口</strong></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071714175.png" alt="image-20230907160107849" /></p><h4 id="wc命令"><a class="markdownIt-Anchor" href="#wc命令"></a> wc命令</h4><p>通过<code>wc</code>命令统计文件的行数，单词数量等</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，<code>-c</code>，统计bytes数量</li><li>选项，<code>-m</code>，统计字符数量</li><li>选项，<code>-l</code>，统计行数</li><li>选项，<code>-w</code>，统计单词数量</li><li>参数，文件路径，被统计的文件，<strong>可作为内容的输入端口</strong></li></ul><p>若不带选项执行命令，则会在一行内输出：行数，单词数，字节数，文件名。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071713905.png" alt="image-20230907155806634" /></p><h4 id="管道符"><a class="markdownIt-Anchor" href="#管道符"></a> 管道符</h4><p>学习了<code>grep</code>命令后，我们在来学习一个新的特殊符号，管道符：<code>|</code>。</p><p>管道符的含义是：将管道符左边的命令结果，作为右边命令的输入</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071714279.png" alt="image-20230907161625711" /></p><p>如上：</p><ul><li><code>cat test/hello.txt</code>的输出结果（文件内容），作为右边<code>grep</code>命令的输入（被过滤的文件）</li></ul><p>这样只要命令由内容输入端口，就可以通过管道符<code>|</code>去接收一一些命令的输出结果,按照这个道理，还可以嵌套。</p><p><code>cat test/hello.txt | grep &quot;welcom&quot; | grep &quot;linux&quot;</code></p><h3 id="echo和重定向符"><a class="markdownIt-Anchor" href="#echo和重定向符"></a> echo和重定向符</h3><h4 id="echo命令"><a class="markdownIt-Anchor" href="#echo命令"></a> echo命令</h4><p>通过<code>echo</code>命令，可以在命令行内输出指定内容</p><p>语法：<code>echo 输出的内容</code></p><ul><li>无需选项，只有一个参数，表示要输出的内容，复杂内容可以用<code>“”</code>（英文输入）包围</li><li>演示：<ul><li>在终端显示：hello linux</li><li>带有<code>空格</code>或<code>\</code>特殊符号，建议使用双引号包围。如果不包围，在某些命令中，空格后很容易被当成第二个参数。尽管这里的<code>echo</code>并不受影响，但应养成良好的习惯</li></ul></li></ul><h4 id="反引号"><a class="markdownIt-Anchor" href="#反引号"></a> 反引号<code>'</code></h4><p>由如下场景：我们本意是在终端输出一下<code>pwd</code>命令的结果。但直接写<code>echo pwd</code>的话 只会输出“pwd”，并不会输出这个命令的结果</p><p>这时就需要<code>'</code>了。我们可以通过反引号，通常也称为飘号。被飘号包围的内容会被当成命令执行而非普通字符</p><h4 id="重定向符"><a class="markdownIt-Anchor" href="#重定向符"></a> 重定向符</h4><p>再来学习两个特殊符号，重定向符：<code>&gt;</code>，<code>&gt;&gt;</code></p><ul><li><code>&gt;</code>，将左侧命令的结果，<strong>覆盖</strong>写入符号右侧指定的文件中</li><li><code>&gt;&gt;</code>，将左侧命令的结果，<strong>追加</strong>写入符号右侧指定的文件中</li></ul><p>演示：</p><ul><li><p><code>echo &quot;hello linux&quot; &gt; hello.txt</code>，输出内容&quot;hello linux&quot;到文件 hello.txt中，并覆盖原有内容。文件现有内容为：hello linux</p></li><li><p><code>echo &quot;hello world&quot; &gt; hello.txt</code>，输出内容“hello world”到文件hello.txt中，并覆盖原有内容。文件现有内容为：hello world</p></li><li><p><code>echo &quot;hello ymxl&quot; &gt;&gt; hello.txt</code>，以追加的方式输出内容“hello ymxl”到文件中，文件现有内容为：</p><p>hello wolrd</p><p>hello ymxl</p></li></ul><h4 id="tail命令"><a class="markdownIt-Anchor" href="#tail命令"></a> tail命令</h4><p>使用<code>tail</code>命令，可以查看文件尾部内容，跟踪文件的最新更改，语法如下：</p><p><code>tail [-f -num] Linux路径</code></p><ul><li>参数，<code>Linux路径</code>，表示被跟踪的文件路径</li><li>选项，<code>-f</code>，follow的意思，表示持续跟踪</li><li>选项，<code>-num</code>，一个具体的数字，表示，查看尾部多少行，不填默认10行</li></ul><h2 id="vivim编辑器"><a class="markdownIt-Anchor" href="#vivim编辑器"></a> vi\vim编辑器</h2><p>vi \ vim编辑器是visual interface的简称，是Linux中最经典的文本编辑器</p><p>同图形化界面中的文本编辑器一样，vi是命令行下对文本文件进行编辑的绝佳选择</p><p><em>vim 是 vi 的加强版本，兼容 vi 的所有指令，不仅能编辑文本，而且还具有shell程序编辑的功能，可以不同颜色的字体来辨别语法的正确性，极大方便了程序的设计和编辑性</em></p><h5 id="vivim编辑器的三种工作模式"><a class="markdownIt-Anchor" href="#vivim编辑器的三种工作模式"></a> vi\vim编辑器的三种工作模式</h5><ul><li><p>命令模式（Command mode）</p><p>命令模式下，所敲的按键，编辑器都理解为命令，以命令驱动执行所有不同的功能，此模式下，不能自由进行文本编辑</p></li><li><p>输入模式（Insert mode）</p><p>也就是所谓的编辑模式，插入模式。此模式下，可以对文本内容进行自由编辑</p></li><li><p>底线命令模式（Last Line mode）</p><p>以：开始，通常用于文件的保存、退出</p></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071701930.png" alt="image-20230907170102878" /></p><h6 id="命令模式"><a class="markdownIt-Anchor" href="#命令模式"></a> 命令模式</h6><p>如果需要通过vi / vim编辑器编辑文件，请通过如下命令：</p><p><code>vi 文件路径</code></p><p><code>vim 文件路径</code></p><p>vim 兼容 全部 vi 功能，后续全部使用 vim 命令</p><ul><li>如果文件路径表示的文件<strong>不存在</strong>，那么此命令会用于<strong>编辑新文件</strong></li><li>如果文件路径表示的文件<strong>存在</strong>，那么此命令用于<strong>编辑已有文件</strong></li></ul><p>通过 vi/vim 命令编辑文件，会打开一个新的窗口，此时这个窗口就是：命令模式窗口</p><p>命令模式是 vi 编辑器的入口和出口</p><ul><li>进入 vi 编辑器会进入命令模式</li><li>通过命令模式输入键盘指令<code>i、a、o</code>，可以进入输入模式</li><li>输入模式需要退回到命令模式，然后通过命令可以进入底线命令模式</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071727023.png" alt="image-20230907172725945" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071729562.png" alt="image-20230907172946479" /></p><h6 id="底线命令模式"><a class="markdownIt-Anchor" href="#底线命令模式"></a> 底线命令模式</h6><p>编辑模式没什么特殊的，进入编辑模式后，任何快捷键都没有作用，就是正常输入文本而已。唯一需要注意的是，就是：通过esc，可以退回到命令模式。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309071735414.png" alt="image-20230907173546365" /></p><h2 id="linux用户和权限"><a class="markdownIt-Anchor" href="#linux用户和权限"></a> Linux用户和权限</h2><h3 id="root用户超级管理员"><a class="markdownIt-Anchor" href="#root用户超级管理员"></a> root用户（超级管理员）</h3><p>无论是Windows、MacOS、Linux均采用多用户的管理模式进行权限管理</p><ul><li>在Linux系统中，拥有最大权限的账户名为：root（超级管理员）</li><li>而在前期，我们一直使用的账号是普通的用户：ymxl</li></ul><p>root用户拥有最大的系统操作权限，而普通用户在许多地方的权限是受限的。</p><p>比如：普通用户不可以在根目录<code>/</code>下创建文件夹，而root账户可以</p><ul><li>普通用户的权限，一般在其HOME目录内是不受限的</li><li>一旦出了HOME目录，大多数地方，普通用户仅有只读和执行权限，无修改权限</li></ul><h3 id="su和exit命令"><a class="markdownIt-Anchor" href="#su和exit命令"></a> su和exit命令</h3><p><code>su</code>命令就是用于账户切换的系统命令，其源自英文单词<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mi>S</mi><mstyle mathcolor="black"><mi>w</mi><mi>i</mi><mi>t</mi><mi>c</mi><mi>h</mi><mtext> </mtext><mstyle mathcolor="red"><mi>U</mi><mstyle mathcolor="black"><mi>s</mi><mi>e</mi><mi>r</mi></mstyle></mstyle></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\color{red}S\color{black}witch\ \color{red}U\color{black}ser</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;color:red;">S</span><span class="mord mathnormal" style="margin-right:0.02691em;color:black;">w</span><span class="mord mathnormal" style="color:black;">i</span><span class="mord mathnormal" style="color:black;">t</span><span class="mord mathnormal" style="color:black;">c</span><span class="mord mathnormal" style="color:black;">h</span><span class="mspace" style="color:black;"><span style="color:black;"> </span></span><span class="mord mathnormal" style="margin-right:0.10903em;color:red;">U</span><span class="mord mathnormal" style="color:black;">s</span><span class="mord mathnormal" style="color:black;">e</span><span class="mord mathnormal" style="margin-right:0.02778em;color:black;">r</span></span></span></span></p><p>语法： <code>su [-] [用户名]</code></p><ul><li><code>-</code>符号是可选的，表示是否在切换用户后加载环境变量，建议带上</li><li>参数：用户名，表示要切换的用户，用户名也可以省略，省略表示切换到root</li><li><strong>切换用户后，可以通过<code>exit</code>命令退回上一个用户，也可以使用快捷键：<code>ctrl + d</code></strong></li><li>使用普通用户，切换到其它用户<strong>需要输入密码</strong>，如切换到root用户</li><li>使用root用户切换到其它用户，<strong>无需密码</strong>，可以直接切换</li></ul><h3 id="sudo命令"><a class="markdownIt-Anchor" href="#sudo命令"></a> sudo命令</h3><p>在我们得知root密码的时候，可以通过<code>su</code>命令切换到root得到最大权限。</p><p>但是我们不建议长期使用root用户，避免带来系统损坏。</p><p>我们可以使用<code>sudo</code>命令，为普通的命令授权，临时以root身份执行。</p><p>语法：<code>sudo</code>其他命令</p><ul><li>在其它命令之前，带上<code>sudo</code>，即可为这一条命令临时赋予root授权</li><li>但并不是所有的用户都有权力使用<code>sudo</code>，我们<strong>需要为普通用户配置sudo认证</strong></li></ul><h4 id="为普通用户配置sudo认证"><a class="markdownIt-Anchor" href="#为普通用户配置sudo认证"></a> 为普通用户配置sudo认证</h4><ul><li>切换到root用户，执行<code>visudo</code>命令，会自动通过vi编辑器打开：<code>/etc/sudoers</code></li><li>在文件的最后添加：<code>用户名 ALL=(ALL)     NOPASSWORD: ALL</code><ul><li>其中最后的NOPASSWORD:ALL表示使用<code>sudo</code>命令无需输入密码</li></ul></li><li>最后通过<code>wq</code>保存</li><li>切换回普通用户</li><li>在<code>sudo</code>后执行的命令，均以root运行</li></ul><h3 id="用户-用户组"><a class="markdownIt-Anchor" href="#用户-用户组"></a> 用户、用户组</h3><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309072055131.jpg" alt="OIP-C" /></p><p>在Linux系统中可以：</p><ul><li>配置多个用户</li><li>配置多个用户组</li><li>用户可以加入多个用户组中</li></ul><p>Linux中关于权限的管控级别有两个级别，分别是：</p><ul><li>针对用户的权限控制</li><li>针对用户组的权限控制</li></ul><p>比如：针对某文件，可以控制用户的权限，也可以控制用户组的权限。</p><p>所以，我们需要学习在Linux中进行用户、用户组管理的基础命令，为后面学习权限控制打下基础</p><h4 id="用户组管理"><a class="markdownIt-Anchor" href="#用户组管理"></a> 用户组管理</h4><p><strong>以下命令需要root用户执行</strong></p><ul><li>创建用户组：<code>groupadd 用户组名</code></li><li>删除用户组：<code>groupdel 用户组名</code>。需要注意的是，只有当前用户组没有用户了，才可以删除</li></ul><h4 id="用户管理"><a class="markdownIt-Anchor" href="#用户管理"></a> 用户管理</h4><p><strong>以下命令需要root用户执行</strong></p><ul><li>创建用户：<code>useradd [-g -d] 用户名</code><ul><li>选项<code>-g</code>：指定用户的组，不指定<code>-g</code>，会创建同名组并自动加入，指定<code>-g</code>需要组已经存在，如已存在同名组，必须使用<code>-g</code></li><li>选项<code>-d</code>：指定用户HOME路径，不指定，HOME默认在：<code>/home/用户名</code></li></ul></li><li>删除用户：<code>userdel [-r] 用户名</code><ul><li>选项<code>-r</code>：删除用户的HOME目录，不使用<code>-r</code>，删除用户时，HOME目录保留</li></ul></li><li>查看用户所属组（无需root权限）：<code>id [用户名]</code>。<ul><li>参数：用户名，被查看的用户，如果不提供则查看自身</li></ul></li><li>修改用户所属组：<code>usermod -aG 用户组 用户名</code>，将指定用户加入指定用户组。因为Linux支持用户加入多个用户组，因此该用户依然存在于原用户组</li></ul><h4 id="getent命令"><a class="markdownIt-Anchor" href="#getent命令"></a> getent命令</h4><p>使用<code>getent</code>命令，可以查看当前系统中有哪些用户</p><p>语法：<code>getent passwd</code>。这里前边读作 get + ent</p><p>得到的用户信息，按行排列，每行代表：</p><p><code>用户名:密码(以x代替，不会真的显示):用户ID:组ID:描述信息(无用):HOME目录:执行终端(默认bash)</code></p><p>使用<code>getent</code>命令，同样可以查看当前系统中有哪些组。</p><p>语法：<code>getent group</code></p><p>展示的信息，每行表示：</p><p><code>组名称:组认证(显示为x):组ID</code></p><h3 id="查看权限控制"><a class="markdownIt-Anchor" href="#查看权限控制"></a> 查看权限控制</h3><h4 id="认知权限信息"><a class="markdownIt-Anchor" href="#认知权限信息"></a> 认知权限信息</h4><p>通过<code>ls -l</code>可以以列表形式查看内容，并显示权限细节</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309072200434.png" alt="image-20230907220008303" /></p><ul><li>序号1，表示文件、文件夹的权限控制信息</li><li>序号2，表示文件、文件夹所属用户</li><li>序号3，表示文件、文件夹所属用户组</li></ul><p>我们来分析一下序号1，权限细节</p><p>权限细节总共分为10个槽位</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309072202503.png" alt="image-20230907220213453" /></p><p>举例：<code>drwxr-xr-x</code>，表示</p><ul><li>这是一个文件夹，首字母d表示</li><li>所属用户的权限是：有r有w有x，和起来是rwx</li><li>所属用户组的权限是：有r无w有x，r-x(-表示无此权限)</li><li>其它用户的权限是：有r无w有x，r-x</li></ul><h5 id="rwx"><a class="markdownIt-Anchor" href="#rwx"></a> rwx</h5><p>那么rwx到底代表什么呢？</p><ul><li>r表示读权限</li><li>w表示写权限</li><li>x表示执行权限</li></ul><p>针对文件、文件夹的不同，rwx的含义有细微差别</p><ul><li>r，针对文件可以查看文件内容；针对文件夹，可以查看文件夹内容。如：<code>ls</code>命令</li><li>w，针对文件表示可以修改文件；针对文件夹，可以在文件夹内，创建、删除、改名等操作</li><li>x，针对文件表示可以将文件作为程序执行；针对文件夹，表示可以更改工作目录到此文件夹，即<code>cd</code>进入</li></ul><h3 id="修改权限控制"><a class="markdownIt-Anchor" href="#修改权限控制"></a> 修改权限控制</h3><h4 id="chmod命令"><a class="markdownIt-Anchor" href="#chmod命令"></a> chmod命令</h4><p>我们可以使用<code>chmod</code>命令，修改文件、文件夹的权限信息</p><p><strong>注意，只有文件、文件夹的所属用户或root用户可以修改</strong></p><p>语法：<code>chmod [-R] 权限 文件或文件夹</code></p><ul><li>选项：<code>-R</code>，对文件夹内的全部内容应用同样的操作</li><li>其中权限的格式为<code>u=rmx,g=rmx,o=rmx</code>，rmx表示具体权限；u表示user，设置用户权限；g表示group，设置用户组权限，o表示other，设置其他用户权限</li></ul><p>示例：</p><ul><li><code>chmod u=rmx,g=rx,o=x hello.txt</code>，将文件权限修改为：<code>rwxr-x--x</code></li><li><code>chmod -R u=rmx,g=rx,o=x test</code>，将文件夹test以及文件夹内全部内容权限设置为：<code>rmxr-m--x</code></li></ul><p>除此之外，还有快捷写法：<code>chmod 751 hello.txt</code>。将hello.txt的权限修改为751。那么751是个什么意思呢？</p><h5 id="权限的数字序号"><a class="markdownIt-Anchor" href="#权限的数字序号"></a> 权限的数字序号</h5><p>权限可以用3位数字来代替，第一位数字表示用户权限，第二位表示用户组权限，第三位表示其它用户权限。</p><p>数字的细节如下：r记为4，w记为2，x记为1，可以有：</p><ul><li>0：无任何权限，即<code>---</code></li><li>1：仅有x权限，即-<code>-x</code></li><li>2：仅有w权限，即<code>-w-</code></li><li>3：有w和x权限，即<code>-wx</code></li><li>4：仅有r权限，即<code>r--</code></li><li>5：有r和x权限，即<code>r-x</code></li><li>6：有r和w权限，即<code>rw-</code></li><li>7：有全部权限，即<code>rwx</code></li></ul><p>则751表示：<code>rwx(7)r-x(5)--x(1)</code></p><p>这里的4、2、1应该很容易的想到和二进制编码相关，即总共三位二进制编码，哪位为一就拥有哪位代表的控制权。</p><p>因此，从左到右，每位依次代表：r、m、x</p><h4 id="chown命令"><a class="markdownIt-Anchor" href="#chown命令"></a> chown命令</h4><p>使用<code>chown</code>命令，可以修改文件、文件夹的所属用户和用户组</p><p><strong>普通用户无法修改，此命令只能root用户执行</strong></p><p>语法：<code>chown [-R] [用户] [:] [用户组] 文件或文件夹</code></p><ul><li>选项，<code>-R</code>，同<code>chomd</code>命令，对文件夹全部内容应用相同的规则</li><li>选项，用户，修改所属用户</li><li>选项，用户组，修改所属用户组</li><li><code>:</code>，用于分隔用户和用户组</li></ul><p>示例：</p><ul><li><code>chown root hello.txt</code>，将hello.txt所属用户改为root</li><li><code>chown :root hello.txt</code>，将hello.txt所属用户组改为root</li><li><code>chown root:ymxl hello.txt</code>，将hello.txt所属用户改为root，用户组改为ymxl</li><li><code>chown -R root test</code>，将文件夹test的所属用户改为root，并对文件夹内全部内容应用同样的规则</li></ul><h2 id="linux实用操作"><a class="markdownIt-Anchor" href="#linux实用操作"></a> Linux实用操作</h2><h3 id="各类快捷键"><a class="markdownIt-Anchor" href="#各类快捷键"></a> 各类快捷键</h3><h4 id="ctrl-c强制停止"><a class="markdownIt-Anchor" href="#ctrl-c强制停止"></a> <code>ctrl + c</code>强制停止</h4><ul><li>Linux某些程序的运行，如果想要强制停止它，可以使用快捷键<code>ctrl + c</code></li><li>命令输入错误，也可以通过快捷键<code>ctrl + c</code>，退出当前输入，重新输入</li></ul><h4 id="ctrl-d退出或登出"><a class="markdownIt-Anchor" href="#ctrl-d退出或登出"></a> <code>ctrl + d</code>退出或登出</h4><ul><li>可以通过快捷键<code>ctrl + d</code>，退出账户的登录</li><li>或者退出某些特定程序的专属页面</li></ul><p><em>注：不能用于退出 vi / vim</em></p><h4 id="历史搜索命令"><a class="markdownIt-Anchor" href="#历史搜索命令"></a> 历史搜索命令</h4><ul><li><p>可以通过<code>history</code>命令，查看历史输入过的命令</p></li><li><p>可以通过：<code>!</code>命令前缀，自动执行上一次匹配前缀的命令</p></li><li><p>可以通过快捷键<code>ctrl + r</code>，输入内容去匹配历史命令</p></li></ul><p>如果搜索到的内容是你需要的，那么：</p><ul><li>回车键可以直接执行</li><li>键盘左右键，可以得到此命令（不执行）</li></ul><h4 id="光标移动快捷键"><a class="markdownIt-Anchor" href="#光标移动快捷键"></a> 光标移动快捷键</h4><ul><li><code>ctrl + a</code>，跳到命令行开头</li><li><code>ctrl + e</code>，跳到命令行结尾</li><li><code>ctrl + ←</code>，向左跳一个单词</li><li><code>ctrl + →</code>，向右跳一个单词</li></ul><h4 id="清屏"><a class="markdownIt-Anchor" href="#清屏"></a> 清屏</h4><ul><li>通过快捷键<code>ctrl + l</code>，可以清空终端内容</li><li>或者通过<code>clear</code>命令得到同样的效果</li></ul><h3 id="软件安装"><a class="markdownIt-Anchor" href="#软件安装"></a> 软件安装</h3><h4 id="linux系统的应用商店"><a class="markdownIt-Anchor" href="#linux系统的应用商店"></a> Linux系统的应用商店</h4><p>操作系统安装软件右许多种方式，一般分为：</p><ul><li>下载安装包自行安装<ul><li>如win系统使用exe文件、msi文件等</li><li>如mac系统使用dmg文件、pkg文件等</li></ul></li><li>系统的应用商店内安装<ul><li>如win系统有Microsoft Store商店</li><li>如mac系统有AppStore商店</li></ul></li></ul><p>Linux系统同样支持这两种方式，我们首先来学学习使用：Linux命令行内的 “应用商店”，<code>yum</code>命令安装软件</p><p><strong>前面学习的各类Linux命令都是通用的。但是软件安装，CentOS系统和Ubuntu是使用不同的包管理器。</strong></p><p><strong>CentOS系统使用yum管理器，Ubuntu系统使用apt管理器</strong></p><h4 id="yum命令"><a class="markdownIt-Anchor" href="#yum命令"></a> yum命令</h4><p>yum：RPM包软件管理器(Linux系统常见的安装包格式<code>.rpm</code>)，用于自动化安装配置Linux软件，并可以自动解决依赖问题</p><p>语法：<code>yum [-y] [install | remove | search] 软件名称</code></p><ul><li>选项，<code>-y</code>，自动确认，无需手动确认安装或卸载过程</li><li><code>install</code>，安装</li><li><code>remove</code>，卸载</li><li><code>search</code>，搜索</li></ul><p><strong><code>yum</code>命令需要root权限，切换root用户执行或者sudo赋权均可。同时<code>yum</code>需要联网</strong></p><p>示例：</p><ul><li><code>yum -y install wget</code>，通过yum命令安装wget程序</li><li><code>yum -y remove wget</code>，通过yum命令卸载wget程序</li><li><code>yum search wget</code>，通过yum命令，搜索是否有wget安装包</li></ul><h4 id="apt命令"><a class="markdownIt-Anchor" href="#apt命令"></a> apt命令</h4><p>前面学习的WSL环境，我们可以得到Ubuntu运行环境。这里的<code>apt</code>命令适用于Ubuntu。</p><p>Ubuntu的安装包格式为：<code>.deb</code></p><p>语法：<code>apt [-y] [install | remove | search] 软件名称</code></p><p>用法和<code>yum</code>一致，同样需要root权限</p><ul><li><code>apt install wget</code>，安装wget</li><li><code>apt remove wget</code>，卸载wget</li><li><code>apt search wget</code>，搜索wget</li></ul><h3 id="systemctl命令"><a class="markdownIt-Anchor" href="#systemctl命令"></a> systemctl命令</h3><p>Linux系统很多软件（内置或第三方）均支持<code>systemctl</code>命令控制：启动、停止、开机自启</p><p>能够被<code>systemctl</code>管理的软件、一般也称之为：服务</p><p>语法：<code>systemctl start | stop | status | enable | disable 服务名</code></p><p>start：启动；stop：关闭；status：查看状态；enable：开启开机自启；disable：关闭开机自启</p><p>系统内置的服务比较多，比如：</p><ul><li>NetworkManager，主网络服务</li><li>network，副网络服务</li><li>firewalld，防火墙服务</li><li>sshd，ssh服务（FinallShell远程登录Linux使用的就是这个服务）</li></ul><p>除了内置的服务以外，部分第三方软件安装后也可以用<code>systemctl</code>进行控制，一部分软件会自动注册为系统服务，它们可以直接使用<code>systemctl</code>进行控制，如：ntp(注册服务名：ntpd)、httpd(注册服务名：httpd)。也有部分软件安装后没有自动集成到<code>systemctl</code>中，我们可以手动添加。</p><h3 id="ln命令创建软链接"><a class="markdownIt-Anchor" href="#ln命令创建软链接"></a> ln命令创建软链接</h3><p>在系统中创建软链接，可以将文件、文件夹链接到其它位置，类似Windows中的快捷方式</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li><code>-s</code>选项，创建软链接</li><li>参数1，被链接的文件或文件夹</li><li>参数2，要链接去的目的地</li></ul><p>示例：</p><ul><li><p><code>ln -s /etc/yum.conf ~/yum.conf</code></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081408277.png" alt="image-20230908140826171" /></p><p>被链接到的地方，会通过箭头表示源位置。同时开头以<code>l</code>表示这是一个软链接</p></li><li><p><code>ln -s /etc/yum ~/yum</code></p></li></ul><p><strong>删除软件链接 <code>unlink 链接名(即链接的目的地址)</code></strong></p><h3 id="日期和时区"><a class="markdownIt-Anchor" href="#日期和时区"></a> 日期和时区</h3><h4 id="date命令"><a class="markdownIt-Anchor" href="#date命令"></a> date命令</h4><p>通过<code>date</code>命令可以在命令行中查看系统的时间</p><p>语法：<code>data [-d] [+格式化字符串]</code></p><ul><li><p><code>-d</code>按照给定的字符串显示日期，一般用于日期计算</p><ul><li><code>date -d &quot;+1 day&quot; &quot;+%Y-%m-%d&quot;</code>，显示后一天的日期</li><li><code>date -d &quot;-1 day&quot; &quot;+%Y-%m-%d&quot;</code>，显示前一天的日期</li><li><code>date -d &quot;-1 month&quot; &quot;+%Y-%m-%d&quot;</code>，显示上一月的日期</li><li><code>date -d &quot;+1 month&quot; &quot;+%Y-%m-%d&quot;</code>，显示下一月的日期</li><li><code>date -d &quot;-1 year&quot; &quot;+%Y-%m-%d&quot;</code>，显示前一年的日期</li><li><code>date -d &quot;+1 year&quot; &quot;+%Y-%m-%d&quot;</code>，显示后一年的日期</li></ul><p>其中支持的时间标记有：</p><ul><li>year，年</li><li>month，月</li><li>day，日</li><li>hour，小时</li><li>minute，分钟</li><li>second，秒</li></ul><p><code>-d</code>选项可以和格式化字符串一起使用</p></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li><code>%Y</code>，年</li><li><code>%y</code>，年份后两位数字（00~99）</li><li><code>%m</code>，月份（01~12）</li><li><code>%d</code>，日（01~31）</li><li><code>%H</code>，小时（00~23）</li><li><code>%M</code>，分钟（00~59）</li><li><code>%S</code>，秒（00~59）</li><li><code>%s</code>，自1970-01-01 00:00:00 UTC到现在的秒数</li></ul></li><li><p>使用<code>date</code>命令本体，无选项，直接查看时间</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081423219.png" alt="image-20230908142340149" /></p><p>如果对这种默认格式感到不习惯，可以通过格式化字符串自定义显示格式</p><ul><li><p>按照2023-09-07的格式显示日期，<code>date +%Y-%m-%d</code></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081426111.png" alt="image-20230908142613810" /></p></li><li><p>按照2023-09-07 14:27:12 的格式显示日期，<code>date &quot;+%y-%m-%d %H:%M:%S&quot;</code></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081429451.png" alt="image-20230908142942401" /></p><p>如果格式串中有多余的空格请用<code>&quot;&quot;</code>将格式串包围起来，否则就下面这样：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081430607.png" alt="image-20230908143042552" /></p><p>因此建议格式串均用<code>&quot;&quot;</code>包起来，格式串包含<code>+</code>号</p></li></ul></li></ul><h4 id="修改linux时区"><a class="markdownIt-Anchor" href="#修改linux时区"></a> 修改Linux时区</h4><p>初次使用<code>date</code>命令我们会发现，得到的时间是不准确的，这是因为系统默认时区并非中国的东八区</p><p><strong>使用root权限，执行如下命令，修改时区</strong></p><p><code>rm -f /etc/localtime</code></p><p><code>sudo ln -ls /user/share/zoneinfo/Asia/shanghai</code></p><p>将系统自带的<code>localtime</code>文件删除，并将<code>/usr/share/zoneinfo/Asia/Shanghai</code>链接到<code>/etc/localtime</code>去</p><h4 id="ntp程序"><a class="markdownIt-Anchor" href="#ntp程序"></a> ntp程序</h4><p>我们可以通过ntp程序自动校准系统时间</p><p>安装ntp：<code>yum -y install ntp</code></p><p>启动并设置开机自启：</p><ul><li><p><code>systemctl start ntpd</code></p></li><li><p><code>systemctl enable ntpd</code></p></li></ul><p>当ntpd启动后会定期的帮助我们联网校准系统的时间</p><ul><li><p>也可以手动校准（<strong>需要root权限</strong>）：<code>ntpdate -u ntp.aliyun.com</code></p><p>通过阿里云提供的服务网址配合<code>ntpdate</code>（安装ntp后会附带这个命令）命令校准</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081456062.png" alt="image-20230908145656971" /></p></li></ul><h3 id="ip地址和主机名"><a class="markdownIt-Anchor" href="#ip地址和主机名"></a> IP地址和主机名</h3><h4 id="ip地址"><a class="markdownIt-Anchor" href="#ip地址"></a> IP地址</h4><p>每一台联网的电脑都会有一个地址，用于和其它计算机进行通讯</p><p>IP地址主要有2个版本，V4版本和V6版本（V6很少用）</p><p>IPv4版本的地址格式是：<code>a.b.c.d</code>，其中abcd表示0~255的数字，如192.168.88.101就是一个标准的IP地址</p><p>可以通过命令：<code>ifconfig</code>，查看本机的ip地址，如无法使用<code>ifconfig</code>，请安装<code>yum -y install net-tools</code></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081516128.png" alt="image-20230908151601046" /></p><h4 id="特殊的ip地址"><a class="markdownIt-Anchor" href="#特殊的ip地址"></a> 特殊的ip地址</h4><p>除了标准的IP地址以为，还有几个特殊的IP地址需要我们了解：</p><ul><li>127.0.0.1，这个IP地址代指本机</li><li>0.0.0.1，特殊IP地址<ul><li>可以代指本机</li><li>可以在端口绑定中用来确认绑定关系（后续会学习到）</li><li>在一些IP地址限制中，表示所有IP的意思，如放行规则设置为0.0.0.0，表示允许任意IP访问</li></ul></li></ul><h4 id="主机名"><a class="markdownIt-Anchor" href="#主机名"></a> 主机名</h4><p>每一台电脑除了对外联络的地址（IP地址）以外，也可以有一个名字，称之为主机名，无论是Windows或Linux系统，都可以为系统设置主机名。</p><ul><li><p>Windows系统主机名</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081524606.png" alt="image-20230908152412552" /></p></li><li><p>Linux系统主机名</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081522061.png" alt="image-20230908152242995" /></p></li></ul><h5 id="在linux系统中修改主机名"><a class="markdownIt-Anchor" href="#在linux系统中修改主机名"></a> 在Linux系统中修改主机名</h5><ul><li>可以使用命令：<code>hostname</code>查看主机名</li><li>可以使用命令：<code>hostnamectl set-hostname 主机名</code>，修改主机名需要root权限</li><li>修改主机名完成后，重新登录FinallShell即可看到主机名已显示最新修改的主机名</li></ul><h4 id="域名解析"><a class="markdownIt-Anchor" href="#域名解析"></a> 域名解析</h4><p>IP地址实在是难以记忆，那么有没有什么办法可以通过主机名或代替的字符地址去代替数字化的IP地址呢？</p><p>实际上，我们一直都是通过字符化的地址去范围服务器的，很少使用IP地址</p><p>比如，我们在浏览器内打开：<code>www.baidu.com</code>，会打开百度的官网</p><p>其中<code>www.baidu.com</code>，是百度的网址，我们称之为：域名</p><p>那么这是怎么做到的呢，怎么就通过域名得到了IP地址去访问服务器的呢？</p><p>访问<code>www.baidu.com</code>的流程如下：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081535326.png" alt="image-20230908153518244" /></p><p>即：</p><ul><li>先查看本机的记录（私人地址本）<ul><li>Windows看：<code>C:\Windows\System32\drivers\etc\hosts</code></li><li>Linux看：<code>/etc/hosts</code></li></ul></li><li>再联网去DNS服务器（如：114.114.114.114，8.8.8.8等）询问</li></ul><h4 id="配置主机名映射"><a class="markdownIt-Anchor" href="#配置主机名映射"></a> 配置主机名映射</h4><p>比如，我们FinallShell是通过IP地址连接到Linux服务器，那有没有可能通过域名（主机名）连接呢？</p><p>当然可以，我们只需要再Windows系统中的：<code>C:\Windows\Systems32\drivers\etc\hosts</code>文件中配置即可</p><p>添加：<code>IP地址 主机名</code>即可，hosts文件中以<code>#</code>开头的行表示注释，IP地址于主机名之间用空格隔开即可</p><h3 id="虚拟机配置固定ip"><a class="markdownIt-Anchor" href="#虚拟机配置固定ip"></a> 虚拟机配置固定IP</h3><h4 id="为什么需要固定ip"><a class="markdownIt-Anchor" href="#为什么需要固定ip"></a> 为什么需要固定IP</h4><p>当前我们虚拟机的Linux操作系统，其IP地址是通过DHCP服务获取的。</p><p>DHCP：动态获取IP地址，即每次重启设备后都会获取一次，可能导致IP地址频繁变更</p><p>原因1：办公电脑IP地址变化无所谓，但是我们要远程连接到Linux系统，如果IP地址经常变化我们就要频繁修改适配，会很麻烦</p><p>原因2：在刚刚我们配置了虚拟机IP地址和主机名的映射，如果IP频繁更改，我们也需要频繁更新映射关系</p><p>因此，只要IP地址固定下来，就会少去很多麻烦</p><h4 id="在vmware-workstation中配置固定ip"><a class="markdownIt-Anchor" href="#在vmware-workstation中配置固定ip"></a> 在VMware Workstation中配置固定IP</h4><p>配置固定IP需要2个步骤：</p><ol><li><p>在VMware Workstation（或Fusion）中配置IP地址网关和网段（IP地址的范围）</p><p>打开VMware Workstation，一次点击<code>编辑→虚拟网络编辑器→VMnet8→更改设置</code>。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081607072.png" alt="image-20230908160752017" /></p><p>对子网IP修改为：<code>192.168.88.0</code>、子网掩码修改为：<code>255.255.255.0</code>。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081605559.png" alt="image-20230908160530502" /></p><p>然后，点击NAT设置，将网关修改为<code>192.168.88.2</code></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081609937.png" alt="image-20230908160925886" /></p></li><li><p>在Linux系统中手动修改配置文件，固定IP</p><p>使用vim编辑<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code>，填入如下内容：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081623239.png" alt="image-20230908162318216" /></p><p>执行：<code>systemctl restart network</code>，重启网卡，然后我们的IP就固定为<code>192.168.88.128</code>了</p></li></ol><h3 id="网络传输"><a class="markdownIt-Anchor" href="#网络传输"></a> 网络传输</h3><h4 id="下载和网络请求"><a class="markdownIt-Anchor" href="#下载和网络请求"></a> 下载和网络请求</h4><h5 id="ping命令"><a class="markdownIt-Anchor" href="#ping命令"></a> ping命令</h5><p>可以通过<code>ping</code>命令，检查指定网络服务器是否是可联通状态</p><p>语法：<code>ping [-c num] ip或主机名</code></p><ul><li>选项，<code>-c</code>，检查的次数，不使用<code>-c</code>选项，将无限次持续检查</li><li>参数，ip或主机名，被检查的服务器的ip地址或主机名地址</li></ul><p>示例：</p><ul><li><p>检查到<code>baidu.com</code>是否联通</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081632956.png" alt="image-20230908163250878" /></p><p>结果表示联通，延迟20ms左右</p></li><li><p>检查<code>39.156.66.10</code>是否联通，并检查3次</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081633539.png" alt="image-20230908163351468" /></p></li><li><p>ping不通的场景</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081637160.png" alt="image-20230908163733054" /></p></li></ul><h5 id="wget命令"><a class="markdownIt-Anchor" href="#wget命令"></a> wget命令</h5><p>wget是非交互式的文件下载器，可以在命令行内下载网络文件</p><p>语法：<code>wget [-b] url</code></p><ul><li>选项，<code>-b</code>可选，后台下载，会将日志写入到当前工作目录的wget-log文件中</li><li>参数，url，下载连接</li></ul><p>示例：</p><ul><li>下载apache-hadoop 3.3.0版本：<code>wget http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</code></li><li>在后台下载：<code>wget -b http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</code></li><li>通过<code>tail</code>命令可以监控后台下载进度：<code>tail -f wget-log</code></li></ul><p><em>注意：无论下载是否完成，都会生成要下载的文件，如果下载未完成，请及时清除未完成的不可用文件</em></p><h5 id="curl命令"><a class="markdownIt-Anchor" href="#curl命令"></a> curl命令</h5><p><code>curl</code>可以发送http网络请求，可用于：下载文件、获取信息等</p><p>语法：<code>curl [-O] [url]</code>，注意这里的是英文字符大写的'欧'，而不是’零‘</p><ul><li>选项，<code>-O</code>，用于下载文件，当url是下载链接时，可以使用此选项保存文件</li><li>参数，url，要发送请求的网络地址</li></ul><p>示例：</p><ul><li>向cip.cc发送网络请求<code>curl cip.cc</code></li><li>通过curl下载hadoop-3.3.0安装包：<code>curl -O http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</code></li></ul><h4 id="端口"><a class="markdownIt-Anchor" href="#端口"></a> 端口</h4><p>端口，是设备与外界通讯的出入口。端口可以分为：物理端口和虚拟端口两类</p><ul><li><p>物理端口：又可称之为接口，是可见的端口，如USB接口，RJ45网口，HDMI端口等</p></li><li><p>虚拟端口：是指计算机内部的端口，是不可见的，是用来操作系统和外部进行交互使用的</p><p>计算机程序之间的通讯，通过IP只能锁定计算机，但是无法锁定具体程序</p></li></ul><p>通过端口可以锁定计算机上的具体程序，确保程序之间进行沟通</p><p>Linux系统可以支持65535个端口，这六万多个端口分为3类进行使用：</p><ul><li>公认端口：1~1023，通常用于一些系统内置或知名程序的预留使用，如SSH服务的22端口，HTTPS服务的443端口。非特殊需要，不要占用这个范围的端口</li><li>注册端口：1024~49151，通常可以随意使用，用于松散的绑定一些程序\服务</li><li>动态端口：49152~65535，通常不会固定绑定程序，而是当程序对外进行网络链接时，用于临时使用。</li></ul><p>我们使用的FinallShell就是使用SSH服务（22端口）进行远程连接的</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081736709.png" alt="image-20230908173557555" /></p><h5 id="查看端口占用"><a class="markdownIt-Anchor" href="#查看端口占用"></a> 查看端口占用</h5><h6 id="nmap命令"><a class="markdownIt-Anchor" href="#nmap命令"></a> nmap命令</h6><p>可以通过Linux命令去查看端口的占用情况</p><ul><li><p>使用<code>nmap</code>命令；需要先安装namp：<code>yum -y install nmap</code></p><p>语法：<code>nmap 被查看的IP地址</code></p></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081743003.png" alt="image-20230908174337912" /></p><p>可以看到本机（127.0.0.1）上有4个端口被程序占用了。</p><p>其中：</p><ul><li>22端口，即为SSH服务所使用</li></ul><h6 id="netstat命令"><a class="markdownIt-Anchor" href="#netstat命令"></a> netstat命令</h6><ul><li>可以通过netstat命令，查看指定端口的占用情况</li></ul><p>语法： <code>netstat -anp|grep 端口号</code>，需要安装netstat：<code>yum -y install net-tools</code></p><p>可以看到端口631被程序（进程号1075）占用了</p><p>其中，127.0.0.1:631表示端口绑定在IP：127.0.0.1上</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081759708.png" alt="image-20230908175210223" /></p><p>而3306端口则没有被使用</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081750743.png" alt="image-20230908175022696" /></p><h3 id="进程管理"><a class="markdownIt-Anchor" href="#进程管理"></a> 进程管理</h3><h4 id="进程"><a class="markdownIt-Anchor" href="#进程"></a> 进程</h4><p>程序运行在操作系统中，是被操作系统所管理的</p><p>为管理运行的程序，每一个程序在运行的时候，便被操作系统注册成为一个<strong>进程</strong></p><p>并为每一个进程都分配一个独有的<strong>进程ID（进程号）</strong></p><h4 id="查看进程"><a class="markdownIt-Anchor" href="#查看进程"></a> 查看进程</h4><p>可以通过<code>ps</code>命令查看Linux系统中的进程信息</p><p>语法：<code>ps [-e -f]</code></p><ul><li><p>选项：<code>-e</code>，显示全部进程</p></li><li><p>选项：<code>-f</code>，以完全格式化的形式展示信息（展示全部信息）</p></li><li><p>一般来说，固定用法就是：<code>ps -ef</code>列出 全部进程的全部信息</p></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081947541.png" alt="image-20230908194707369" /></p><p>表头信息，从左到右分别是：</p><ul><li>UID：进程所属的用户ID</li><li>PID：进程的进程ID</li><li>PPID：进程的父ID（启动此进程的其它进程）</li><li>C：此进程的CPU占用率（百分比）</li><li>STME：进程的启动时间</li><li>TTY：启动进程的终端序号，如显示？，表示非终端启动</li><li>TIME：进程占用CPU的时间</li><li>CMD：进程对应的名称或启动路径或启动命令</li></ul><h5 id="查看指定进程"><a class="markdownIt-Anchor" href="#查看指定进程"></a> 查看指定进程</h5><ul><li>在FinallShell中，执行命令：<code>tail</code>，可以看到此命令一直阻塞在那里</li><li>在FinallShell中，复制一个标签页，执行：<code>ps -ef</code>找出<code>tail</code>这个程序的进程信息</li><li>问题：是否会发现，列而出的信息太多，无法准确的找到或很麻烦怎么办？</li></ul><p>我们可以使用管道符配合<code>grep</code>命令进行过滤，如：</p><p><code>ps -ef | grep tail</code>，即可准确的找到<code>tail</code>命令的信息</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309081957991.png" alt="image-20230908195712914" /></p><ul><li>过滤不仅仅过滤名称，进程号，用户ID等等，都可以被<code>grep</code>过滤</li><li>如：<code>ps -ef | grep 30001</code>，过滤带有关键字<code>30001</code>的进程信息（一般指代30001进程号）</li></ul><h4 id="关闭进程"><a class="markdownIt-Anchor" href="#关闭进程"></a> 关闭进程</h4><p>在Windows系统中，可以通过任务管理器选择进程后，点击结束进程从而关闭它</p><p>同样，在Linux中，可以通过<code>kill</code>命令关闭进程</p><p>语法：<code>kill [-9] 进程ID</code></p><ul><li>选项，<code>-9</code>，表示强制关闭进程。不使用此选项会向进程发送信号要求其关闭，按是否关闭看进程自身的处理机制</li></ul><p>比如：</p><ul><li><code>kill tail</code>，则显示：</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082004968.png" alt="image-20230908200448919" /></p><ul><li><code>kill -9 tail</code>，则显示：</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082006239.png" alt="image-20230908200623188" /></p><h3 id="主机状态"><a class="markdownIt-Anchor" href="#主机状态"></a> 主机状态</h3><h4 id="查看系统资源占用"><a class="markdownIt-Anchor" href="#查看系统资源占用"></a> 查看系统资源占用</h4><p>可以通过<code>top</code>命令查看CPU、内存使用情况，类似Windows的任务管理器，默认<strong>5秒刷新</strong>一次</p><p>语法：<code>top</code>。</p><p>按<code>q</code>或者<code>ctrl + c</code>退出</p><h4 id="top命令详解"><a class="markdownIt-Anchor" href="#top命令详解"></a> top命令详解</h4><p>执行<code>top</code>命令后，会首先出现下面的内容，它们是什么呢？</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082013164.png" alt="image-20230908201317089" /></p><ul><li><p>第一行：<img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082016216.png" alt="image-20230908201644156" /></p><p><code>top</code>：命令名称；<code>20:10:17</code>：当前系统时间；<code>up 32 min</code>：启动了32分钟；<code>3 users</code>：3个用户登录；<code>load</code>：1、5、15负责</p></li><li><p>第二行：<img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082017847.png" alt="image-20230908201703803" /></p><p><code>Tasks</code>：208个进程；<code>2 running</code>：2个进程在运行；<code>174 sleeping</code>：174进程睡眠；<code>0stop</code> ：0个停止进程；<code>0zombie</code>：0个僵尸进程</p></li><li><p>第三行：<img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082020987.png" alt="image-20230908202018940" /></p><p><code>%Cpu(s)</code>：CPU使用率；<code>us</code>：用户CPU使用率；<code>sy</code>：系统CPU使用率；<code>ni</code>：高优先级进程占用CPU时间百分比；<code>id</code>：空闲CPU率<code>wa</code>：IO等待CPU占用率；<code>hi</code>：CPU硬件中断率；<code>si</code>：CPU软件中断率；<code>st</code>：强制等待占用CPU率</p></li><li><p>第四、五行：<img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082024541.png" alt="image-20230908202431463" /></p><p><code>KiB Mem</code>：物理内存；<code>total</code>：总量；<code>free</code>：空闲；<code>used</code>：使用；<code>buff/cache</code>：buff和cache占用</p><p><code>KiB Swap</code>：虚拟内存（交换空间）；<code>total</code>：总量；<code>free</code>：空闲；<code>used</code>：使用；<code>buff/cache</code>：buff和cache占用</p></li></ul><p>接着是下面的信息：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082032973.png" alt="image-20230908203207862" /></p><ul><li><code>PID</code>：进程ID</li><li><code>USER</code>：进程所属用户</li><li><code>PR</code>：进程优先级</li><li><code>NI</code>：负值表示高优先级，正表示低优先级</li><li><code>VIRT</code>：进程使用的虚拟的内存，单位KB</li><li><code>RES</code>：进程使用的物理内存，单位KB</li><li><code>SHR</code>：进程使用的共享内存，单位KB</li><li><code>S</code>：进程状态（S休眠、R运行、Z僵尸、N负数优先级、I空闲状态）</li><li><code>%CPU</code>：进程占用CPU率</li><li><code>%MEM</code>：进程占用内存率</li><li><code>TIME+</code>：进程使用CPU时间总计</li><li><code>COMMAND</code>：进程的启动命令或名称或程序文件路径</li></ul><h4 id="top命令选项"><a class="markdownIt-Anchor" href="#top命令选项"></a> top命令选项</h4><p>top命令也支持选项</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td><code>-p</code></td><td>只显示某个进程的信息</td></tr><tr><td><code>-d</code></td><td>设置刷新时间，默认是5s</td></tr><tr><td><code>-c</code></td><td>显示产生进程的完成命令，默认是路径</td></tr><tr><td><code>-n</code></td><td>指定刷新次数，比如：<code>top -n 3</code>，刷新3次后退出</td></tr><tr><td><code>-b</code></td><td>以非交互非全屏模式运行，以批次的的方式执行top，一般配合<code>-n</code>指定输出几次统计信息，将输出重定向到指定文件，比如：<code>top -b -n 3 &gt; /tmp/top.tmp</code></td></tr><tr><td><code>-i</code></td><td>不显示任何闲置（idle）或无用（zombie）的进程</td></tr><tr><td><code>-u</code></td><td>查找特定用户启动的进程</td></tr></tbody></table><p>上边的选中一部分，需要隔一个空格接参数信息。具体根据选项来配合即可。比如：<code>-u</code>需要用户名参数；<code>-i</code>则无需参数</p><h4 id="top命令交互式选项"><a class="markdownIt-Anchor" href="#top命令交互式选项"></a> top命令交互式选项</h4><p>当top以交互式运行（非<code>-b</code>选项启动）</p><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>h键</td><td>按下，会显示帮助画面</td></tr><tr><td>c键</td><td>按下，会显示产生进程的完整命令，等同于<code>-c</code>选项，再次按下，变为默认显示</td></tr><tr><td>f键</td><td>按下，可以选择需要展示的项目</td></tr><tr><td>M键</td><td>按下，根据驻留内存大小（RES）排序</td></tr><tr><td>P键</td><td>按下，根据CPU使用百分比大小排序</td></tr><tr><td>T键</td><td>按下，根据时间/累计时间排序</td></tr><tr><td>E键</td><td>按下，切换顶部内存显示单位</td></tr><tr><td>e键</td><td>按下，切换进程内存显示单位</td></tr><tr><td>l键</td><td>按下，切换显示平均负载和启动时间信息</td></tr><tr><td>i键</td><td>按下，不显示闲置或无用的进程，等同于<code>-i</code>选项，再次按下，变为默认显示</td></tr><tr><td>t键</td><td>按下，切换显示CPU状态信息</td></tr><tr><td>m键</td><td>按下，切换显示内存信息</td></tr></tbody></table><h4 id="磁盘信息监控"><a class="markdownIt-Anchor" href="#磁盘信息监控"></a> 磁盘信息监控</h4><p>使用<code>df</code>命令，可以查看磁盘的使用情况</p><p>语法：<code>df [-h]</code></p><ul><li>选项，<code>-h</code>，以更加人性化的单位显示</li></ul><p>使用<code>iostat</code>查看CPU、磁盘的相关信息</p><p>语法：<code>iostat [-x] [num1] [num2]</code></p><ul><li>选项，<code>-x</code>，显示更多信息</li><li><code>num1</code>：数字，刷新间隔；<code>num2</code>：数字，刷新次数</li></ul><p><em>tips:该设备每秒的传输次数（Indicate the number of transfers per second that were is issued to the device.）。“一次传输”意思是“一次I/O请求”。多个逻辑请求可能会被合并成“一次I/O请求”。“一次传输”请求的大小是未知的</em></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082116841.png" alt="image-20230908211649708" /></p><p>一般我们只关心图中标红的那几项指标就行了</p><h4 id="网络状态监控"><a class="markdownIt-Anchor" href="#网络状态监控"></a> 网络状态监控</h4><p>使用<code>sar</code>命令查看网络的相关统计（<code>sar</code>命令非常复杂，这里仅简单用于统计网络）</p><p>语法：<code>sar -n DEV num1 num2</code></p><ul><li>选项，<code>-n</code>，查看网络；<code>DEV</code>，表示查看网络接口</li><li><code>num1</code>，刷新间隔（不填就查看一次结束）；<code>num2</code>，查看次数（不填则是无限次数）</li></ul><h3 id="环境变量"><a class="markdownIt-Anchor" href="#环境变量"></a> 环境变量</h3><p><em>在学习<code>which</code>命令时，我们知道使用的一系列命令其本质上是一个个可执行程序</em></p><p><em>比如：<code>cd</code>命令的本体就是<code>/usr/bin/cd</code>这个程序文件</em></p><p><em>那么，为什么无论当前工作目录在哪里，都可以执行<code>/usr/bin/cd</code>这个程序呢</em></p><p><em>这就是环境变量在起作用</em></p><p>环境变量是操作系统（Windows、Linux、MacOS）在运行的时候，记录的一些关键性信息，用于辅助系统的运行</p><p>在Linux系统中执行<code>env</code>命令即可查看当前系统中记录的环境变量</p><p>环境变量是一种Key Value型结构，即名称和值。</p><h4 id="环境变量path"><a class="markdownIt-Anchor" href="#环境变量path"></a> 环境变量：PATH</h4><p>在前面提出的问题中，我们说无论当前工作目录是什么，都能执行<code>/usr/bin/cd</code>这个程序，这个就是借助环境变量中PATH这个项目的值来做到的。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082135582.png" alt="image-20230908213502516" /></p><p>PATH记录了系统执行任何命令的搜索路径，如上图记录了（路径之间以<code>:</code>隔开）：</p><ul><li><code>/usr/local/bin</code></li><li><code>/usr/bin</code></li><li><code>/usr/local/sbin</code></li><li><code>/usr/sbin</code></li><li><code>/home/ymxl/.local/bin</code></li><li><code>/home/ymxl/bin</code></li></ul><p>当执行任何命令，都会按照顺序，从上述路径中搜索要执行的程序的本体</p><p>比如执行<code>cd</code>命令，就从第二个目录<code>/usr/bin</code>中搜索到了<code>cd</code>命令，并执行</p><h4 id="符号"><a class="markdownIt-Anchor" href="#符号"></a> $符号</h4><p>在Linux系统中，<code>$</code>符号被用于取&quot;变量&quot;的值</p><p>环境变量记录的信息，除了给操作系统自己使用外，如果我们想要取用，也可以使用</p><p>就可以通过语法：<code>$环境变量名</code>，来取得环境变量的值</p><p>比如：<code>echo $PATH</code></p><p>就可以取得PATH这个环境变量的值，并通过<code>echo</code>语句输出出来</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082149412.png" alt="image-20230908214952336" /></p><p>又或者<code>echo $&#123;PATH&#125;ABC</code>当和其它内容混合在一起时，可以通过<code>&#123;&#125;来标注取的变量是谁</code></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082151028.png" alt="image-20230908215143967" /></p><h4 id="自行设置环境变量"><a class="markdownIt-Anchor" href="#自行设置环境变量"></a> 自行设置环境变量</h4><p>Linux环境变量可以用户自行设置，其中分为：</p><ul><li><p>临时设置，语法：<code>export 变量名=变量值</code></p></li><li><p>永久生效</p><ul><li><p>针对当前用户生效，配置在当前用户的：<code>~/.bashrc</code>文件中，用<code>vi</code>编辑器打开，在文件末添加和临时设置一样的语句即可</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082201586.png" alt="image-20230908220124440" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082202767.png" alt="image-20230908220212695" /></p></li><li><p>针对所有用户生效，配置在系统的：<code>/etc/profile</code>文件中，需要root权限去配置。配置步骤同上</p></li><li><p>并通过语法：<code>source 配置文件</code>，进行立刻生效，或重新登录后生效</p></li></ul></li></ul><h4 id="自定义环境变量path"><a class="markdownIt-Anchor" href="#自定义环境变量path"></a> 自定义环境变量PATH</h4><p>环境变量PATH这个项目里面记录了系统执行命令的搜索路径。</p><p>这些搜索路径我们也可以自行添加到PATH中去。</p><p>测试：</p><ul><li>在当前HOME目录内创建文件夹，<code>myenv</code>，在文件夹内创建文件<code>mkhaha</code></li><li>通过<code>vim</code>编辑器，在<code>mkhaha</code>文件内填入：<code>echo “哈哈哈哈”</code></li></ul><p>完成上述操作后，随意切换工作目录，执行<code>mkhaha</code>命令尝试以下，会发现无法执行</p><ul><li>修改PATH的值</li></ul><p>临时修改PATH：<code>export PATH=$PATH:/home/ymxl/myenv</code>，再次执行<code>mkhaha</code>，无论在哪里都能执行了</p><p>或将<code>export PATH=$PATH:/home/ymxl/myenv</code>填入环境变量文件或系统环境变量文件中去</p><p>这样就可以在任何目录执行<code>mkhaha</code>了</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309082223248.png" alt="image-20230908222300145" /></p><h3 id="上传-下载"><a class="markdownIt-Anchor" href="#上传-下载"></a> 上传、下载</h3><p>我们可以通过FinallShell工具，方便的和虚拟机进行数据交换</p><p>在FinallShell软件的下方窗体中，提供了Linux的文件系统视图，可以方便的：</p><ul><li>浏览文件系统，找到合适的文件，右键点击下载，即可传输到本地电脑</li><li>浏览文件系统，找到合适的目录，将本地电脑的文件拓展进入，即可方便的上传数据到Linux中</li></ul><h4 id="rz-sz命令"><a class="markdownIt-Anchor" href="#rz-sz命令"></a> rz、sz命令</h4><p>当然，除了通过FinallShell提供图形界面进行文件传输外，也可以通过<code>rz</code>、<code>sz</code>命令进行文件传输</p><p><code>rz</code>、<code>sz</code>命令需要安装：<code>yum -y install lrzsz</code>，即可安装</p><ul><li><code>rz</code>命令，进行上传，语法：直接输入<code>rz</code>即可，FinallShell会打开一个文件系统的窗口让你选择需要上传的文件，文件会上传到当前工作目录</li><li><code>sz</code>命令，进行下载，<code>sz 要下载的文件</code>，文件会自动下载到桌面的：<code>fsdowbload</code>文件夹中</li></ul><h3 id="压缩和解压"><a class="markdownIt-Anchor" href="#压缩和解压"></a> 压缩和解压</h3><h4 id="压缩格式"><a class="markdownIt-Anchor" href="#压缩格式"></a> 压缩格式</h4><p>市面上有非常多的压缩格式</p><ul><li><code>zip</code>格式：Linux、Windows、MacOs，常用</li><li><code>7zip</code>格式：Windows系统常用</li><li><code>rar</code>格式：Windows系统常用</li><li><code>tar</code>格式：Linux、MacOS系统常用</li><li><code>gzip</code>格式：Linux、MacOS常用</li></ul><p>在Windows系统中常用软件如：winrar、bandzip等软件，都支持各类常见的压缩格式，这里不多做讨论。</p><p>我们现在要学习，如何在Linux系统中操作：tar、gzip、zip者三种格式</p><p>完成文件的压缩、解压操作</p><h4 id="tar命令"><a class="markdownIt-Anchor" href="#tar命令"></a> tar命令</h4><p>Linux和Mac系统中常用的2中压缩格式，后缀名分别是：</p><ul><li><code>.tar</code>，称之为tarball，归档文件，即简单的将文件组装到一个<code>.tar</code>的文件内，并没有太多文件体积的减少，仅仅是简单的封装</li><li><code>.gz</code>，也常见为<code>.tar.gz</code>，gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积</li></ul><p>针对这两种格式，使用<code>tar</code>命令均可以进行压缩和解压的操作</p><p>语法：<code>tar [-c -v -x -f -z -C] 参数1 参数2 ... 参数n</code></p><ul><li><code>-c</code>，创建压缩文件，用于压缩模式</li><li><code>-v</code>，显示压缩，解压过程，用于查看进度</li><li><code>-x</code>，解压模式</li><li><code>-f</code>，要创建的文件，或要解压的文件，<code>-f</code>选项必须在所有选项中位置处于最后一个</li><li><code>-z</code>，gzip模式，不适用<code>-z</code>就是普通的tarball格式</li><li><code>-C</code>，选择解压的目的地，用于解压模式</li></ul><h5 id="tar命令压缩"><a class="markdownIt-Anchor" href="#tar命令压缩"></a> tar命令压缩</h5><p>tar的常用组合为：</p><ul><li><p><code>tar -cvf test.tar 1.txt 2.txt 3.txt</code></p><p>将文件<code>1.txt、2.txt、3.txt</code>压缩到<code>test.tar</code>文件内，并显示压缩进度</p></li><li><p><code>tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</code></p><p>将文件<code>1.txt、2.txt、3.txt</code>压缩到<code>test.tar</code>文件内，使用gzip模式，并显示压缩进度</p></li></ul><p><em>注意：</em></p><ul><li><em><code>-z</code>选项如果使用的话，一般处于选项组合的第一个</em></li><li><em><code>-f</code>选项，<strong>必须</strong>在选项组合的最后一个</em></li></ul><h5 id="tar"><a class="markdownIt-Anchor" href="#tar"></a> tar</h5><p>常见的<code>tar</code>解压组合有</p><ul><li><code>tar -xvf test.tar</code>，解压<code>test.tar</code>到当前工作目录</li><li><code>tar -xvf test.tar -C /home/ymxl</code>，解压<code>test.tar</code>到指定目录<code>/home/ymxl</code></li><li><code>tar -zxvf test.tar.gz -C /home/ymxl</code>，以gzip模式解压<code>test.tar.gz</code>到指定目录<code>/home/ymxl</code></li></ul><p><em>注意：</em></p><ul><li><em><code>-f</code>选项，必须在选项组合最后一个</em></li><li><em><code>-z</code>选项，建议在选项组合第一个</em></li><li><em><code>-C</code>选项单独使用，和解压所需的其它参数分开</em></li></ul><h4 id="zip"><a class="markdownIt-Anchor" href="#zip"></a> zip</h4><h5 id="zip压缩文件"><a class="markdownIt-Anchor" href="#zip压缩文件"></a> zip压缩文件</h5><p>可以使用<code>zip</code>命令，压缩文件为zip压缩包</p><p>语法：<code>zip [-r] 压缩文件名 参数1 参数2 ... 参数n</code></p><ul><li><code>-r</code>，被压缩的包含文件夹的时候，需要使用<code>-r</code>选项，和<code>rm 、 cp</code>等命令的<code>-r</code>效果一样</li><li><code>压缩文件名</code>，顾名思义</li><li><code>参数1 参数2 ... 参数n</code>，待压缩的文件或文件夹</li></ul><p>示例：</p><ul><li><code>zip test.zip a.txt b.txt c.txt</code>，将文件<code>a.txt、b.txt、c.txt</code>压缩到<code>test.zip</code>文件内</li><li><code>zip -r test.zip test1 test2 c.txt</code>，将文件夹<code>test1、test2</code>和文件<code>c.txt</code>压缩到<code>test.zip</code>文件内</li></ul><h5 id="unzip解压文件"><a class="markdownIt-Anchor" href="#unzip解压文件"></a> unzip解压文件</h5><p>使用<code>unzip</code>命令，可以方便的解压zip压缩包</p><p>语法：<code>unzip [-d] 参数</code></p><ul><li><code>-d</code>，指定要解压去的位置，同<code>tar</code>的<code>-C</code>选项</li><li>参数，被解压的zip压缩包文件</li></ul><p>示例：</p><ul><li><code>unzip test.zip</code>，将<code>test.zip</code>解压到当前目录</li><li><code>unzip test.zip -d /home/ymxl</code>，将<code>test.zip</code>解压到指定目录<code>/home/ymxl</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus</title>
    <link href="/2023/09/04/MyBatis-Plus/"/>
    <url>/2023/09/04/MyBatis-Plus/</url>
    
    <content type="html"><![CDATA[<h1 id="mybatis-plus"><a class="markdownIt-Anchor" href="#mybatis-plus"></a> MyBatis-Plus</h1><p><em>注意这里使用的版本一定要和springboot版本适配，否则会出一些离谱的错误</em></p><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><ul><li><p>Mybatis-Plus（简称MP）是基于MyBatis框架基础上开发的增强型工具，旨在简化开发、提高效率</p></li><li><p>官网<a href="https://mybatis.plus/">MyBatis-Plus</a></p></li><li><p>依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ul><h3 id="入门案例"><a class="markdownIt-Anchor" href="#入门案例"></a> 入门案例</h3><ul><li><p>SpringBoot整合MyBatis开发过程</p><ul><li>创建SpringBoot工程</li><li>勾选配置使用的技术</li><li>设置dataSource相关属性（JDBC参数）</li><li>定义数据层接口映射配置</li></ul></li><li><p>让dao层继承<code>BaseMapper</code>类并需要传入一个泛型，泛型为你的实体类就可以。然后啥也不用写，一些简单的CRUD它就已经为我们封装好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisApplicationTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectAll</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; users = userDao.selectList(<span class="hljs-literal">null</span>);<br>        System.out.println(users);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就可以直接测试一下了。</p></li></ul><h3 id="mybatis-plus特性"><a class="markdownIt-Anchor" href="#mybatis-plus特性"></a> Mybatis-Plus特性</h3><ul><li>无侵入：只做增强不做改变，不会对现有工程产生影响</li><li>强大的CRUD操作：内置通过Mapper，少量配置即可是实现单表CRUD操作</li><li>支持Lambda:编写查询条件无需担心字段写错</li><li>支持主键自动生成</li><li>内置分页插件</li><li>......</li></ul><h2 id="标准的crud"><a class="markdownIt-Anchor" href="#标准的crud"></a> 标准的CRUD</h2><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309032120900.png" alt="image-20230903212001786" /></p><h2 id="lombok"><a class="markdownIt-Anchor" href="#lombok"></a> Lombok</h2><ul><li>lombok，一个JAVA类库，提供了一组注解，简化POJO实体类开发</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309032200098.png" alt="image-20230903220016034" /></p><h2 id="标准分页功能制作"><a class="markdownIt-Anchor" href="#标准分页功能制作"></a> 标准分页功能制作</h2><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309041936827.png" alt="image-20230904193601751" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309041946365.png" alt="image-20230904194652299" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309041947631.png" alt="image-20230904194715576" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309041947299.png" alt="image-20230904194728262" /></p><h2 id="dql编程控制"><a class="markdownIt-Anchor" href="#dql编程控制"></a> DQL编程控制</h2><h3 id="条件查询控制"><a class="markdownIt-Anchor" href="#条件查询控制"></a> 条件查询控制</h3><ul><li><p>方式一：按条件查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">qw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();<br>qw.lt(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">18</span>);<span class="hljs-comment">//查询年龄字段小于18的数据</span><br>List&lt;User&gt; list = userDao.selectList(qw);<br></code></pre></td></tr></table></figure></li><li><p>方式二：lambda格式按条件查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">QueryWrapper&lt;User&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;();<br>qw.lambda().lt(User::getId,<span class="hljs-number">10</span>);<span class="hljs-comment">//查询id字段小于10的数据</span><br>List&lt;User&gt; users = userDao.selectList(qw);<br></code></pre></td></tr></table></figure></li><li><p>方式三：lambda格式按条件查询（用LambdaQueryWrapper接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">LambdaQueryWrapper&lt;User&gt; lqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;User&gt;();<br>lqw.lt(User::getId,<span class="hljs-number">10</span>);<span class="hljs-comment">//查询id字段小于10的数据</span><br>List&lt;User&gt; users = userDao.selectList(lqw);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042024843.png" alt="image-20230904202422770" /></p></li></ul><h4 id="null值处理"><a class="markdownIt-Anchor" href="#null值处理"></a> null值处理</h4><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042029448.png" alt="image-20230904202939375" /></p><h3 id="查询投影"><a class="markdownIt-Anchor" href="#查询投影"></a> 查询投影</h3><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042033737.png" alt="image-20230904203322671" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042034902.png" alt="image-20230904203418865" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042039846.png" alt="image-20230904203906745" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042039183.png" alt="image-20230904203917115" /></p><ul><li>更多查询条件设置参看<a href="https://baomidou.com/pages/10c804/#alleq">https://baomidou.com/pages/10c804/#alleq</a></li></ul><h3 id="字段映射与表明映射"><a class="markdownIt-Anchor" href="#字段映射与表明映射"></a> 字段映射与表明映射</h3><ul><li><p>问题一：表字段与编码属性设计不同步<img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042044321.png" alt="image-20230904204448273" /></p><ul><li><p>解决方案</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042045926.png" alt="image-20230904204535874" /></p></li></ul></li><li><p>问题二：编码中添加了数据库中未定义的属性</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042046672.png" alt="image-20230904204624617" /></p><ul><li><p>解决方案</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042046380.png" alt="image-20230904204653319" /></p></li></ul></li><li><p>问题三：采用的默认查询开放更多字段的查看权限<img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042048268.png" alt="image-20230904204808302" /></p><ul><li><p>解决方案</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042048377.png" alt="image-20230904204859319" /></p></li></ul></li><li><p>问题四： 表名与编码开发设计不同步<img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042050238.png" alt="image-20230904205019180" /></p><ul><li>解决方案<img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042050085.png" alt="image-20230904205042035" /></li></ul></li></ul><h2 id="dml编程控制"><a class="markdownIt-Anchor" href="#dml编程控制"></a> DML编程控制</h2><h3 id="insert"><a class="markdownIt-Anchor" href="#insert"></a> Insert</h3><ul><li>调用类似<code>xxxDao.insert()</code>的方法即可</li></ul><h4 id="id生成策略控制"><a class="markdownIt-Anchor" href="#id生成策略控制"></a> ID生成策略控制、</h4><ul><li>不同的表应用不同id生成策略<ul><li>日志：自增（1，2，3，4，......）</li><li>购物订单：特殊规则（FQ8908AK7988）</li><li>外卖单：关联地区日期等信息（10 04 20230904 34 91）</li><li>关系表：可省略id</li><li>......</li></ul></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042125679.png" alt="image-20230904212541620" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042129938.png" alt="image-20230904212903895" /></p><h5 id="全局配置"><a class="markdownIt-Anchor" href="#全局配置"></a> 全局配置</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">assign_id</span> <span class="hljs-comment"># 当前所有id生成策略为assign_id</span><br>      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">tb_</span> <span class="hljs-comment"># 当前项目所有数据库表均为 这个前缀+实体类名</span><br></code></pre></td></tr></table></figure><h3 id="delete"><a class="markdownIt-Anchor" href="#delete"></a> Delete</h3><ul><li><p>多数据删除</p><ul><li>比如：根据一组id删除，调用<code>deleteBatchIds()</code>方法即可，需要传入一个集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-number">1</span>);<br>list.add(<span class="hljs-number">2</span>);<br>userDao.deleteBatchIds(list);<br></code></pre></td></tr></table></figure></li></ul><p>同理，也有根据一组id查询的<code>selectBatchIds()</code></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042143449.png" alt="image-20230904214353375" /></p><h4 id="逻辑删除"><a class="markdownIt-Anchor" href="#逻辑删除"></a> 逻辑删除</h4><ul><li><p>删除操作业务问题：业务数据从数据库中丢弃</p></li><li><p>逻辑删除：为数据设置是否可用状态字段，删除时设置字段 为不可用状态，数据保留在数据库中</p></li><li><p>Mp中<code>@TableLogic</code>来指定实体类中属性代表删除状态字段</p><ul><li><p><code>value</code>指定可用状态的默认值，<code>delval</code>指定不可用状态的默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@TableLogic(value = &quot;0&quot;,delval = &quot;1&quot;)</span><span class="hljs-comment">// 0为可用，1为不可用</span><br>    <span class="hljs-keyword">private</span> Integer deleted;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><p><strong>当然可能由大量的表都有这个需求，因此每个实体类都为属性添加注解可能会很麻烦，因此可以通过全局配置来进行简化</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">deleted</span> <span class="hljs-comment">#删除字段对应属性名deleted</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#已删除状态表示</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#未删除状态表示</span><br></code></pre></td></tr></table></figure><p>因此做逻辑删除包含以下几步</p><ol><li><p>数据库中添加逻辑删除标记字段</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042210465.png" alt="image-20230904220806184" /></p></li><li><p>实体类中添加对应字段，设定当前字段为逻辑删除标记字段（<code>@TableLogic</code>注解）</p></li><li><p>简化第二步的删除标记设置操作，通过配置文件配置删字面值</p></li></ol><h3 id="update"><a class="markdownIt-Anchor" href="#update"></a> Update</h3><h4 id="乐观锁"><a class="markdownIt-Anchor" href="#乐观锁"></a> 乐观锁</h4><ul><li>业务并发现象带来的问题：秒杀</li></ul><p>怎么做：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042221632.png" alt="image-20230904222153571" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042222540.png" alt="image-20230904222202498" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042222037.png" alt="image-20230904222212970" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042223205.png" alt="image-20230904222311126" /></p><h2 id="快速开发"><a class="markdownIt-Anchor" href="#快速开发"></a> 快速开发</h2><h3 id="代码生成器"><a class="markdownIt-Anchor" href="#代码生成器"></a> 代码生成器</h3><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309042226557.png" alt="image-20230904222619511" /></p><p>需要添加MP提供的代码生成器坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还需要使用一个velocity模板引擎的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.velocity<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>velocity-engine-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>具体使用查看官方文档<a href="https://baomidou.com/pages/981406/#%E5%8F%AF%E9%80%89%E9%85%8D%E7%BD%AE">代码生成器配置新 | MyBatis-Plus (baomidou.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MyBatis-Plus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot</title>
    <link href="/2023/08/30/SpringBoot/"/>
    <url>/2023/08/30/SpringBoot/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot"><a class="markdownIt-Anchor" href="#springboot"></a> SpringBoot</h1><ul><li>SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程</li></ul><p>首先我们来看看SpringBoot程序是怎么搭建的，这样能直观的感受到其方便快捷之处。</p><ul><li><p>我们在进行Spring程序的开发时，首先需要写各配置类来创建Spring环境，现在统统不需要了。SpringBoot帮我们干好了。</p><p>我们只需要勾选选项即可</p><p>首先在IDEA中创建新模块时，我们原来选择的是Maven项目，现在改为图中的这个<code>Spring Initializr</code>。</p></li><li><p>Spring程序缺点</p><ul><li>配置繁琐</li><li>依赖设置繁琐</li></ul></li><li><p>SpringBoot程序优点</p><ul><li>自动配置</li><li>起步依赖（简化依赖配置）</li><li>辅助功能（内置服务器，...）</li></ul></li></ul><h2 id="springboot入门程序"><a class="markdownIt-Anchor" href="#springboot入门程序"></a> SpringBoot入门程序</h2><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292118532.png" alt="image-20230829211840464" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292119854.png" alt="image-20230829211909807" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292119386.png" alt="image-20230829211922334" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292119851.png" alt="image-20230829211933719" /></p><p><strong>如果在启动时遇到如下问题</strong></p><p><code>no tcnative-1 in java.library.path</code></p><p>解决方案如下</p><ol><li>点击编辑配置</li></ol><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292139460.png" alt="image-20230829213925430" /></p><ol start="2"><li>到如下页面，点击蓝色字体的需修改选项</li></ol><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292142824.png" alt="image-20230829214220767" /></p><ol start="3"><li>在java一栏中勾上添加vm选项</li></ol><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292141149.png" alt="image-20230829214121116" /></p><ol start="4"><li>勾上后，在VM选项一栏填入<code>-Djava.library.path=/usr/local/java/lib:/usr/local/hadoop/lib</code></li></ol><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292143832.png" alt="image-20230829214304779" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292142628.png" alt="image-20230829214021911" /></p><ol start="5"><li>点击应用，然后重启项目即可。</li></ol><h2 id="springboot简介"><a class="markdownIt-Anchor" href="#springboot简介"></a> SpringBoot简介</h2><p><strong>在入门案例中包含了SpringBoot程序包含的最基础的文件</strong></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292150343.png" alt="image-20230829215039312" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292151967.png" alt="image-20230829215115918" /></p><h3 id="springboot项目快速启动"><a class="markdownIt-Anchor" href="#springboot项目快速启动"></a> SpringBoot项目快速启动</h3><ul><li><p>前后端分离合作开发</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308302050310.png" alt="image-20230830205038213" /></p></li></ul><p>当项目未完成时，前端人员希望可以先测试一些已开发的功能时，前端人员无需准备IDEA和tomcat环境，只需后端人员通过springboot将项目打成jar包发送给前端人员，这个jar包可以直接运行，这样前端人员只需要连接数据库就可以进行测试了，方便快捷。</p><ul><li><p>使用maven指令将项目打包</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308302057661.png" alt="image-2023083020572863" /></p></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308302101926.png" alt="image-20230830210104901" /></p><p>在target目录下就已打好jar包。</p><p>前端人员得到jar包，就可以在本地在jar包的根目录下进入cmd输入<code>java -jar jar包名</code>命令来运行这个项目。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308302104061.png" alt="image-20230830210426999" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308302107263.png" alt="image-20230830210704215" /></p><h3 id="起步依赖"><a class="markdownIt-Anchor" href="#起步依赖"></a> 起步依赖</h3><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308302115028.png" alt="image-20230830211505920" /></p><p>通过继承<code>spring-boot-starter-parent</code>，以及<code>spring-boot-starter-web</code>依赖，帮助我们快速配置依赖。<code>spring-boot-starter-parent</code>继承于<code>spring-boot-dependencies</code>。<code>spring-boot-dependencies</code>里帮我们做了各种版本管理和依赖配置。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308302118067.png" alt="image-20230830211822013" /></p><h3 id="springboot程序启动"><a class="markdownIt-Anchor" href="#springboot程序启动"></a> Springboot程序启动</h3><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308302121127.png" alt="image-20230830212106076" /></p><p><strong>在开发过程如果想换技术也很方便</strong></p><p>比如：我们不使用它提供tomcat服务器，转而使用jetty服务器。</p><p>步骤：</p><ol><li>通过排除依赖的方式将其<code>tomcat</code>的依赖排除掉</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>添加jetty的依赖，只提供GA属性，V属性（version）无需提供，使用springboot提供好的即可。、</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>springboot 3.0以上，上述操作失效</strong></p><p>需要在上边的基础上添加一个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.jetty<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jetty-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>11.0.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后创建一个配置类实现<code>WebMvcConfigurer</code>接口，并添加<code>@Configuration</code>和<code>@ConfigurationProperties</code>注解，同时想要使用<code>@ConfigurationProperties</code>,它会提示你添加下面这个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="springboot基础配置"><a class="markdownIt-Anchor" href="#springboot基础配置"></a> SpringBoot基础配置</h2><h3 id="配置文件格式"><a class="markdownIt-Anchor" href="#配置文件格式"></a> 配置文件格式</h3><p>记住springboot中所有配置文件都命名为<code>application.xxx</code>其中<code>xxx</code>为文件格式</p><ul><li>修改服务器端口</li></ul><p>springboot提供了多种属性配置的方式</p><ul><li>application.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.prot</span> = <span class="hljs-string">80</span><br></code></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span> <br><span class="hljs-attr">port:</span> <span class="hljs-number">81</span><br></code></pre></td></tr></table></figure><ul><li>application.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">82</span><br></code></pre></td></tr></table></figure><p><strong>如何让springboot识别自定义的配置文件</strong></p><ul><li>点击<code>文件 ---&gt; 项目结构 ---&gt; Facet</code>,选中当前项目，点击*提示信息为自定义的springboot..*的按钮</li></ul><p>，然后将自定义的配置文件勾选即可<img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308302220036.png" alt="image-20230830222035977" /></p><ul><li>SpringBoot配置文件加载顺序(优先级)<ul><li>application.properties &gt; application.yml &gt; application.yaml</li></ul></li></ul><h3 id="yaml"><a class="markdownIt-Anchor" href="#yaml"></a> YAML</h3><ul><li>YAML(YAML,Ain't Markup Language)，一种数据序列化格式</li><li>优点：<ul><li>容易阅读</li><li>容易与脚本语言交互</li><li>以数据为核心，重数据轻格式</li></ul></li><li>YAML文件扩展名<ul><li><code>.yml</code>（主流）</li><li><code>.yaml</code></li></ul></li></ul><h4 id="yaml语法规则"><a class="markdownIt-Anchor" href="#yaml语法规则"></a> YAML语法规则</h4><ul><li>大小写敏感</li><li>属性层级使用多行描述，每行结尾使用冒号结束</li><li>使用缩进表示层级关系，同层级左对齐，只允许使用空格（不允许使用Tab键）、</li><li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li><li># 表示注释</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">enterprise:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">age:</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">tel:</span> <span class="hljs-string">xxx</span><br><span class="hljs-comment"># 这是注释</span><br></code></pre></td></tr></table></figure><ul><li>数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># array</span><br><span class="hljs-attr">number:</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">11</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">22</span><br><span class="hljs-bullet">-</span> <span class="hljs-number">33</span><br></code></pre></td></tr></table></figure><h4 id="yaml数据读取"><a class="markdownIt-Anchor" href="#yaml数据读取"></a> yaml数据读取</h4><p>对于在代码中读取配置文件中的信息前边其实已经做过很多次了。直接添加注解<code>@Value</code>使用<code>$&#123;&#125;</code>来引用就行</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308302303513.png" alt="image-20230830230347420" /></p><p>e.g.1</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;age&#125;&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br></code></pre></td></tr></table></figure><p>e.g.2</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">city:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">cq</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">bj</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">sh</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;city[0]&#125;&quot;)</span><br><span class="hljs-keyword">private</span> String city;<span class="hljs-comment">// 值为 cq</span><br></code></pre></td></tr></table></figure><p>e.g.3</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">stu:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">xxx</span><br><span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;stu.age&#125;&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308302304457.png" alt="image-20230830230408387" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308302304878.png" alt="image-20230830230445795" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308302304984.png" alt="image-20230830230457938" /></p><h3 id="多环境启动"><a class="markdownIt-Anchor" href="#多环境启动"></a> 多环境启动</h3><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308312135982.png" alt="image-20230831213457874" /></p><h5 id="通过yaml文件配置多环境"><a class="markdownIt-Anchor" href="#通过yaml文件配置多环境"></a> 通过yaml文件配置多环境</h5><p>在yaml里可以通过<code>---</code>来区分多环境；并通过<code>spring:</code>下的<code>profiles:</code>来配置不同环境，<code>spring:</code>属性下的<code>profiles:</code>属性下的<code>active:</code>属性来设置当前是什么环境。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#设置当前环境为开发环境 </span><br><span class="hljs-attr">spring:</span><br> <span class="hljs-attr">profiles:</span><br>  <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br><br><span class="hljs-comment">#开发环境</span><br><span class="hljs-attr">server:</span><br> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br> <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span> <br><br><span class="hljs-comment">#生产环境</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br> <span class="hljs-attr">port:</span> <span class="hljs-number">81</span><br><span class="hljs-attr">spring:</span> <br> <span class="hljs-attr">profiles:</span> <span class="hljs-string">pro</span><br> <br><span class="hljs-comment">#测试环境</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span><br> <span class="hljs-attr">port:</span> <span class="hljs-number">82</span><br><span class="hljs-attr">spring:</span><br> <span class="hljs-attr">profiles:</span> <span class="hljs-string">test</span><br></code></pre></td></tr></table></figure><p>虽然当前下面这种方式过时,但依旧可以使用，还很方便。那么现在推荐哪种方式呢？</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span> <br> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br> <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><p>推荐下面这种方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span> <br> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-attr">activate:</span><br>      <span class="hljs-attr">on-profile:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><p>明显更愿意用上边这种方式</p><h5 id="通过properties文件配置多环境"><a class="markdownIt-Anchor" href="#通过properties文件配置多环境"></a> 通过properties文件配置多环境</h5><ul><li>在<code>application.properties</code>文件中,添加</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><br><span class="hljs-comment">#配置开发环境有效</span><br><span class="hljs-comment">#spring.profiles.active=pro 配置生产环境有效</span><br><span class="hljs-comment">#spring.profiles.active=test 配置测试环境有效</span><br></code></pre></td></tr></table></figure><ol><li>创建<code>application-dev.properties</code>文件，配置开发环境</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">80</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建<code>application-pro.properties</code>文件，配置生产环境</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">81</span><br></code></pre></td></tr></table></figure><ol start="3"><li>创建<code>application-test.properties</code>文件，配置测试环境</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">82</span><br></code></pre></td></tr></table></figure><h5 id="多环境启动命令格式"><a class="markdownIt-Anchor" href="#多环境启动命令格式"></a> 多环境启动命令格式</h5><ul><li><p>带参数启动SpringBoot</p><ul><li>修改启动环境</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">java -jar springboot.jar --spring.profiles.active=test<br></code></pre></td></tr></table></figure><ul><li>修改端口</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">java -jar springboot.jar --server.port=81<br></code></pre></td></tr></table></figure><ul><li>同时同时在命令中写入多个参数</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">java -jar springboot.jar --server.port=82 --spring.profiles.active=test<br></code></pre></td></tr></table></figure></li></ul><p>另外spring官网给出了和外化配置相关的优先级。比如命令行参数的优先级就高于前面的配置文件。</p><h5 id="多环境开发控制"><a class="markdownIt-Anchor" href="#多环境开发控制"></a> 多环境开发控制</h5><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308312228430.png" alt="image-20230831222806380" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308312233415.png" alt="image-20230831223331328" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308312233961.png" alt="image-20230831223344892" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308312234511.png" alt="image-20230831223407461" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308312234549.png" alt="image-20230831223418487" /></p><h3 id="配置文件分类"><a class="markdownIt-Anchor" href="#配置文件分类"></a> 配置文件分类</h3><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308312235770.png" alt="image-20230831223502724" /></p><h2 id="整合第三方技术"><a class="markdownIt-Anchor" href="#整合第三方技术"></a> 整合第三方技术</h2><h3 id="整合junit"><a class="markdownIt-Anchor" href="#整合junit"></a> 整合JUnit</h3><p>为测试类添加注解<code>@SpringBootTest</code>开启测试功能，无需其他操作，springboot已经为我们做好了。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309022149682.png" alt="image-20230902214934581" /></p><h3 id="基于springboot实现ssm"><a class="markdownIt-Anchor" href="#基于springboot实现ssm"></a> 基于SpringBoot实现SSM</h3><h4 id="springboot整合mybatis"><a class="markdownIt-Anchor" href="#springboot整合mybatis"></a> SpringBoot整合MyBatis</h4><ul><li>用yml写配置</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309022219026.png" alt="image-20230902221942973" /></p><ul><li>为dao接口添加<code>@Mapper</code>注解</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309022220297.png" alt="image-20230902222021255" /></p><ul><li>springboot有一个默认的数据源，如果想使用其他的数据源，则需要先导入数据源依赖，然后再配置文件中配置<code>type</code>属性即可</li></ul><p>以Druid为例</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202309022224182.png" alt="image-20230902222426375" /></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring开发技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>树的重心</title>
    <link href="/2023/08/10/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83/"/>
    <url>/2023/08/10/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h2 id="树的重心"><a class="markdownIt-Anchor" href="#树的重心"></a> 树的重心</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* code by lxg */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 参考知乎Pecco佬的算法笔记https://zhuanlan.zhihu.com/p/357938161</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 计算以无根树每个点为根节点时的最大子树大小，这个值最小的点称为无根树的重心。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 无根树有以下性质：假设两相邻节点u,v.则以u为根节点时，v所在子树的大小 加上 以v为根节点时，u所在子树的大小等于整棵树的节点数</span><br><span class="hljs-comment"> * 这个性质很容易理解，手画一棵树，就很容易找到其中的数量关系</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 性质1：某个点是树的重心等价于它最大子树大小不大于整棵树大小的一半。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 性质2：树至多有两个重心。如果树有两个重心，那么它们相邻。此时树一定有偶数个节点，且可以被划分为两个大小相等的分支，每个分支各自包含一个重心。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 性质3：树中所有点到某个点的距离和中，到重心的距离和是最小的；如果有两个重心，那么到它们的距离和一样。反过来，距离和最小的点一定是重心。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 性质4：往树上增加或减少一个叶子，如果原节点数是奇数，那么重心可能增加一个，原重心仍是重心；如果原节点数是偶数，重心可能减少一个，另一个重心仍是重心。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 性质5：把两棵树通过一条边相连得到一棵新的树，则新的重心在较大的一棵树一侧的连接点与原重心之间的简单路径上。如果两棵树大小一样，则重心就是两个连接点。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;cin &gt;&gt; n;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">adj</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; n;i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> u, v;cin &gt;&gt; u &gt;&gt; v;<br>        adj[u].<span class="hljs-built_in">emplace_back</span>(v);<br>        adj[v].<span class="hljs-built_in">emplace_back</span>(u);<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sz</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>,<span class="hljs-title">mss</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>,ctr</span>;<span class="hljs-comment">//子树尺寸、以该节点为根时最大子树的根、重心</span><br>    <span class="hljs-comment">//利用性质1可以一趟dfs找到重心。</span><br>    function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt; dfs = [&amp;](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> fa)&#123;<br>        sz[x] = <span class="hljs-number">1</span>;mss[x] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i: adj[x])<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i == fa) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-built_in">dfs</span>(i,x);<br>            sz[x] += sz[i];<br>            mss[x] = <span class="hljs-built_in">max</span>(mss[x],sz[i]);<br>        &#125;<br>        mss[x] = <span class="hljs-built_in">max</span>(mss[x],n - sz[x]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span> * mss[x] &lt;= n) ctr.<span class="hljs-built_in">emplace_back</span>(x);<br>    &#125;;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>        <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树上操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssm整合后一些操作的规范</title>
    <link href="/2023/08/09/ssm%E6%95%B4%E5%90%88/"/>
    <url>/2023/08/09/ssm%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="ssm整合"><a class="markdownIt-Anchor" href="#ssm整合"></a> SSM整合</h1><h2 id="表现层数据封装"><a class="markdownIt-Anchor" href="#表现层数据封装"></a> 表现层数据封装</h2><h3 id="表现层数据封装-2"><a class="markdownIt-Anchor" href="#表现层数据封装-2"></a> 表现层数据封装</h3><h4 id="前端接收数据格式"><a class="markdownIt-Anchor" href="#前端接收数据格式"></a> 前端接收数据格式</h4><ul><li><p>封装操作结果到code属性中</p><p>比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">20041</span><span class="hljs-comment">//用一个数字码表示某种操作</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>封装特殊消息到message(msg)属性中</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">20040</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;数据查询失败，请重试！&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="表现层数据封装-3"><a class="markdownIt-Anchor" href="#表现层数据封装-3"></a> 表现层数据封装</h4><ul><li>设置统一数据返回结果类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span>&#123;<br>    <span class="hljs-keyword">private</span> Object data;<br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String msg;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>注意：Result类中的字段并不是固定的，可以根据需要自行增减，提供若干构造方法方便操作</em></p><p>其中状态码可以封装为一个常量类，通过访问常量类的常量成员来指定对应状态码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Code</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">QUERY_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">20021</span>;<span class="hljs-comment">//查询成功</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">QUERY_ERR</span> <span class="hljs-operator">=</span> <span class="hljs-number">20020</span>;<span class="hljs-comment">//查询失败</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">SAVE_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">20031</span>;<span class="hljs-comment">//保存成功</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">SAVE_ERR</span> <span class="hljs-operator">=</span> <span class="hljs-number">20030</span>;<span class="hljs-comment">//保存失败</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">UPDATE_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">20041</span>;<span class="hljs-comment">//修改成功</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">UPDATE_ERR</span> <span class="hljs-operator">=</span> <span class="hljs-number">20040</span>;<span class="hljs-comment">//修改失败</span><br>&#125;<br></code></pre></td></tr></table></figure><p><em>Code类的常量设计根据具体需要具体设计</em></p><p>后端向前端的返回结果就可以统一返回封装的Result对象了。</p><h2 id="异常处理器"><a class="markdownIt-Anchor" href="#异常处理器"></a> 异常处理器</h2><h3 id="异常处理器-2"><a class="markdownIt-Anchor" href="#异常处理器-2"></a> 异常处理器</h3><ul><li>开发中，程序不可避免的会遇到异常</li><li>出现异常的常见位置与常见诱因如下：<ul><li>框架内部抛出的异常：因使用不规范导致</li><li>数据层抛出的异常：因外部服务器故障导致（例如：服务器访问超时）</li><li>业务层抛出的异常：因业务逻辑书写错误导致（例如：遍历书写操作，导致索引异常等）</li><li>表现层抛出的异常：因数据收集、校验等规则导致（例如：不匹配的数据类型间导致异常）</li><li>工具类抛出的异常：因工具类数据不严谨不够健壮导致（例如：必要释放的连接长期为释放等）</li></ul></li></ul><p><strong>各个层级均出现异常，异常处理代码书写在哪一层？</strong></p><p><strong>——所有异常均抛出到表现层处理</strong></p><p><em>但是表现层处理异常，每个方法单独书写，代码书写量巨大且意义不强，如何解决？——AOP思想</em></p><p>那么我们直接就开始进行aop编程吗？其实不用，spring早就给我们提供了异常处理器，方便我们的异常处理。通过<code>@RestControllerAdvice</code>注解来指定自定义类为异常处理器，然后它就会拦截我们想要处理的异常供我们处理</p><ul><li><p>异常处理器</p><ul><li><p>集中的、统一的处理项目中出现的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectExceptionAdvice</span>&#123;<br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doException</span><span class="hljs-params">(Exception e)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-number">111</span>,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>其中<code>@RestControllerAdvice</code>表示rest风格请求的异常处理，相应的有<code>@ControllerAdvice</code>.</p></li><li><p><code>@ExceptionHandler</code>注解的参数表示你这里要拦截那种类型的异常进行处理</p></li><li><p>返回的类型对应的是抛出异常的方法返回的类型，比如返回某种操作执行失败的信息</p></li></ul></li></ul></li></ul><h2 id="项目异常处理方案"><a class="markdownIt-Anchor" href="#项目异常处理方案"></a> 项目异常处理方案</h2><h3 id="项目中的异常分类"><a class="markdownIt-Anchor" href="#项目中的异常分类"></a> 项目中的异常分类</h3><h4 id="用户行为产生的异常"><a class="markdownIt-Anchor" href="#用户行为产生的异常"></a> 用户行为产生的异常</h4><ul><li><p>不规范的用户行为操作产生的异常</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">比如：<br>发送一个查询标准为：<br>GET: http:<span class="hljs-regexp">//</span>localhost<span class="hljs-regexp">/books/</span><span class="hljs-number">1</span><br>但是，用户却写成了：<br>GET: http:<span class="hljs-regexp">//</span>localhost<span class="hljs-regexp">/books/</span>abcxxx<br>这时查询就会失败<br></code></pre></td></tr></table></figure></li><li><p>规范的用户行为产生的异常</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">比如：年龄属性本该为数字，却填入了其他字符串<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span>zhangsan<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;哈哈哈&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="项目运行过程中产生的-非用户行为的异常"><a class="markdownIt-Anchor" href="#项目运行过程中产生的-非用户行为的异常"></a> 项目运行过程中产生的、非用户行为的异常</h4><ul><li><p>项目运行过程中可预计且无法避免的异常</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">比如：<br>服务器运行过程中意外断电，导致服务器异常关闭<br>数据库操作过程发生意外，导致读写失败<br></code></pre></td></tr></table></figure></li><li><p>开发人员未预期到的异常</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">比如：<br>一段程序需要先生成某个文件，然后另一段程序再去读写这个文件。但这个文件意外没有生成，导致程序找不到指定文件带来的程序崩溃<br></code></pre></td></tr></table></figure></li></ul><p><strong>综上分析，我们可以将项目中的异常分类总结如下：</strong></p><ul><li>业务异常（BusinessException）<ul><li>规范的用户行为产生的异常</li><li>不规范的用户行为操作产生的异常</li></ul></li><li>系统异常（SystemException）<ul><li>项目运行过程中可预计且无法避免的异常</li></ul></li><li>其他异常（Exception）<ul><li>开发人员未预期到的异常</li></ul></li></ul><h3 id="处理方案"><a class="markdownIt-Anchor" href="#处理方案"></a> 处理方案</h3><ul><li><p>业务异常（BusinessException）</p><ul><li>发送对应消息传递给用户，提醒规范操作</li></ul></li><li><p>系统异常（SystemException）</p><ul><li>发送固定消息传递给用户，安抚用户</li><li>发送特定消息给运维人员，提醒维护</li><li>记录日志</li></ul></li><li><p>其他异常（Exception）</p><ul><li>发送固定消息传递给用户，安抚用户</li><li>发送特定消息给开发人员，提醒维护（纳入预期范围内）</li><li>记录日志</li></ul></li></ul><p>既然分清楚了各种异常，那么我们就可以在代码里去处理了</p><p>首先，前边学习过异常处理器，来处理特定异常，那么我们就可以自定义一些异常，并给这些异常编配特定的数字码，方便我们处理。最后我们在代码中<code>try...catch...</code>程序抛出的异常，再根据分类，转而抛出我们自定义的异常，让异常处理器捕获并处理。这样异常的处理就清晰有条理。</p><p>比如：自定义<code>SystemException</code>、<code>BusinessException</code>来处理系统异常和业务异常。例如捕获系统相关异常，转而抛出<code>SystemException</code>，交给对应异常管理器统一管理；捕获业务相关异常，转而抛出<code>BusinessException</code>交给对应异常管理器统一处理</p><p>注意：为了咱们的自定义异常能抛出需要继承<code>RuntimeException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.exception;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br>    <span class="hljs-keyword">private</span> Integer code;<span class="hljs-comment">//异常代码</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SystemException</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SystemException</span><span class="hljs-params">(String message, Integer code)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SystemException</span><span class="hljs-params">(String message, Throwable cause, Integer code)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause);<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Code</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">QUERY_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">20021</span>;<span class="hljs-comment">//查询成功</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">QUERY_ERR</span> <span class="hljs-operator">=</span> <span class="hljs-number">20020</span>;<span class="hljs-comment">//查询失败</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">SAVE_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">20031</span>;<span class="hljs-comment">//保存成功</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">SAVE_ERR</span> <span class="hljs-operator">=</span> <span class="hljs-number">20030</span>;<span class="hljs-comment">//保存失败</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">UPDATE_OK</span> <span class="hljs-operator">=</span> <span class="hljs-number">20041</span>;<span class="hljs-comment">//修改成功</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">UPDATE_ERR</span> <span class="hljs-operator">=</span> <span class="hljs-number">20040</span>;<span class="hljs-comment">//修改失败</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">SYSTEM_EXCEPTION</span> <span class="hljs-operator">=</span> <span class="hljs-number">50020</span>;<span class="hljs-comment">//系统异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">BUSINESS_EXCEPTION</span> <span class="hljs-operator">=</span> <span class="hljs-number">50020</span>;<span class="hljs-comment">//业务异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">SYSTEM_UNKNOWN_EXCEPTION</span> <span class="hljs-operator">=</span> <span class="hljs-number">50040</span>;<span class="hljs-comment">//其他未知异常</span><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>模拟一个系统异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service.Impl;<br><br><span class="hljs-keyword">import</span> org.example.controller.Code;<br><span class="hljs-keyword">import</span> org.example.dao.UserDao;<br><span class="hljs-keyword">import</span> org.example.domain.User;<br><span class="hljs-keyword">import</span> org.example.exception.SystemException;<br><span class="hljs-keyword">import</span> org.example.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service(&quot;userService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> / <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (ArithmeticException e)&#123;<br>            <span class="hljs-keyword">throw</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemException</span>(<span class="hljs-string">&quot;This is a system exception&quot;</span>, Code.SYSTEM_EXCEPTION);<br>        &#125;<br>        <span class="hljs-keyword">return</span> userDao.selectAll();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">selectById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userDao.selectById(id);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>抛出系统异常交给异常处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.example.controller.Result;<br><span class="hljs-keyword">import</span> org.example.exception.SystemException;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectExceptionAdvice</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(SystemException.class)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doSystemException</span><span class="hljs-params">(SystemException se)</span>&#123;<br>        <span class="hljs-comment">//1.发送消息给维护人员以及开发人员</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * do something ...</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//2.记录日志</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * do something ...</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//3.给用户发送消息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-literal">null</span>,se.getCode(),<span class="hljs-string">&quot;请稍等系统繁忙&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring开发技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssm整合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重链剖分</title>
    <link href="/2023/08/09/%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86/"/>
    <url>/2023/08/09/%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* code by lxg */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 所谓重链剖分就是，对于每个轻子节点，按重子节点往叶节点走，可以得到一条唯一的路径，我们称之为重链。</span><br><span class="hljs-comment"> * 每个轻子节点即为每条重链的链头，这样整棵树就被分成若干条重链了，称之为重链剖分。</span><br><span class="hljs-comment"> * 对于每个节点，连向重子节点的边成为重边，同理定义轻边</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 重子节点：对于每个节点，我们称其所有子节点中，以子节点为根的子树尺寸最大者为重子节点</span><br><span class="hljs-comment"> * 轻子节点：除重子节点外，均为轻子节点。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sz</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>,<span class="hljs-title">hs</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>,<span class="hljs-title">f</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>,<span class="hljs-title">dep</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>,<span class="hljs-title">top</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-comment">//子树尺寸，重子节点,父节点，深度，链头</span><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">adj</span>(n + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; n;i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> u, v;cin &gt;&gt; u &gt;&gt; v;<br>        adj[u].<span class="hljs-built_in">emplace_back</span>(v);<br>    &#125;<br>    function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt; dfs1 = [&amp;](<span class="hljs-type">int</span> x)-&gt;<span class="hljs-type">void</span>&#123;<br>        sz[x] = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i: adj[x])<br>        &#123;<br>            dep[i] = dep[x] + <span class="hljs-number">1</span>;<br>            f[i] = x;<br>            <span class="hljs-built_in">dfs1</span>(i);<br>            <span class="hljs-keyword">if</span>(sz[i] &gt; mx)<br>            &#123;<br>                mx = sz[i];hs[x] = i;<br>            &#125;<br>            sz[x] += sz[i];<br>        &#125;<br>    &#125;;<br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//第一遍dfs,预处理出尺寸、深度、父节点，重子节点</span><br><br>    top[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<span class="hljs-comment">//根节点的所在链的链头为本身</span><br>    function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt; dfs2 = [&amp;](<span class="hljs-type">int</span> x)-&gt;<span class="hljs-type">void</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i: adj[x])<br>        &#123;<br>            <span class="hljs-keyword">if</span>(top[i] == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(hs[x] == i) top[i] = top[x];<span class="hljs-comment">//重子节点的链头为父节点的链头</span><br>                <span class="hljs-keyword">else</span> top[i] = i;<span class="hljs-comment">//轻子节点的链头为本身</span><br>                <span class="hljs-built_in">dfs2</span>(i);<br>            &#125;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//第二遍dfs,处理出所有节点的链头</span><br>    <br>    <span class="hljs-comment">//树剖完成后，就可以方便一些树上操作了</span><br>    <span class="hljs-comment">//O(logn)求lca</span><br>    function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt; lca = [&amp;](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)-&gt;<span class="hljs-type">int</span>&#123;<br>        <span class="hljs-keyword">while</span>(top[x] != top[y])<br>        &#123;<br>            x = top[x],y = top[y];<br>            <span class="hljs-keyword">if</span>(dep[x] &lt; dep[y]) y = f[y];<br>            <span class="hljs-keyword">else</span> x = f[x];<br>        &#125;<br>        <span class="hljs-keyword">return</span> (dep[x] &lt; dep[y]) ? x : y;<br>    &#125;;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>        <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>树剖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>重链剖分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMvc拦截器</title>
    <link href="/2023/08/08/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <url>/2023/08/08/%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="拦截器"><a class="markdownIt-Anchor" href="#拦截器"></a> 拦截器</h2><h3 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h3><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308081510703.png" alt="image-20230808151042455" /></p><ul><li>拦截器（Interceptor）是一种动态拦截方法调用的机制，在SpringMvc中动态拦截控制器方法的执行</li><li>作用：<ul><li>在指定的方法调用前后执行预先设定的代码</li><li>阻止原始方法的执行</li></ul></li></ul><p>到这里我们会发现这和前面JavaWeb接触到的过滤器十分相似，那它们之间有区别吗？</p><h3 id="拦截器与过滤器的区别"><a class="markdownIt-Anchor" href="#拦截器与过滤器的区别"></a> 拦截器与过滤器的区别</h3><ul><li>归属不同：Filter属于Servlet技术，Interceptor属于SpringMvc技术</li><li>拦截内容不同：Filter对所有访问增强，Interceptor仅针对SpringMvc的访问进行增强</li></ul><h3 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h3><ol><li><p>制作拦截器功能类</p><p>建议在controller包下创建interceptor包，并创建自定义的拦截器类实现<code>HandlerInterceptor</code>接口，并为该类添加<code>@Component</code>注解，将该类的对象交给Spring管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProjectInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行前 ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行后 ...&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;完成拦截器的所有操作后 ...&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里需要重写三个方法<code>boolean preHandle()</code>、<code>void postHandle()</code>、<code>void afterCompletion()</code>.</p><p>对于第一个方法<code>boolean preHandle()</code>如果返回的是<code>false</code>，则拦截器执行到此为止，后续的操作均不会执行，包括原本需要在拦截器放行后执行的操作。</p><p>比如：</p><p>返回<code>true</code>:</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308081543282.png" alt="image-20230808154344212" /></p><p>返回<code>false</code>:</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308081542027.png" alt="image-20230808154252958" /></p></li><li><p>配置拦截器的执行位置</p><p>到前面啊学过的继承于<code>WebMvcConfigurationSupport</code>的自定义类中，重写<code>void addInterceptors(InterceptorRegistry registry)</code>方法，和放行访问的资源类似。</p><p>但是这里方法执行<code>registry.addInterceptor(projectInterceptor).addPathPatterns(&quot;/books&quot;,&quot;/books/*&quot;);</code>时，需要咱们自定义的拦截器对象。因此定义一个对应的成员。这一步就指定了哪个拦截器拦截对应的一些路径。<code>addPathPatterns</code>方法的参数是一个可变参数，可以传入多个路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.example.controller.interceptor.ProjectInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMvcSupport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProjectInterceptor projectInterceptor;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br> <span class="hljs-comment">//放行需要访问的页面资源      </span><br>        registry.addResourceHandler(<span class="hljs-string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/pages/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/js/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/js/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/css/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/css/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/plugins/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/plugins/&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br> <span class="hljs-comment">//拦截对应请求，进行处理      </span><br>        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="hljs-string">&quot;/books&quot;</span>,<span class="hljs-string">&quot;/books/*&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>你也可以为了简化开发直接让<code>SpringMvcConfig</code>配置类实现<code>WebMvcConfigurer</code>接口来代替创建<code>WebMvcConfigurationSupport</code>的子类。需要重写的方法也一样。但是这个方式具有侵入性，让两种操作绑定在一起了，所以还是建议配置类和拦截路径的配置分开写的方式。</p></li></ol><h3 id="拦截器参数"><a class="markdownIt-Anchor" href="#拦截器参数"></a> 拦截器参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行前 ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>HttpServletRequest request</code>：http请求</p><p><code>HttpServletResponse response</code>：http响应</p><p><code>Object handler</code>：具体类型为——HandlerMethod,封装了我们需要执行的方法，比如查询，就会通过反射机制将其封装到<code>HandlerMethod</code>对象中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行后 ...&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>ModelAndView modelAndView</code>：封装了SpringMvc进行页面跳转的相关数据。和前面JavaWeb的request和respose进行页面跳转的功能类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       System.out.println(<span class="hljs-string">&quot;完成拦截器的所有操作后 ...&quot;</span>);<br>       HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>   &#125;<br></code></pre></td></tr></table></figure><p><code>Exception ex</code>：拿到原始方法执行过程中抛出的异常，可以进行相应处理。但是几乎没什么用，因为我们前面已经学过Spring异常处理的方案了，异常统一交给异常处理器解决。</p><h3 id="多拦截器执行顺序"><a class="markdownIt-Anchor" href="#多拦截器执行顺序"></a> 多拦截器执行顺序</h3><ul><li>当配置多个拦截器时，形成拦截器链。就像过安检时，需要重重检查。</li></ul><p>执行顺序和注册拦截器的顺序相关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(projectInterceptor).addPathPatterns(<span class="hljs-string">&quot;/books&quot;</span>,<span class="hljs-string">&quot;/books/*&quot;</span>);<br>        registry.addInterceptor(projectInterceptor2).addPathPatterns(<span class="hljs-string">&quot;/books&quot;</span>,<span class="hljs-string">&quot;/books/*&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>projectInterceptor</code>拦截器先进行拦截，再是<code>projectInterceptor2</code>。</p><p>当原始方法执行后，则是反过来执行它们的<code>postHandle</code>方法。和栈结构类似。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308081647674.png" alt="image-20230808164447817" /></p>]]></content>
    
    
    <categories>
      
      <category>拦截器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMvc拦截器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1744F - MEX vs MED</title>
    <link href="/2023/07/20/1744F-MEX-vs-MED/"/>
    <url>/2023/07/20/1744F-MEX-vs-MED/</url>
    
    <content type="html"><![CDATA[<p><strong>题目链接：<a href="https://codeforces.com/problemset/problem/1744/F">https://codeforces.com/problemset/problem/1744/F</a></strong></p><p><strong>思路：</strong></p><ul><li><p>枚举<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>e</mi><mi>x</mi><mo>=</mo><mi>i</mi><mo separator="true">,</mo><mi>i</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">mex=i,i∈[0,n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span>，对于每个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>e</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">mex</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span></span></span></span>值，寻找符合条件的区间数。</p></li><li><p>对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>e</mi><mi>x</mi><mo>=</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">mex=i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>的区间来说，区间一定包含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的数，如果区间长度大于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">2\times i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>，该区间的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>e</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">med</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span></span></span></span>一定在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[i+1,n-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>中取得。所以这些区间是不可能符合条件<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>e</mi><mi>x</mi><mo>&gt;</mo><mi>m</mi><mi>e</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">mex&gt;med</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span></span></span></span>的，可以直接排除掉。</p></li><li><p>那么怎么去枚举区间就成为了问题的核心了。首先，根据第二条分析，对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>e</mi><mi>x</mi><mo>=</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">mex=i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>的区间一定包含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>这些数，那么我们只需枚举这些区间即可，可以直接排除掉<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>e</mi><mi>x</mi><mo mathvariant="normal">≠</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">mex\neq i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>的区间。</p><p>​那么哪些区间可以判断出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>e</mi><mi>x</mi><mo>=</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">mex=i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>呢？首先我们定义两个数组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>l</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>m</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ml[i],mr[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>；<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>l</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ml[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>表示数值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>中所有数的下标的最左端，同理定义<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">mr[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>。我们假设数值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>出现的位置定义为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">p[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>，这样对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>e</mi><mi>x</mi><mo>=</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">mex=i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>的区间就一定有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>&lt;</mo><mi>m</mi><mi>l</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mtext> </mtext><mi>o</mi><mi>r</mi><mtext> </mtext><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mi>m</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">p[i]&lt;ml[i-1]\space or\space p[i]&gt;mr[i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace"> </span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>的位置不能出现在包含数值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>中全部数的最小区间内。</p></li><li><p>我们已经清楚哪些区间符合条件了，那么就可以开始枚举区间了：</p><ul><li>对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>&lt;</mo><mi>m</mi><mi>l</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">p[i]&lt;ml[i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的情况：我们枚举可能符合条件的区间的左端点，然后对于每个左端点看有多少右端点符合条件，然后统计即可，</li><li>对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mi>m</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">p[i]&gt;mr[i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>的情况：枚举可能符合条件的右端点，然后看符合条件的左端点有多少，然后统计。</li></ul></li></ul><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">Code:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    p[n] = n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;cin &gt;&gt; x;<br>        p[x] = i;<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ml</span><span class="hljs-params">(n)</span>,<span class="hljs-title">mr</span><span class="hljs-params">(n)</span></span>;<span class="hljs-comment">//0~i-1中的最左、最右下标</span><br>    ml[<span class="hljs-number">0</span>] = mr[<span class="hljs-number">0</span>] = p[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; n;i ++)<br>    &#123;<br>        ml[i] = <span class="hljs-built_in">min</span>(ml[i - <span class="hljs-number">1</span>], p[i]);<br>        mr[i] = <span class="hljs-built_in">max</span>(mr[i - <span class="hljs-number">1</span>], p[i]);<br>    &#125;<br>    ll res = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//对于mex = i,找到满足条件的区间数。mex = 0一定不会有这样的区间</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)<br>    &#123;<br>        <span class="hljs-comment">//对于数值 i 的位置出现在数值0~i-1的位置中，mex一定不会等于i;等价于排除掉mex != i的区间 </span><br>        <span class="hljs-keyword">if</span>(p[i] &gt;= ml[i - <span class="hljs-number">1</span>] &amp;&amp; p[i] &lt;= mr[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-type">int</span> len = <span class="hljs-number">2</span> * i;<span class="hljs-comment">//对于mex = i，但区间长度大于len的区间，med 一定大于 i</span><br>        <span class="hljs-keyword">if</span>(p[i] &lt; ml[i - <span class="hljs-number">1</span>])<span class="hljs-comment">//对于 i 的位置出现在 0~i-1左边的情况，枚举可能符合条件的区间的左端点</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = ml[i - <span class="hljs-number">1</span>];j &gt; p[i];j --)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(mr[i - <span class="hljs-number">1</span>] - j + <span class="hljs-number">1</span> &gt; len) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//对于mex = i，但区间长度大于len的区间，med 一定大于 i</span><br>                res += <span class="hljs-built_in">min</span>(n - <span class="hljs-number">1</span>,j + len - <span class="hljs-number">1</span>) - mr[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<span class="hljs-comment">//符合条件的区间的右端点范围[mr[i - 1],j + len - 1];</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(p[i] &gt; mr[i - <span class="hljs-number">1</span>])<span class="hljs-comment">//对于 i 的位置出现在 0~i-1右边的情况，枚举可能符合条件的区间的左端点</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = mr[i - <span class="hljs-number">1</span>];j &lt; p[i];j ++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(j - ml[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span> &gt; len) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//对于mex = i，但区间长度大于len的区间，med 一定大于 i</span><br>                res += ml[i - <span class="hljs-number">1</span>] - <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,j - len + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<span class="hljs-comment">//符合条件的区间的左端点范围[j - len + 1,ml[i - 1]]</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>        <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMvc</title>
    <link href="/2023/07/12/SpringMvc/"/>
    <url>/2023/07/12/SpringMvc/</url>
    
    <content type="html"><![CDATA[<h3 id="springmvc"><a class="markdownIt-Anchor" href="#springmvc"></a> SpringMVC</h3><h4 id="springmvc概述"><a class="markdownIt-Anchor" href="#springmvc概述"></a> SpringMVC概述</h4><ul><li>SpringMVC技术与Servlet技术功能等同，均属于web层开发技术</li><li>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架</li><li>优点<ul><li>使用简单</li><li>灵活性强</li></ul></li></ul><h5 id="springmvc坐标"><a class="markdownIt-Anchor" href="#springmvc坐标"></a> SpringMVC坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-comment">&lt;!--可能会和tomcat插件冲突，所以范围限定为provided--&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="创建springmvc控制器类作用等同于servlet"><a class="markdownIt-Anchor" href="#创建springmvc控制器类作用等同于servlet"></a> 创建SpringMVC控制器类（作用等同于Servlet）</h5><p><code>@Controller</code>注解告诉spring这个类是一个控制器，<code>@RequestMapping</code>注解来指定请求路径（等同于Servlet路径）,<code>@ResponseBody</code>告诉spring该方法是一个处理请求和进行响应的方法，等同于Servlet的doGet或者doPost。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/print&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;springmvc&#x27;:&#x27;print&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="初始化springmvc环境同spring环境设定springmvc加载对应的bean"><a class="markdownIt-Anchor" href="#初始化springmvc环境同spring环境设定springmvc加载对应的bean"></a> 初始化SpringMVC环境（同Spring环境），设定SpringMVC加载对应的bean</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;org.example&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMvcConfig</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="初始化servlet容器加载springmvc环境并设置springmvc技术处理请求"><a class="markdownIt-Anchor" href="#初始化servlet容器加载springmvc环境并设置springmvc技术处理请求"></a> 初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理请求</h5><p>创建Servlet容器配置类，并继承<code>AbstractDispatcherServletInitializer</code>这个抽象类或者它的子类<code>AbstractDispatcherServletInitializer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.AbstractDispatcherServletInitializer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletContainerInitConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createServletApplicationContext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AnnotationConfigWebApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigWebApplicationContext</span>();<br>        ctx.register(SpringMvcConfig.class);<br>        <span class="hljs-keyword">return</span> ctx;<span class="hljs-comment">//SpringMvc环境</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createRootApplicationContext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AnnotationConfigWebApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigWebApplicationContext</span>();<br>        ctx.register(SpringConfig.class);<br>        <span class="hljs-keyword">return</span> ctx;<span class="hljs-comment">//Spring环境</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>首先重写<code>protected WebApplicationContext createServletApplicationContext()</code>这个方法，加载SpringMVC配置类</li><li>重写<code>protected String[] getServletMappings()</code>，告诉springMVC哪些请求交给SpringMVC处理，一般配<code>&quot;/&quot;</code>将所有请求拦截，交给SpringMVC处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationDispatcherServletInitializer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletContainerInitConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    protetcted Class&lt;?&gt;[] getRootConfigClasses()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    protetcted Class&lt;?&gt;[] getRootConfigClasses()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307251037165.png" alt="image-20230725103738024" /></p><p><strong>SpringMVC加载与controller相关的bean；Spring则无需管理这些bean.则需让Spring排除管理这些bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(value=&quot;org.example&quot;,</span><br><span class="hljs-meta">      excludeFilter=@ComponentScan.Filter(</span><br><span class="hljs-meta">      type = FilterType.ANNOTATION,</span><br><span class="hljs-meta">      classes = Controller.class</span><br><span class="hljs-meta">      )</span><br><span class="hljs-meta">     )</span><br></code></pre></td></tr></table></figure><p>或者用精确扫描需要的bean的包</p><ul><li><p>若要使用类似<code>jdbc.properties</code>的资源文件，导入资源文件的路径最好写上前缀<code>classpath</code>,让tomcat在项目里找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="postman工具介绍"><a class="markdownIt-Anchor" href="#postman工具介绍"></a> PostMan工具介绍</h5><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307251101313.png" alt="image-20230725110100259" /></p><h4 id="请求与响应"><a class="markdownIt-Anchor" href="#请求与响应"></a> 请求与响应</h4><h5 id="请求路径的设置"><a class="markdownIt-Anchor" href="#请求路径的设置"></a> 请求路径的设置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">import</span> org.example.domain.User;<br><span class="hljs-keyword">import</span> org.example.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><span class="hljs-comment">//为该控制器所有方法添加前置路径</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@RequestMapping(&quot;/seletAll&quot;)</span><span class="hljs-comment">//具体方法的路径，对应一个具体的Servlet</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seletAll</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; users = userService.selectAll();<br>        System.out.println(users);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307251815610.png" alt="image-20230725181542478" /></p><h5 id="请求参数的获取与响应数据的设置"><a class="markdownIt-Anchor" href="#请求参数的获取与响应数据的设置"></a> 请求参数的获取与响应数据的设置</h5><p><em>用工具模拟发送请求</em></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308270941031.png" alt="image-20230726030046110" /></p><ul><li><p>请求参数获取：</p><ul><li><p>常见的是给处理请求的方法添加和请求参数value同类型的形参，还有以下扩展方式：</p><ol><li><p>形参名为请求参数名；每个请求参数，对应一个形参;</p></li><li><p>或者使用<code>@RequestParam</code>注解指定哪个形参接收哪个请求参数；</p></li><li><p>用实体对象；</p></li><li><p>数组；</p></li><li><p>集合；</p></li></ol><p>GET:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">http://localhost:8080/SpringMvc-requesrt-response/user/selectAll?name=zhangsan&amp;age=18<br></code></pre></td></tr></table></figure><p>POST:同理，形参对应请求体参数</p><ul><li>直接对应请求参数key：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@RequestMapping(&quot;/selectAll&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectAll</span><span class="hljs-params">(String name,String age)</span>&#123;<br>        <span class="hljs-comment">//这里得到的name值为zhangsan,age值为18</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用<code>@RequestParam</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@RequestMapping(&quot;/selectAll&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectAll</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name,<span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> String age)</span>&#123;<br>        <span class="hljs-comment">//这里得到的name值为zhangsan,age值为18</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>实体对象：属性名和请求参数key一样</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/selectById&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectById</span><span class="hljs-params">(User user)</span>&#123;<br>       <span class="hljs-comment">//List&lt;User&gt; users = userService.selectById(user.getId());</span><br>       System.out.println(user);<br>   &#125;<br></code></pre></td></tr></table></figure><p>如果实体对象有引用类型的属性，则在发送请求时需要写具体的引用属性名，然后用成员访问符<code>.</code>连接引用属性的属性</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Address address;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span>&#123;<br>    <span class="hljs-keyword">private</span> String country;<br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-keyword">private</span> String city;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307260251662.png" alt="image-20230726025132534" /></p><p>发送请求则需像上图这样写请求参数的key</p><ul><li>接收数组请求参数：请求参数的key全写成形参名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/selectById&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectById</span><span class="hljs-params">(<span class="hljs-type">int</span>[] ids)</span>&#123;<br>       <span class="hljs-comment">//List&lt;User&gt; users = userService.selectById(user.getId());</span><br>       System.out.println(ids);<br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307260302956.png" alt="image-20230726030243902" /></p><ul><li>集合：和数组不一样的是需要添加一个<code>@RequestParam</code>注解，否则集合形参会被作为引用类型处理而报错</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/selectById&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;<span class="hljs-type">int</span>&gt; ids)</span>&#123;<br>       <span class="hljs-comment">//List&lt;User&gt; users = userService.selectById(user.getId());</span><br>       System.out.println(ids);<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>处理中文字符</p><p>POST请求：设置过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>();<br>        filter.setEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;filter&#125;;<br>    &#125;<br></code></pre></td></tr></table></figure><p>GET请求：参考Servlet处理方式</p></li></ul></li></ul><h6 id="请求与响应中json数据的传递"><a class="markdownIt-Anchor" href="#请求与响应中json数据的传递"></a> 请求与响应中Json数据的传递</h6><p>SpringMvc默认使用jackson解析json,因此需要添加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>json数组</li><li>json对象</li><li>json对象数组</li></ul><p>首先要让形参自动将json数据转换为对象，需要到SpringMvc配置类添加注解<code>@EnableWebMvc</code></p><p>json数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/listJsonParam&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listJsonParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span>  List&lt;String&gt; list)</span>&#123;<span class="hljs-comment">//json携带在请求体中，需用@RequestBody注解</span><br><br>   &#125;<br></code></pre></td></tr></table></figure><p>json对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/listJsonParamPojo&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listJsonParamPojo</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span>  List&lt;String&gt; list)</span>&#123;<br><br>   &#125;<br></code></pre></td></tr></table></figure><p>json对象数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jsonParamPojoList&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jsonParamPojoList</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span>  List&lt;User&gt; users)</span>&#123;<br><br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307260325225.png" alt="image-20230726032551160" /></p><ul><li><p>日期型数据的字符串可以由<code>Date</code>对象接收。但日期字符串格式要在接收时，需要给Date形参执行日期i形式,通过<code>@DateTimeFormat</code>注解去做。其中<code>yyyy/mm/dd</code>形式的可以默认接收，即不需要注解去指定，也可以成功转换成Date对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/dateData&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dataDate</span><span class="hljs-params">(<span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-mm-dd&quot;)</span> Date date1,<span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy/mm/dd&quot;)</span> Date date2)</span>&#123;<br>       System.out.println(date1);<br>       System.out.println(date2);<br>   &#125;<br></code></pre></td></tr></table></figure><p>也可以精确到时分秒：<code>yyyy/mm/dd hh:mm:ss</code>、<code>yyyy-mm-dd hh:mm:ss</code>,若请求参数没有时分秒则默认为<code>00:00:00</code>,且形式字符串不能含有时分秒否则报错。</p><ul><li><p>这种类型自动转换，是通过类型转换器做到的。有一个<code>Convert</code>接口，它有非常丰富的实现类提供了大量的类型转换的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Convert</span>&lt;S,T&gt;&#123;<br>    <span class="hljs-meta">@Nullable</span><br>    T <span class="hljs-title function_">convert</span><span class="hljs-params">(S var1)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>年龄：String →Integer</li><li>日期：String→Date</li></ul></li><li><p>一些数据会有默认的转换规则，若开发时发现不能进行默认转换，则可以通过<code>EnableWebMvc</code>开启</p></li></ul></li></ul><h5 id="响应"><a class="markdownIt-Anchor" href="#响应"></a> 响应</h5><ul><li><p>响应页面</p><ul><li><p>方法返回一个<code>String</code>类型数据，值为页面名称，此时不能要<code>@ResponseBody</code>，否则会被当做json字符串处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jumpToPage&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">jumpToPage</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;页面跳转&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>响应数据</p><ul><li><p>文本数据：必须要<code>@ResponseBody</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/toText&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toText</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;返回字符串&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;i love you&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>json数据</p><ul><li>响应一个pojo对象，直接返回一个pojo对象，必须要<code>@ResponseBody</code>，才会被解析成json</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/toPojo&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> User <span class="hljs-title function_">toPojo</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;返回Pojo&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>返回Pojo集合：同上，<code>@ResponseBody</code>然后直接返回一个对象集合</li></ul></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308270941244.png" alt="image-20230726142122157" /></p></li></ul><p>有关json数据的自动转换都是依赖于<code>jackson</code>库完成的。因此添加了<code>jackson</code>依赖上述操作才会生效</p><h5 id="过滤器"><a class="markdownIt-Anchor" href="#过滤器"></a> 过滤器</h5><p>重写<code>SpringMvcConfig</code>配置类的<code>getServletFilters()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>       <span class="hljs-type">XxxFilter</span> <span class="hljs-variable">xxxFilter1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XxxFilter</span>;        <br>       <span class="hljs-type">XxxFilter</span> <span class="hljs-variable">xxxFilter2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XxxFilter</span>;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;xxxFilter1,xxxFilter2&#125;;<br>   &#125;<span class="hljs-comment">//和SpringMvc其他配置类类似,返回一个数组，要什么给什么就行</span><br></code></pre></td></tr></table></figure><h4 id="rest风格"><a class="markdownIt-Anchor" href="#rest风格"></a> REST风格</h4><h5 id="rest简介"><a class="markdownIt-Anchor" href="#rest简介"></a> REST简介</h5><ul><li><p><strong>REST(Representational State Transfer)</strong>，表现形式状态转换。简单说就是访问网络的格式</p><ul><li><p>传统风格的资源描述形式</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/user/selectById?id=1<br>http://localhost/user/selectAll<br></code></pre></td></tr></table></figure></li><li><p>REST风格描述形式</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/user/1<br>http://localhost/user<br></code></pre></td></tr></table></figure></li></ul></li><li><p>优点：</p><ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化</li></ul></li><li><p>按照REST风格访问资源时使用<strong>行为动作</strong>区分对资源进行了何种操作</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/users查询全部用户信息GET(查询)<br>http://localhost/users/1查询指定用户信息GET(查询)<br>http://localhost/users添加用户信息POST(新增、保存)<br>http://localhost/users修改用户信息PUT(修改、更新)<br>http://localhost/users/1删除用户信息DELETE(删除)<br></code></pre></td></tr></table></figure><p><strong>很多操作使用同一个请求路径，这时就需要通过它们发送请求的方式来区分了，比如：GET、POST、......即请求的<code>method</code>来区分</strong></p><p><strong>总结就是：增（POST）、删（DELETE）、改（PUT）、查（GET）</strong></p></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307262015480.png" alt="image-20230726201529386" /></p><ul><li>根据REST风格对资源进行访问成为<strong>RESTful</strong></li></ul><h5 id="restful入门案例"><a class="markdownIt-Anchor" href="#restful入门案例"></a> RESTful入门案例</h5><ol><li><p>通过<code>@RequestMapping</code>注解在请求路径映射时进行<code>method</code>方式的指定；</p></li><li><p>如果需要接收请求路径中带的参数，需要使用<code>@PathVarible</code>进行指定，说明参数从路径中获取值；同时路径映射中需要将对应位置替换为形如：<code>http://localhost/books/&#123;参数名&#125;</code>，比如：<code>http://localhost/books/1</code>→<code>@RequestMapping(value = &quot;/books/&#123;id&#125;&quot;,method = RequestMethod.POST)</code> 。<code>&#123;&#125;</code>里的路径参数需要和方法形参名相同。</p></li></ol><ul><li>添加</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/users<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/books&quot;,method = RequestMethod.POST)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;book add() ...&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.add()&#x27;&#125;&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/users/1<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/books/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span><br>  <span class="hljs-meta">@ResponseBody</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;book delete() ...&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.delete()&#x27;&#125;&quot;</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>修改</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/users<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/books&quot;,method = RequestMethod.PUT)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;book update() ...&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.update()&#x27;&#125;&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><p>查询</p><ul><li>查询单个</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/users/1<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/books/&#123;id&#125;&quot;,method = RequestMethod.GET)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;book queryById() ...&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.queryById()&#x27;&#125;&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>查询所有</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/users<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/books&quot;,method = RequestMethod.GET)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;book queryAll() ...&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.queryAll()&#x27;&#125;&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307262104096.png" alt="image-20230726210448015" /></p><h5 id="rest快速开发"><a class="markdownIt-Anchor" href="#rest快速开发"></a> REST快速开发</h5><p>如果该控制器的每个方法都有返回参数，且访问路径前缀相同直接在该控制器添加<code>@RequestMapping</code>和<code>@ResponseBody</code>注解</p><p>例如：上边的增删改查简化为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">import</span> org.example.domain.Book;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/books&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(method = RequestMethod.POST)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book add() ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.add()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book delete() ...&quot;</span> + id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.delete()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(method = RequestMethod.PUT)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book update() ...&quot;</span> + book);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.update()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book queryById() ...&quot;</span>+id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.queryById()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book queryAll() ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.queryAll()&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>控制器的<code>@Controller</code>注解和<code>@ResponseBody</code>注解可以用<code>@RestController</code>注解代替</p><p><code>@RestController</code>注解里边含有这两个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.Documented;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.AliasFor;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RestController &#123;<br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = Controller.class</span><br><span class="hljs-meta">    )</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>每个<code>@RequsetMapping</code>，都包含<code>method</code>部分，所以还可以简化</strong></p><ul><li>将<code>@RequestMapping(method = RequestMethod.POST)</code>→→<code>@PostMapping</code></li><li>将<code>@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</code>→→<code>@DeleteMapping(&quot;/&#123;id&#125;&quot;)</code></li><li>将<code>@RequestMapping(method = RequestMethod.PUT)</code>→→<code>@PutMapping</code></li><li>将<code>@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.GET)</code>→→<code>@GetMapping(&quot;/&#123;id&#125;&quot;)</code></li><li>将<code>@RequestMapping(method = RequestMethod.GET)</code>→→<code>@GetMapping</code></li></ul><p>经过简化后的写法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">import</span> org.example.domain.Book;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/books&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-comment">/*@RequestMapping(method = RequestMethod.POST)*/</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book add() ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.add()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/*@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.DELETE)*/</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book delete() ...&quot;</span> + id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.delete()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/*@RequestMapping(method = RequestMethod.PUT)*/</span><br>    <span class="hljs-meta">@PutMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book update() ...&quot;</span> + book);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.update()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/*@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.GET)*/</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book queryById() ...&quot;</span>+id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.queryById()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/*@RequestMapping(method = RequestMethod.GET)*/</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book queryAll() ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.queryAll()&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="放行关于访问页面的请求交给tomcat处理"><a class="markdownIt-Anchor" href="#放行关于访问页面的请求交给tomcat处理"></a> 放行关于访问页面的请求交给tomcat处理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//添加这个后记得让SpringMvc配置类去加载</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMvcSupport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/pages/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/js/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/js/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/css/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/css/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/plugins/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/plugins/&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr />]]></content>
    
    
    <categories>
      
      <category>Spring开发技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMvc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring学习</title>
    <link href="/2023/07/12/Spring%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/07/12/Spring%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="spring"><a class="markdownIt-Anchor" href="#spring"></a> Spring</h1><p><a href="https://spring.io">https://spring.io</a></p><ul><li>优势<ul><li>专业角度<ol><li>简化开发：降低企业级开发的复杂性</li><li>框架整合：高效整合其他技术，提高企业级应用开发与运行效率</li></ol></li></ul></li></ul><h2 id="学什么"><a class="markdownIt-Anchor" href="#学什么"></a> 学什么？</h2><ul><li>简化开发：<ul><li>IOC</li><li>AOP<ul><li>事务处理</li></ul></li></ul></li><li>框架整合<ul><li>MyBatis</li><li>MyBatis-plus</li><li>Struts</li><li>Struts2</li><li>Hibernate......</li></ul></li></ul><h2 id="spring-framework"><a class="markdownIt-Anchor" href="#spring-framework"></a> Spring Framework</h2><ul><li><p>Spring Framwork是Spring生态圈中最基础的项目，是其他项目的根基</p></li><li><p>Spring Framwork系统架构图</p><ul><li><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131329682.png" alt="image-20230712195447195" /></li></ul></li></ul><h3 id="核心容器core-container"><a class="markdownIt-Anchor" href="#核心容器core-container"></a> 核心容器（Core Container）</h3><h4 id="iocdi"><a class="markdownIt-Anchor" href="#iocdi"></a> IoC/DI</h4><ul><li><p>代码书写现状</p><ul><li>耦合读偏高</li></ul></li><li><p>解决方案</p><ul><li>使用对象时，在程序中不要主动使用new产生对象，转换由<strong>外部</strong>提供对象</li><li>这就出现了<strong>Ioc</strong></li></ul></li><li><p><strong>IoC(Inversion of Control)控制反转</strong></p><ul><li>对象的创建控制权由程序转移到<strong>外部</strong>，这种思想称为控制反转</li><li>目的就是：<strong>解耦</strong></li></ul></li><li><p>Spring技术提供了一个容器，称为<strong>IoC容器</strong>,用来充当IoC思想中的<strong>外部</strong></p></li><li><p>IoC容器负责对象的创建，初始化等一系列工作，被创建或被管理的对现象在IoC容器中统称<strong>Bean</strong></p></li><li><p><strong>DI(Dependency Injection)依赖注入</strong></p><ul><li>在容器中建立bean与bean之间的依赖关系的整个过程，称为依赖注入</li></ul></li><li><p>目标：<strong>充分解耦</strong></p><ul><li>使用IoC容器管理bean（IoC）</li><li>在IoC容器内将由依赖关系的bean进行关系绑定（DI）</li></ul></li><li><p>最终效果</p><ul><li>使用对象时不仅可以直接从IoC容器中获取，并且获取到的bean已经绑定了所有的依赖关系</li></ul></li></ul><h4 id="ioc容器"><a class="markdownIt-Anchor" href="#ioc容器"></a> IoC容器</h4><p>IoC案例（写代码时怎么做）</p><ol><li><p>导入依赖的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>定义Spring管理的类（接口）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookDaoImpl</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        bookDao.print();<br>        System.out.println(<span class="hljs-string">&quot;bean demo...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li><p>创建Spring配置文件，配置对应类作为Spring管理的bean</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307122034307.png" alt="image-20230712203450242" /></p><p><em>文件名自定，一般问<code>applicationContext</code></em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.BookDaoImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.Impl.BookServiceImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意事项</strong>：bean定义时id属性在同一个上下文中不能重复</p><ul><li><code>class</code>属性指定要管理的类</li><li><code>id</code>属性，给这个bean取个id，后边创建对象需要出入对应id来创建对象</li></ul></li><li><p>初始化IoC容器(Spring核心容器/Spring容器)，通过容器获取bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span><br>    &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<span class="hljs-comment">//参数为Spring配置文件名</span><br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;bookService&quot;</span>);<span class="hljs-comment">//参数为配置文件中对应bean的id</span><br>        bookService.print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>运行结果</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131329215.png" alt="image-20230712205125842" /></p></li></ul></li></ol><h4 id="bean"><a class="markdownIt-Anchor" href="#bean"></a> Bean</h4><ul><li><p>基础配置</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307122139651.png" alt="image-20230712213905577" /></p><ul><li><p>bean的别名配置</p><ul><li><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131329661.png" alt="image-20230712214835825" /></p></li><li><p>可以通过<code>name</code>属性为bean配置多个名称</p></li><li><p>e.g</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookService2,bookService3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.Impl.BookServiceImpl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span><br>    &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;bookService2&quot;</span>);<span class="hljs-comment">//参数可以为配置文件中对应bean的name属性指定的别名，所以写bookService3也行</span><br>        bookService.print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>同时，在绑定bean之间的依赖关系时，<code>ref</code>也可以指定对应的name，即</p></li><li><p>当指定一个不存在的name时，报错如下<img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307122147781.png" alt="image-20230712214711744" /></p></li></ul></li><li><p>bean默认创建得对象是单例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span><br>    &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<span class="hljs-comment">//参数为Spring配置文件名</span><br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService1</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;bookService&quot;</span>);<br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService2</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;bookService&quot;</span>);<br>        System.out.println(bookService1);<br>        System.out.println(bookService2);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131329757.png" alt="image-20230712215144733" /></p><p><em>地址相同，说明是同一个对象</em></p></li></ul></li><li><p>创建非单例对象</p><ul><li>同样通过配置的方式，通过<code>scope</code>属性</li><li><code>scope</code>属性：两个取值prototype(原型，非单例)、singleton(单例)<img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307122155007.png" alt="image-20230712215511962" /></li><li>指定为prototype后正常创建对象<ul><li>结果如图<img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131329538.png" alt="image-20230712220627838" /></li></ul></li></ul></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131329404.png" alt="image-20230712220828086" /></p><p><strong>bean实例化（三种方式)</strong></p><ul><li><p>第一种：构造方法</p><ul><li><p>bean本质上就是对象，创建bean使用构造方法完成</p></li><li><p>举例：</p><ul><li>我们在BookDaoImpl类中写一个构造方法看看通过spring的bean创建对象时，该方法是否执行，若执行则表示bean同样是调用类的构造方法进行创建对象</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--一、使用构造方法创建对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.BookDaoImpl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookDaoImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDao Constructor...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span><br>    &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<span class="hljs-comment">//参数为Spring配置文件名</span><br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService1</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;bookService&quot;</span>);<br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService2</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;bookService&quot;</span>);<br>        System.out.println(bookService1);<br>        System.out.println(bookService2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行main方法，结果</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307122214635.png" alt="image-20230712221438601" /></p><p><em>说明构造方法执行了</em></p><p>**注意：**若创建带参构造方法还能行吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookDaoImpl</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDao Constructor...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307122311035.png" alt="image-20230712221734386" /></p><p><strong>说明bean创建对象只调用无参的构造方法，若午餐构造方法不存在则抛出<code>BeanCreationException</code></strong></p></li><li><p>无论是<strong>私有</strong>的构造方法还是<strong>公有</strong>都可以成功创建，那么是怎么实现的呢？<strong>反射</strong></p></li></ul></li><li><p>第二种：使用静态工厂造对象</p><ul><li><p>例子：创建BookDao接口，BookDaoImpl实现类，BookDaoFactory工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BookDao <span class="hljs-title function_">getBookDao</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookDaoImpl</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置文件书写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--二、使用静态工厂创建对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.factory.BookDaoFactory&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;getBookDao&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>class</code>指定为对应工厂，并添加属性<code>factory-method</code>，指定对应创建对象的方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><em>执行后成功</em></p></li><li><p>第三种：和二类似，只不过这里是通过非静态方法获取</p><ul><li><pre class="highlight"><code class="java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoFactory</span> &#123;    <span class="hljs-keyword">public</span> BookDao <span class="hljs-title function_">getBookDao</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookDaoImpl</span>();    &#125;&#125;&lt;!--code￼<span class="hljs-number">17</span>--&gt;</code></pre></li><li><p>即：</p><ul><li>先创建工厂对象（编写工厂对象的bean的配置文件）</li><li>再为对应类指定工厂bean以及工厂方法（具体为创建对象的那个方法）。</li></ul></li></ul></li><li><p>改良（第四种：使用工厂bean）</p><ul><li><p>用第三种方式每次都要配置工厂bean还要配对应方法十分繁琐</p></li><li><p>在<code>factory</code>包下创建<code>BookDaoFactoryBean</code>(我这里举例叫这个)类，并且实现<code>FactoryBean</code>接口</p><ul><li>注意这里需要传入泛型。你想要创建什么对象，就传入什么</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;BookDao&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BookDao <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> FactoryBean.<span class="hljs-built_in">super</span>.isSingleton();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>既然要实现接口，那就会实现对应的方法，下面看看这些方法是什么</p><ul><li><p><code> public BookDao getObject()</code>:代替原始实例工厂中创建对象的方法，返回对应对象</p></li><li><p><code>public Class&lt;?&gt; getObjectType()</code>：返回创建的对象的类型，返回对应字节码就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;BookDao&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BookDao <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BookDaoImpl</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> BookDao.class;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> FactoryBean.<span class="hljs-built_in">super</span>.isSingleton();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>配置文件的书写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--四、使用FactoryBean创建--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.factory.BookDaoFactoryBean&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>同时需注意：这种方式也是默认单例的，若想要非单例的，就重写<code> public boolean isSingleton()</code>方法,返回<code>true</code>代表是单例，<code>false</code>代表非单例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Bean的生命周期</p><ul><li><p>通过自定义的方法控制它的生命周期。当然对于自定义方法，对应Bean并不能识别这是干什么用的，因此还需配置来告诉程序，哪个是初始化方法，哪个是销毁时的方法</p></li><li><p>步骤：</p><ul><li><p>在实现类中定义无参的<code>init</code>，<code>destory</code>方法（当然方法名你可以自定义，但一般为了方便理解就这样命名方法就行了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-comment">//表示bean初始化对应的操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;init ...&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//表示bean销毁时的操作</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destory</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;destory ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写配置文件：分别指定<code>init-method</code>属性，<code>destory-method</code>属性,顾名思义，一个指定初始化方法，一个指定销毁方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.BookDaoImpl&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destory&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>运行main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>结果</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132000835.png" alt="image-20230713200050721" /></p></li><li><p>思考为什么只有初始化方法执行了，而销毁方法没执行</p><p>说明程序运行，创建对象时会执行初始化方法。但是程序结束并意味着咱们的bean对象会跟着销毁。因此更能看出对象是由外部控制的，而不是由程序本身。</p><p><strong>据此要想销毁bean对象，只需关闭管理bean对象的容器即可。只需执行close方法即可，即<code>ctx.close()</code></strong></p></li><li><p>但这里并没有结束，你会发现根据上边的main方法，咱们的<code>ctx</code>对象并不能找到<code>close</code>方法这是因为咱们定义时，用到了上转型。而恰好<code>ApplicationContext</code>接口并没有<code>close</code>方法。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132011776.png" alt="image-20230713201150733" /></p><p>这里是<code>ClassPathXmlApplicationContext</code>的继承关系。在<code>ApplicationContext</code>接口的子接口中，才定义了close方法（从<code>ClassPathXmlApplicationContext</code>类往上可以追溯到<code>ConfigurableApplicationContext</code>接口）。</p><p>因此若想调用<code>close</code>方法，则定义不能使用<code>ApplicationContext</code>进行上转型，用实现类定义即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>        ctx.close();<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后再执行main方法，bean就可以正常销毁了</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132016133.png" alt="image-20230713201621082" /></p><p>这种就是比较直接暴力的，通过关闭容器的方式来销毁bean。</p></li><li><p>对于关闭容器的话，Spring还提供了另一种方式</p><ul><li><p>叫做<strong>设置关闭钩子</strong></p><p>什么意思呢？就是在容器启动以后，我们给容器设置一个标志。然后虚拟机在退之前别忘了容器关闭完，你再退。</p></li><li><p>怎么做？注册一下关闭钩子（只需调用下对应方法即可）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>       ctx.registerShutdownHook();<span class="hljs-comment">//注册关闭钩子</span><br>       <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>       <span class="hljs-comment">//ctx.close();</span><br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132026568.png" alt="image-20230713202632529" /></p><p>可以看到，效果依旧。在程序任何位置注册都可，效果不变。</p></li><li><p>但上边的方式来控制生命周期，仍需通过配置来指定方法，略显繁琐。Spring就说你不用配置了，你按照我的要求来编写方法，我自动就识别了。</p><ul><li><p>于是Spring提供了两个接口<code>InitializingBean</code>和<code>DisposableBean</code>，很容易顾名思义，看出来哪个接口是干嘛的。</p></li><li><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132038902.png" alt="image-20230713203839859" /></p></li><li><p>每个接口提供一个方法，因此咱们只需复写上述两个方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> , InitializingBean, DisposableBean &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;destory ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;init ...&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.BookDaoImpl&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">/*ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);*/</span><br>       <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>       ctx.registerShutdownHook();<span class="hljs-comment">//注册关闭钩子</span><br>       <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>       <span class="hljs-comment">//ctx.close();</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>结果依旧</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132042237.png" alt="image-20230713204239198" /></p></li><li><p>初始化方法之所以叫做<code>afterPropertiesSet()</code>，是因为在当前类的成员设置完成后，才执行该方法。比如前边提到的绑定bean之间的依赖关系时，需要在其中一个bean中设置一个<code>setter</code>方法。那么<code>afterPropertiesSet()</code>方法就会在这个<code>setter</code>方法执行后在执行</p></li></ul></li></ul></li></ul></li><li><p>总结控制bean的生命周期有两种方式，一种是配置（又可以分为close和注册），一种是实现对应接口。</p></li><li><p>好了，知道了具体的怎么操作bean生命周期后，来看看整个bean的生命周期的示意图</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132049361.png" alt="image-20230713204921310" /></p></li><li><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132050900.png" alt="image-20230713205027851" /></p><p><em>这个上边也有讲到</em></p></li></ul></li></ul><h4 id="di依赖注入"><a class="markdownIt-Anchor" href="#di依赖注入"></a> DI（依赖注入）</h4><p>DI案例</p><ul><li><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307122055869.png" alt="image-20230712205520810" /></p></li><li><p>步骤（接着上边IoC的案例）</p><ol start="5"><li><p>删除业务代码中使用new的方式创建的dao对象</p></li><li><p>提供对应的set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-comment">//5.删除业务代码中使用new的方式创建的dao对象</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        bookDao.print();<br>        System.out.println(<span class="hljs-string">&quot;BookServiceImpl...&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//6.提供对应set方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookDao</span><span class="hljs-params">(BookDao bookDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookDao = bookDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.BookDaoImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.Impl.BookServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--7.配置Service与Dao的关系--&gt;</span><br>       <span class="hljs-comment">&lt;!-- property标签表示配置当前bean的属性（即对应类的属性）</span><br><span class="hljs-comment">        name属性表示配置哪一个具体属性（类的具体成员）</span><br><span class="hljs-comment">        ref属性表示参照那一个bean</span><br><span class="hljs-comment">        这样通过ref 与 name 就指定了bean之间的依赖关系</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后执行main方法运行成功，结果如图</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307122106421.png" alt="image-20230712210611393" /></p><p>若注释掉对应配置项</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131324268.png" alt="image-20230712210720369" /></p><p>运行结果如图</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131329532.png" alt="image-20230712210739184" /></p><p><em>通过案例我们知道依赖注入是什么，接下来详细看看有哪些依赖注入方式吧</em></p></li></ol></li></ul><p><strong>依赖注入方式（两种）</strong></p><ul><li><p>思考：向一个类中传递数据的方式有几种？</p><ul><li>普通方法（set方法，即案例的方法）</li><li>构造方法</li></ul></li><li><p>思考：依赖注入描述了在容器中建立bean与bean之间依赖关系的过程，如果bean运行需要的是数字或字符串呢？</p><ul><li>因此我们依赖注入的数据类型就分为两大类型<ul><li>引用类型</li><li>简单类型（基本数据类型与String）</li></ul></li></ul></li><li><p>依赖注入方式</p><ul><li>综上，依赖注入就分为四种情形</li><li>setter注入<ul><li>简单类型</li><li>引用类型</li></ul></li><li>构造器注入<ul><li>简单类型</li><li>引用类型</li></ul></li></ul></li><li><p>使用setter注入引用类型，前面案例已讲，这里就不多说了，接下来看其他三种。</p><ul><li><p><code>setter</code>注入简单数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> connectionNumber;<br>    <span class="hljs-keyword">private</span> String dataBaseName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setConnectionNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> connectionNumber)</span> &#123;<br>        <span class="hljs-built_in">this</span>.connectionNumber = connectionNumber;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDataBaseName</span><span class="hljs-params">(String dataBaseName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dataBaseName = dataBaseName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl ...&quot;</span> + dataBaseName + <span class="hljs-string">&quot; &quot;</span> + connectionNumber);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao)ctx.getBean(<span class="hljs-string">&quot;BookDao&quot;</span>);<br>        bookDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.BookDaoImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataBaseName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connectionNumber&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>*注意：*指定引用类型时用<code>ref</code>，指定简单类型直接通过<code>value</code>指定值。</p><p>来看看运行结果</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132124286.png" alt="image-20230713212424246" /></p><p>更改属性值，结果动态变化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.BookDaoImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataBaseName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;redis&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connectionNumber&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132125810.png" alt="image-20230713212527771" /></p><p><strong>setter方式注入时，配置属性的顺序不重要，但构造器就需要注意了</strong></p></li></ul></li><li><p>使用构造器注入</p><ul><li><p>注入引用类型</p><ol><li>写对应属性的构造方法</li><li>写配置文件，通过<code>constructor-arg</code>配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookServiceImpl</span><span class="hljs-params">(BookDao bookDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookDao = bookDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookServiceImpl ...&quot;</span>);<br>        bookDao.save();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;BookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.BookDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BookService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.Impl.BookServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;BookDao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：name是对应构造器的形参的名称，而不是成员的名称。ref依然指定对应的bean的id</strong></p><p><em>这里就可以看出通过setter和构造器方法注入依赖的方式大同小异</em></p><p>多个引用类型也类似，构造器传入多个参数，同时配置文件对应编写即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookServiceImpl</span><span class="hljs-params">(BookDao bookDao, UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookDao = bookDao;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookServiceImpl ...&quot;</span>);<br>        bookDao.save();<br>        userDao.save();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;BookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.BookDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;UserDoa&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.UserDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BookService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.Impl.BookServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;BookDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;UserDoa&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> (BookService) ctx.getBean(<span class="hljs-string">&quot;BookService&quot;</span>);<br>        bookService.save();<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132144487.png" alt="image-20230713214418438" /></p></li><li><p>很容易想到，注入简单类型也大同小异了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> connectionNumber;<br>    <span class="hljs-keyword">private</span> String dataBaseName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookDaoImpl</span><span class="hljs-params">(<span class="hljs-type">int</span> connectionNumber, String dataBaseName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.connectionNumber = connectionNumber;<br>        <span class="hljs-built_in">this</span>.dataBaseName = dataBaseName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl ...&quot;</span> + dataBaseName + <span class="hljs-string">&quot;,&quot;</span> + connectionNumber);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.BookDaoImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connectionNumber&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataBaseName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao)ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>        bookDao.save();<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132149010.png" alt="image-20230713214912964" /></p><p><strong>唯一需要主要的是，这里的配置顺序必须和你的构造器的参数顺序一致</strong></p><p>如果不一致，比如下边这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">BookDaoImpl</span><span class="hljs-params">(<span class="hljs-type">int</span> connectionNumber, String dataBaseName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.connectionNumber = connectionNumber;<br>        <span class="hljs-built_in">this</span>.dataBaseName = dataBaseName;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.BookDaoImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataBaseName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connectionNumber&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>就会出错</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132151312.png" alt="image-20230713215126235" /></p><p><em>当然和setter方式一样，属性值随value配置动态更新</em></p></li><li><p>可以看出这种方式依然耦合性很高，依然会受到人工编码的影响。所以Spring，还给出了另外的方式，来解耦。当然上边的是标准书写方式。</p><ul><li><p>通过指定<code>index</code>来代替<code>name</code>告诉配置文件，哪个值属于第几个参数，这样就不会受到参数位置影响了。索引从<code>0</code>开始</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.BookDaoImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>到这里注入方式就讲完了，那么到底哪种情形下用哪种方式更合理呢？</p><ol><li>强制依赖使用构造器进行，使用<code>setter</code>注入有概率不进行注入导致<code>null</code>对象出现</li><li>可选依赖使用<code>setter</code>注入进行，灵活性强</li><li>Spring框架倡导构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨</li><li>如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用setter注入完成可选依赖的注入</li><li>实际开发过程中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注入</li><li><strong>自己开发的模块推荐使用setter注入</strong></li></ol></li></ul><p><strong>依赖自动装配</strong></p><ul><li><p>上边的注入方式，依然需要自己写配置。因此Spring中提供了一个强大的功能<strong>自动装配</strong></p></li><li><p>什么叫自动装配</p><ul><li>IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配</li></ul></li><li><p>自动装配的方式</p><ul><li>按类型（常用）<ul><li>需要有setter方法，且除了默认的无参构造方法外不能提供其他构造方法</li><li>且容器需要有对应成员的bean，即需要配置对应bean。且当同一个类型配置多个bean时，这种方式也会报错</li></ul></li><li>按名称<ul><li>根据setter方法setXxx后边的Xxx装配（依据Xxx到容器中找对应的bean）。</li></ul></li><li>按构造方法<ul><li>需要提供构造方法，不推荐</li></ul></li><li>不启动自动装配</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132218143.png" alt="image-20230713221812099" /></p><p>通过<code>autowire</code>指定对应方式</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307132241780.png" alt="image-20230713224118704" /></p></li></ul><p><strong>集合注入</strong></p><ul><li>数组</li><li>List</li><li>Set</li><li>Map</li><li>Properties</li></ul><p>下面通过一个案例来看看，怎么实现这些集合的注入(setter方式)</p><p>类定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] array;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; set;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; map;<br>    <span class="hljs-keyword">private</span> Properties properties;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span> &#123;<br>        <span class="hljs-built_in">this</span>.array = array;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setList</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSet</span><span class="hljs-params">(Set&lt;String&gt; set)</span> &#123;<br>        <span class="hljs-built_in">this</span>.set = set;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMap</span><span class="hljs-params">(Map&lt;String, String&gt; map)</span> &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.properties = properties;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;UserDaoImpl print...&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;数组:&quot;</span>+ Arrays.toString(array));<br>        System.out.println(<span class="hljs-string">&quot;List:&quot;</span>+list);<br>        System.out.println(<span class="hljs-string">&quot;Set:&quot;</span>+set);<br>        System.out.println(<span class="hljs-string">&quot;Map:&quot;</span>+map);<br>        System.out.println(<span class="hljs-string">&quot;Properties&quot;</span>+properties);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件配置bean：属性<code>property</code>的<code>name</code>值和类定义的成员名称对应。而下属标签是固定的，比如<code>&lt;array&gt;</code>这里并不是类属性名，而是固定书写格式。具体的看下面的例子，就很容易上手了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.UserDaoImpl&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;array&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>我<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>爱<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>你<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;set&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>我<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>爱<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>你<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>你<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;country&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;china&quot;</span>/&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;province&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;chongqing&quot;</span>/&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;banan&quot;</span>/&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;properties&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;country&quot;</span>&gt;</span>china<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;province&quot;</span>&gt;</span>chongqing<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span>banan<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行main方法测试以及结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span><br>    &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> (UserDao) ctx.getBean(<span class="hljs-string">&quot;userDao&quot;</span>);<br>        userDao.print();<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307141600420.png" alt="image-20230714160025308" /></p><p><em>Tips:配置文件里<code>array</code>和<code>list</code>可以混用，但一般不这么用，了解就可以了。</em></p><p>如果集合里边的数据是引用类型呢？那就是下边这种个式，以数组举例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;array&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--xxx对应bean的id--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>到这里依赖注入就学的差不多了，接下来做个案例练习练习</p><p><strong>案例：数据源对象管理</strong></p><ul><li>第三方数据源管理</li></ul><p>由于是要管理第三方的数据源，因此我们不用自己定义类，下面以管理德鲁伊的数据源对象举例。</p><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>配置第三方数据源对象的bean</p><p>由于这是由第三方提供的类，我们无法选择注入方式（无法选择是setter还是构造器方式），只能进入到它的定义里去看，它提供了什么才行。进入到定义文件我们发现只能用setter方式注入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db1?useSSL=false<span class="hljs-symbol">&amp;amp;</span>allowPublicKeyRetrieval=true&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1923403646lxg..&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> (DataSource) ctx.getBean(<span class="hljs-string">&quot;dataSource&quot;</span>);<br>        System.out.println(dataSource);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307141629443.png" alt="image-20230714162903387" /></p><p>其实注入第三方提供的类，和我们注入自定义的是一样的操作。只不过受限于第三方的定义，注入方式受限。</p><p><em>但是这里就有一个疑问了，为什么没有导入mysq的jdbc驱动，仍不报错？这是因为这里只是对druid的dataSoruce进行了注入（可以简单理解为给成员赋值），还没真正建立数据库连接，如果你接着进行建立数据库连接的操作，这里就会报错了。因此若想真正建立与数据库的连接还是得导入msql的jdbc驱动的</em></p></li></ol><p>学习过JDBC的都知道，我们并会将连接数据库的信息写死。看看我们以前是怎么做的：将连接信息放入properties文件里。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307141651397.png" alt="image-20230714165105342" /></p><p>那么这里我们依然可以这么做，所以接下来我们看看spring是怎么读取properties文件的</p></li></ol><p><strong>加载properties文件</strong></p><p>这里提前准备了一个<code>jdbc.properties</code>文件</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307141659760.png" alt="image-20230714165905711" /></p><p>步骤：</p><ol><li><p>开启context命名空间，这步比较绕，记详细一点：</p><p>首先原始的bean的配置文件是这样的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在<code>beans</code>下开启<code>context</code>命名空间（类似原有的<code>xsi</code>）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context </span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意增加的地方：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br>http://www.springframework.org/schema/context <br>http://www.springframework.org/schema/context/spring-context.xsd<br></code></pre></td></tr></table></figure><p>可以简记为；仿造含有<code>beans</code>的内容，将其替换为<code>context</code>。</p></li><li><p>使用context空间加载properties文件:选择属性占位符<code>property-placeholder</code>，用<code>location</code>来指定对应的<code>properties</code>文件</p></li></ol><p>这一步就可以理解为bean配置文件已经读取到properties文件的值了。就算其他bean引用这些值进行注入依然可以。</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>使用属性占位符<code>$&#123;&#125;</code>读取properties文件中的属性,文件里的叫什么，就写什么。这里只是文件里叫<code>jdbc.xxx</code>而已，而不是<code>jdbc</code>前缀来指定文件。当然如果实际开发过程中，如果有多个数据库连接池的配置，properties中还是像我这样命名比较好。当然学过Mybatis就没有这些烦恼了。</li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里有个坑点，就是上面说的命名问题。如果不加前缀的话容易和系统命名的属性产生冲突。而系统优先级较高，导致没有正确注入。</p><p>这里可以设置不采用系统里的命名，第二步添加一些东西即可。指定系统属性模式<code>system-properties-mode</code>为<code>NEVER</code></p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>还可以加载多个properties文件</strong>,用<code>,</code>隔开即可</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties,jdbc2.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>还可以指定加载全部properties文件</strong>，用通配符<code>*.properties</code>即可</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;*.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>这样其实不够专业，一般还会加上<code>classpath</code>，像下边这样写。这样就只会读取当前工程里的properties文件，就不会加载你的依赖里边的properties文件了，就比较符合咱们所想。</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:*.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>若想加载依赖<code>jar</code>包中的properties文件怎么做？将上边的<code>classpath</code>改为<code>classpath*</code>即可。</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath*:*.properties&quot;</span> <span class="hljs-attr">system-properties-mode</span>=<span class="hljs-string">&quot;NEVER&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="容器"><a class="markdownIt-Anchor" href="#容器"></a> 容器</h4><ul><li>学完bean和依赖注入，再来什么探究下spring的容器</li></ul><h5 id="创建容器"><a class="markdownIt-Anchor" href="#创建容器"></a> 创建容器</h5><ul><li><p>前面所学习的案例均是采用下面这种方式进行容器的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br></code></pre></td></tr></table></figure><p>上面这种方式其实叫做<em>加载类路径下的配置文件</em>。spring还提供了另一种加载配置文件的方式：通过该绝对路径加载配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemXmlApplicationContext</span>(<span class="hljs-string">&quot;D:\\IDEA\\workspace\\spring-di-collection\\src\\main\\resources\\applicationContext.xml&quot;</span>);<br></code></pre></td></tr></table></figure><p>顾名思义，通过<em>文件系统</em>，咱们提供一个绝对路径，同样可以加载配置文件。</p></li></ul><h5 id="获取bean"><a class="markdownIt-Anchor" href="#获取bean"></a> 获取Bean</h5><ul><li><p>咱们前边常用的获取bean的方式，每次都要强制类型转换，这让我们写代码时很难受，那么有没有不用强转的方式呢。肯定是有的。spring还重载了一个带有字节码参数的方法。即咱们获取bean时，传入对应类型的字节码，提前告诉它咱们要获取什么类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> ctx.getBean(<span class="hljs-string">&quot;userDao&quot;</span>,UserDao.class);<br></code></pre></td></tr></table></figure></li><li><p>前讲自动装配时，有一个按类型查找bean，那么其实咱么还可以利用这个特性，只传入字节码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> ctx.getBean(UserDao.class);<br></code></pre></td></tr></table></figure><p>但这面临着一个问题：咱们知道按类型自动装配时，要求对应类型bean的配置只能有一个，若有多个就会抛出<code>NoUniqueBeanDefinitionException</code>异常</p></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307142035714.png" alt="image-20230714203507602" /></p><h5 id="容器类层次结构"><a class="markdownIt-Anchor" href="#容器类层次结构"></a> 容器类层次结构</h5><p>前面看过一次<code>ClassPathXmlApplicationContext</code>的继承层次，其实<code>ApplicationContext</code>这个接口并不是最顶层的，最顶层的是<code>BeanFactory</code>这个接口。其余的都是在这基础上做了功能的扩展。</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307142106179.png" alt="image-20230714210637080" /></p><h5 id="beanfactory"><a class="markdownIt-Anchor" href="#beanfactory"></a> BeanFactory</h5><p>通过<code>BeanFactory</code>也可以创建Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>      <span class="hljs-type">BeanFactory</span> <span class="hljs-variable">bf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlBeanFactory</span>(resource);<br>      <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> bf.getBean(UserDao.class);<br>      userDao.print();<br></code></pre></td></tr></table></figure><p>只是这种方式过时了。</p><p>下面我们做一件事：验证<code>BeanFactory</code>和<code>ClassPathXmlApplicationContext</code>加载bean的<strong>时机不一样</strong>。我们补上<code>UserDao</code>的默认构造函数来验证一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoImpl</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;UserDaoImpl Constructor...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过<code>BeanFactory</code>来加载配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BeanFactory</span> <span class="hljs-variable">bf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlBeanFactory</span>(resource);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307142059727.png" alt="image-20230714205912685" /></p><p>通过<code>ClassPathXmlApplicationContext</code>来加载配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307142104731.png" alt="image-20230714210451650" /></p><p>可以看到通过<code>BeanFactory</code>加载配置文件时<code>UserDaoImpl</code>的构造函数并未被执行,即bean并没有被初始化</p><p>而<code>ClassPathXmlApplicationContext</code>的方式却执行了<code>UserDaoImpl</code>的构造函数，说明被初始化了。</p><p>其实<code>BeanFactory</code>这种加载配置文件时，没有及时的初始化的方式，我们称为<strong>懒加载（lazy-init）</strong>。我们也可以指定<code>ClassPathXmlApplicationContext</code>进行懒加载。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.UserDaoImpl&quot;</span> <span class="hljs-attr">lazy-init</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>但<code>ClassPathXmlApplicationContext</code>方式只有单例模式会默认及时加载，非单例就不会及时加载了。这很好理解，你都不是单例模式了，我提前给创建对象干嘛，我又不知道你要创建多少个对象</strong></p><h4 id="核心容器总结"><a class="markdownIt-Anchor" href="#核心容器总结"></a> 核心容器总结</h4><p>核心容器相关知识有：容器相关、Bean相关、依赖注入相关。</p><h5 id="容器相关"><a class="markdownIt-Anchor" href="#容器相关"></a> 容器相关</h5><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307142110350.png" alt="image-20230714211032266" /></p><h5 id="bean相关"><a class="markdownIt-Anchor" href="#bean相关"></a> Bean相关</h5><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307142111726.png" alt="image-20230714211132645" /></p><h5 id="依赖注入相关"><a class="markdownIt-Anchor" href="#依赖注入相关"></a> 依赖注入相关</h5><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307142120966.png" alt="image-20230714212011861" /></p><p><strong>在我对前边的知识进行总结实践时，发现实例化bean时，若采用实现<code>FactoryBean</code>接口的方式的话，无论是单例模式，还是非单例都是懒加载，且配置文件指定<code>lazy-int=&quot;false&quot;</code>也不会起作用。你也可以测试一下</strong></p><h3 id="spring中的注解开发"><a class="markdownIt-Anchor" href="#spring中的注解开发"></a> spring中的注解开发</h3><h4 id="注解开发定义bean"><a class="markdownIt-Anchor" href="#注解开发定义bean"></a> 注解开发定义bean</h4><p>在类定义里，添加注解<code>@Component</code>，并在配置文件中开辟命名空间<code>context</code>（开辟命名空间同上边所讲加载properties所讲的方式一样），然后添加配置<code>&lt;context:component-scan base-package=&quot;org.example.dao.Impl&quot;/&gt;</code>,让配置文件去扫描bean对应类所在的包，具体如下：</p><p>这里先给出案例的项目结构</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307152158459.png" alt="image-20230715215759339" /></p><p>原来定义bean的方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.dao.Impl.BookDaoImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookDaoImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl constructor ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl print...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注解定义bean的方式,传入注解的参数同配置文件时的<code>id</code>属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;bookDao&quot;)</span><span class="hljs-comment">//id=&quot;bookDao&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookDaoImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl constructor ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl print...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example.dao.Impl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果你想扫描包的方式简单一点，可以这样做,包路径只给到<code>org.exmaple</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;bookDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者，省略参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果省略参数，那么获取bean时，用原来的方式就不行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span><br>    &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(<span class="hljs-string">&quot;bookDao&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307152204134.png" alt="image-20230715220424068" /></p><p>此时需要给<code>getBean()</code>方法传入类型才行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span><br>    &#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(BookDao.class);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307152207748.png" alt="image-20230715220704706" /></p><p>spring还贴心的为我们提供了三个<code>@Component</code>的衍生注解<code>@Controller</code>,<code>@Service</code>,<code>@Repository</code>.</p><ul><li><code>@Controller</code>，用于表现层bean定义</li><li><code>@Service</code>，用于业务层bean定义</li><li><code>@Repository</code>，用于数据层bean定义</li></ul><h4 id="纯注解开发"><a class="markdownIt-Anchor" href="#纯注解开发"></a> 纯注解开发</h4><ul><li>spring 3.0升级了纯注解的开发模式，使用Java类代替配置文件，开启了Spring快速开发赛道</li></ul><p>来看看纯注解开发具体怎么做：</p><ol><li><p>创建<code>config</code>包，创建<code>SpringConfig</code>类</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307152216225.png" alt="image-20230715221655173" /></p><ol start="2"><li><p>为创建的<code>SpringConfig</code>添<code>@Configuration</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就代替了配置文件的这堆东西</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>再添加<code>@ComponentScan</code>注解,参数为需要扫描的包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example&quot;)</span><span class="hljs-comment">//这里指定扫描的包</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就代替了这句配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;org.example&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>既然配置文件被代替了，那么加载配置文件多的方式肯定就不行了，那怎么做呢？这样做：使用注解对应的方法来加载，参数为刚才定义的配置类的字节码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br></code></pre></td></tr></table></figure><p>这里总结一下：</p><ul><li><p><code>@Configuration</code>注解用于设定当前类为配置类</p></li><li><p><code>@ComponentScan</code>注解用于设定扫描路径，此注解只能添加一次，多个数据请用数组格式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(&#123;&quot;xxx.xx.x&quot;,&quot;yyy.yy.y&quot;,&quot;zzz.zz.z&quot;&#125;)</span><br></code></pre></td></tr></table></figure></li><li><p>采用加载配置类代替加载配置文件</p></li></ul></li></ol></li></ol><h4 id="注解管理bean的作用范围以及生命周期"><a class="markdownIt-Anchor" href="#注解管理bean的作用范围以及生命周期"></a> 注解管理bean的作用范围以及生命周期</h4><p>**同样采用注解来管理bean也会涉及到bean的作用范围(singleton或者prototype)以及生命周期问题 **</p><ul><li><p>使用<code>@Scope</code>注解来管理作用范围，在具体bean对应的类上添加即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(&quot;singleton&quot;)</span><span class="hljs-comment">//单例模式</span><br><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><span class="hljs-comment">//非单例模</span><br></code></pre></td></tr></table></figure></li><li><p>生命周期，定义初始化函数与销毁函数，在初始化函数前添加<code>@PostConstruct</code>注解，在销毁函数前添加<code>@PreDestroy</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(&quot;singleton&quot;)</span><br> <span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookDaoImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl constructor ...&quot;</span>);<br>        &#125;<br>        <span class="hljs-meta">@PostConstruct</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;init ...&quot;</span>);<br>        &#125;<br>        <span class="hljs-meta">@PreDestroy</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy ...&quot;</span>);<br>        &#125;<br>    <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;BookDaoImpl print...&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>注意：你可能遇到找不到这个注解的问题。这是因为高版本的jdk已经没有携带<code>javax.annotation</code>这个包了，你可以回退jdk版本来解决，但是不建议这么做。通常的做法是添加依赖即可</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsr250-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>来看看测试效果</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span><br>    &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(BookDao.class);<br>    <span class="hljs-comment">//ctx.registerShutdownHook();//注册关闭钩子</span><br>        ctx.close();<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307161344237.png" alt="image-20230715225950646" /></p><p><strong>这里还有一个细节就是如果是非单例的，无论是<code>close</code>方法还是注册关闭钩子都不会执行<code>destroy</code>方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span><br>    &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">BookDao</span> <span class="hljs-variable">bookDao</span> <span class="hljs-operator">=</span> (BookDao) ctx.getBean(BookDao.class);<br>    <span class="hljs-comment">//ctx.registerShutdownHook();//注册关闭钩子</span><br>        ctx.close();<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307161346553.png" alt="image-20230715230202695" /></p></li></ul><h4 id="注解中的依赖注入"><a class="markdownIt-Anchor" href="#注解中的依赖注入"></a> 注解中的依赖注入</h4><p>先准备案例</p><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;org.example.dao&quot;,&quot;org.example.service&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>Dao层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookDaoImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl constructor ...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;init ...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy ...&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl print...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookServiceImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookServiceImpl constructor ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookDao</span><span class="hljs-params">(BookDao bookDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookDao = bookDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        bookDao.print();<br>        System.out.println(<span class="hljs-string">&quot;BookServiceImpl print ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span><br>    &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">BookService</span> <span class="hljs-variable">bookService</span> <span class="hljs-operator">=</span> ctx.getBean(BookService.class);<br>        bookService.print();<br>        <span class="hljs-comment">//ctx.close();</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>这时如果执行main方法，就会报错，因为依赖注入没有成功</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307152315348.png" alt="image-20230715231521299" /></p><ul><li>注解进行自动装配：<code>@Autowired</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookServiceImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookServiceImpl constructor ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBookDao</span><span class="hljs-params">(BookDao bookDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.bookDao = bookDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        bookDao.print();<br>        System.out.println(<span class="hljs-string">&quot;BookServiceImpl print ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再执行main方法就注入成功了</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307152318244.png" alt="image-20230715231828211" /></p><p>注解添加位置可以是待注入成员前，也可以是<code>setter</code>方法前。但如果没有提供<code>setter</code>方法就只能在待注入成员前了，不然注入失败。而且这是按类型装配的。按案例来讲如果<code>BookDao</code>有两个实现类，按前边讲的按类型自动装配我们就知道会报错了。</p><ul><li>解决方式一（不推荐），按名称注入：为<code>Respository</code>注解添加参数，参数值为带注入成员的名称</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository(&quot;bookDao&quot;)</span><br></code></pre></td></tr></table></figure><ul><li>解决方式二：使用<code>@Qualifier</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br><span class="hljs-meta">@Repository(&quot;bookDao1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookDaoImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl1 constructor ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br><span class="hljs-meta">@Repository(&quot;bookDao2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BookDaoImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookDaoImpl2 constructor ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;<br>        <span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(&quot;bookDao1&quot;)</span><br>    <span class="hljs-keyword">private</span> BookDao bookDao;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BookServiceImpl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;BookServiceImpl constructor ...&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时，<code>@Qualifier</code>注解相当于指定了bean的id。按上边样例来说，会按照<code>BookServiceImpl</code>来注入<code>bookDao</code>成员</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307152335070.png" alt="image-20230715233541014" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307152336194.png" alt="image-20230715233605143" /></p><p>上边是引用类型的注入，那简单类型的注入怎么做?很简单，使用<code>@Value</code>注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;hello world&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br></code></pre></td></tr></table></figure><p>此时<code>String</code>类型的成员<code>name</code>就会被注入成<code>hello world</code></p><p>此时你或许已经产生疑惑了，既然只是赋值，那为什么直接<code>private String name = &quot;hello world&quot;;</code>呢，还使用注解多麻烦。如果只是简单赋值，那使用注解确实是多次一举了。</p><p><strong>因此，之所以使用注解注入简单类型，是因为可以注入properties文件中这些外部的，变化的值</strong></p><ul><li>首先使用注解加载properties文件，在配置类中使用<code>@PropertySource</code>注解，加载多个文件就像下边注释一样</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(&quot;jdbc.properties&quot;)</span><br><span class="hljs-comment">//@PropertySource(&#123;&quot;jdbc1.properties&quot;,&quot;jdbc1.properties&quot;,&quot;jdbc1.properties&quot;&#125;)加载</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;org.example.dao&quot;,&quot;org.example.service&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>但注解不支持通配符<code>*.properties</code>，以及<code>classpath*:</code>也不支持。</p><p>支持<code>classpath:</code>来限定只加载当前工程中的properties文件</p><ul><li>然后同正常的方式一样，使用<code>$&#123;&#125;</code>即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;jdbc.name&#125;&quot;)</span><span class="hljs-comment">//假设jdbc.properties文件有个name属性</span><br></code></pre></td></tr></table></figure><h4 id="注解管理第三方bean"><a class="markdownIt-Anchor" href="#注解管理第三方bean"></a> 注解管理第三方bean</h4><p>先准备案例，仅一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在没了配置文件，所以要得到第三方对象，就得手写代码了</p><p>首先在配置类里边定义一个获取第三方对象的方法，名字叫做你要管理的bean，等同于bean的id。返回类型当然就是你要管理的第三方对象的类型，这里用Druid的<code>DataSource</code>类来举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>然后手写代码获取对象并返回即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.定义各一个方法获得要管理的对象</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;1923403646lxg..&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后这怎么就让它成为要管理的bean了呢？当然还不行，还得加上<code>@Bean</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2.添加@Bean注解表示当前返回值就是一个bean</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;1923403646lxg..&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br></code></pre></td></tr></table></figure><p>获取时，需要传入对应类型的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span><br>    &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span>  ctx.getBean(DataSource.class);<br>        System.out.println(dataSource);<br>    &#125;<br></code></pre></td></tr></table></figure><p>但是这样的所有的第三方配置都交给Spring配置类来管理，难免会显得臃肿，于是可以这样做：那jdbc举例</p><ul><li>定义JdbcConfig类，添加注解<code>@Configuration</code>，将刚才获取第三方对象的代码转移到JdbcConfig类里边。</li><li>要让spring识别刚才定义配置类，还需在spring配置类添加扫描包的注解<code>@ComponentScan</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example.config&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;1923403646lxg..&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种识别的方式不推荐，因为在spring配置类中不能直观的看出你导入了哪些配置，还有第二种识别的方式：添加<code>@Import</code>注解，同时<code>JdbcConfig</code>配置类的<code>@Configuration</code>注解就可以省略了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Import(&#123;JdbcConfig.class,xxx.class&#125;)</span><span class="hljs-comment">//同样支持数组传入，也支持单个参数传入</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;1923403646lxg..&quot;</span>);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样你就可以清除看到导入哪些管理第三方bean的配置.</p><p>这时眼睛雪亮的你又发现问题了，在创建第三方对象的方法里，有些值是写死的，难道不应该从某些properties文件读取吗？</p><p>的确是这样，所以解决方案是：对于简单数据类型，直接定义成员变量，添加<code>@Value</code>注解来读取properties文件的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-comment">//直接赋值</span><br>    <span class="hljs-meta">@Value(&quot;com.mysql.jdbc.Driver&quot;)</span><br>    <span class="hljs-keyword">private</span> String driverClassName;<br>    <span class="hljs-meta">@Value(&quot;jdbc:mysql://localhost:3306/db1&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;root&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;1923403646lxg..&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-built_in">this</span>.driverClassName);<br>        dataSource.setUrl(<span class="hljs-built_in">this</span>.url);<br>        dataSource.setUsername(<span class="hljs-built_in">this</span>.username);<br>        dataSource.setPassword(<span class="hljs-built_in">this</span>.password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者，读取properties文件</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307172119792.png" alt="image-20230717211932678" /></p><p>注意值不能包含引号，否则数据库连接或报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(&quot;jdbc.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driverClassName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.paasword&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-built_in">this</span>.driverClassName);<br>        dataSource.setUrl(<span class="hljs-built_in">this</span>.url);<br>        dataSource.setUsername(<span class="hljs-built_in">this</span>.username);<br>        dataSource.setPassword(<span class="hljs-built_in">this</span>.password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如果你创建第三方对象时需要一个引用类型的数据，那么就像下边这样做</strong></p><ul><li>给定义的获取方法添加对应引用类型形参，为配置类添加扫描包注解，扫描引用类型bean所在包</li><li>这个引用类型得为已经加载入容器得bean，不是得话，配置一下bean就行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(&quot;jdbc.properties&quot;)</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example.dao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driverClassName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.paasword&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">(BookDao bookDao)</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-built_in">this</span>.driverClassName);<br>        dataSource.setUrl(<span class="hljs-built_in">this</span>.url);<br>        dataSource.setUsername(<span class="hljs-built_in">this</span>.username);<br>        dataSource.setPassword(<span class="hljs-built_in">this</span>.password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个得原理就是自动装配，spring在读取配置类时发现方法有形参，他会以为形参是容器里已有得bean，然后在容器中寻找对应bean装配进去，没找到对应类型的bean就会报错，同时还需注意一些自动装配的细节，比如同类型bean唯一。</p><p>如果按名字装配，注解参数值不同即可。如BookDao有两实现类，则两实现类的注解应传入不同参数值来帮助配置类区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository(&quot;bookDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository(&quot;bookDao2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(&quot;jdbc.properties&quot;)</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example.dao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driverClassName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.paasword&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">(BookDao bookDao)</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-built_in">this</span>.driverClassName);<br>        dataSource.setUrl(<span class="hljs-built_in">this</span>.url);<br>        dataSource.setUsername(<span class="hljs-built_in">this</span>.username);<br>        dataSource.setPassword(<span class="hljs-built_in">this</span>.password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上边这种情况则没有问题，方法<code>dataSource</code>d的参数<code>bookDao</code>被自动装配成<code>BookDaoImpl</code>类型，这就相当于按名字装配了。</p><hr /><p>到这里spring中的注解管理bean就差不多了。</p><p><strong>总结：XML配置与注解配置的比较</strong></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307161508259.png" alt="image-20230716150811168" /></p><h3 id="整合数据层技术mybatis"><a class="markdownIt-Anchor" href="#整合数据层技术mybatis"></a> 整合数据层技术MyBatis</h3><h5 id="怎么做"><a class="markdownIt-Anchor" href="#怎么做"></a> 怎么做</h5><p>实际开发过程中，咱们的业务肯定不会唯一，所以MyBatis中操作数据库表的代码中设计到具体业务的部分，是随时可变的。而配置数据库信息，获取连接的部分是多半不会变的，因为你选好数据库后，不可能中途变卦吧。因此这里整合主要就是对MyBatis框架中连接数据库的操作进行整合。</p><p>MyBatis中是这样做的</p><ul><li><p>核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.example.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    environments：配置数据库连接环境信息。可以配置多个environment，通过default属性切换不同的environment</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--数据库连接信息--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///db1?allowPublicKeyRetrieval=true<span class="hljs-symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1923403646lxg..&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.example.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>获取数据库连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>      <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>      <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br><span class="hljs-comment">/*获取mapper</span><br><span class="hljs-comment">      BrandMapper userMapper = sqlSession.getMapper(BrandMapper.class);</span><br><span class="hljs-comment">      List&lt;Brand&gt; brands = userMapper.selectAll();</span><br><span class="hljs-comment">      System.out.println(brands);</span><br><span class="hljs-comment">*/</span><br>      sqlSession.close();<span class="hljs-comment">//释放资源</span><br></code></pre></td></tr></table></figure></li></ul><p>那spring怎么整合的呢？</p><ul><li><p>先导入一些需要的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--spring管理jdbc的包--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--druid数据库连接池--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mybatis的包--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--连接mysql需要的包--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mybatis实现spring接口的包，spring给出接口 标准，有别的框架给出实现，由此来整合别的框架--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里注意<code>mybatis-spring</code>包的版本受到<code>mybatis</code>版本的限制，随着<code>mybatis</code>版本升级，<code>mybatis-spring</code>可能也会跟着升级，导包时，要注意。</p></li></ul><p>将mybatis配置文件以及，SqlSessionFactory配置文件用以下方式代替</p><p><strong>数据库连接信息：</strong></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307172121377.png" alt="image-20230717212120327" /></p><p>这里由spring管理<code>dataSource</code>Bean代替</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307172123440.png" alt="image-20230717212350384" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@PropertySource(&#123;&quot;jdbc.properties&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driverClassName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(driverClassName);<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(username);<br>        dataSource.setPassword(password);<br>        System.out.println(driverClassName+<span class="hljs-string">&quot;+&quot;</span>+url+<span class="hljs-string">&quot;+&quot;</span>+username+<span class="hljs-string">&quot;+&quot;</span>+password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>SqlSessionFactory的获取交给spring:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>   <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>   <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307172131412.png" alt="image-20230717213128381" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307172131862.png" alt="image-20230717213142828" /></p><p>换为：创建<code>MybatisConfig</code>的配置类来管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example.config&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisConfig</span> &#123;<br>    <span class="hljs-meta">@Scope(&quot;singleton&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title function_">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="hljs-string">&quot;org.example.domain&quot;</span>);<br>        sqlSessionFactoryBean.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> sqlSessionFactoryBean;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MapperScannerConfigurer <span class="hljs-title function_">mapperScannerConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MapperScannerConfigurer</span> <span class="hljs-variable">mapperScannerConfigurer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperScannerConfigurer</span>();<br>        mapperScannerConfigurer.setBasePackage(<span class="hljs-string">&quot;org.example.dao&quot;</span>);<br>       <span class="hljs-comment">// System.out.println(&quot;-------!!!!!!!mybatisConfiguration&quot;);</span><br>        <span class="hljs-keyword">return</span> mapperScannerConfigurer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(&quot;singleton&quot;)</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title function_">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>    <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>    sqlSessionFactoryBean.setTypeAliasesPackage(<span class="hljs-string">&quot;org.example.domain&quot;</span>);<br>    sqlSessionFactoryBean.setDataSource(dataSource);<br>    <span class="hljs-keyword">return</span> sqlSessionFactoryBean;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码里的<code>sqlSessionFactoryBean.setTypeAliasesPackage(&quot;org.example.domain&quot;);</code>代替<code>mybatis-config.xml</code>里的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.example.domain&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>而代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> MapperScannerConfigurer <span class="hljs-title function_">mapperScannerConfigurer</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">MapperScannerConfigurer</span> <span class="hljs-variable">mapperScannerConfigurer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperScannerConfigurer</span>();<br>       mapperScannerConfigurer.setBasePackage(<span class="hljs-string">&quot;org.example.dao&quot;</span>);<br>       <span class="hljs-comment">//System.out.println(&quot;-------!!!!!!!mybatisConfiguration&quot;);</span><br>       <span class="hljs-keyword">return</span> mapperScannerConfigurer;<br>   &#125;<br></code></pre></td></tr></table></figure><p>代替：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--加载sql映射文件--&gt;</span><br>        <span class="hljs-comment">&lt;!--        &lt;mapper resource=&quot;cn/henu/ymxl/mapper/UserMapper.xml&quot;/&gt;--&gt;</span><br><br>        <span class="hljs-comment">&lt;!--Mapper代理方式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.example.dao&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>总结：创建配置类来代替配置mybatis的核心文件，所有对象的创建交给spring的容器管理，为需要手动创建的对象配置bean</strong></p><h5 id="下面给出案例的全部内容"><a class="markdownIt-Anchor" href="#下面给出案例的全部内容"></a> 下面给出案例的全部内容：</h5><p><strong>项目结构</strong></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307172145965.png" alt="image-20230717214529893" /></p><p><strong>日志工具配置文件：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%level]  %cyan([%thread]) %boldGreen(%logger&#123;15&#125;) - %msg %n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF</span><br><span class="hljs-comment">     ， 默认debug</span><br><span class="hljs-comment">      &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制。</span><br><span class="hljs-comment">      --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><code>pom.xml</code>项目依赖配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>spring-mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.apache.org<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsr250-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong><code>JdbcConfig</code>、<code>MyBatisConfig</code>、<code>SpringConfig</code>配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@PropertySource(&#123;&quot;jdbc.properties&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driverClassName;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(driverClassName);<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(username);<br>        dataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;<br><span class="hljs-keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Scope;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example.config&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisConfig</span> &#123;<br>    <span class="hljs-meta">@Scope(&quot;singleton&quot;)</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title function_">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="hljs-string">&quot;org.example.domain&quot;</span>);<br>        sqlSessionFactoryBean.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> sqlSessionFactoryBean;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MapperScannerConfigurer <span class="hljs-title function_">mapperScannerConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MapperScannerConfigurer</span> <span class="hljs-variable">mapperScannerConfigurer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperScannerConfigurer</span>();<br>        mapperScannerConfigurer.setBasePackage(<span class="hljs-string">&quot;org.example.dao&quot;</span>);<br>        <span class="hljs-keyword">return</span> mapperScannerConfigurer;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Import;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>DAO层、实体类(domain包下)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.dao;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><span class="hljs-keyword">import</span> org.example.domain.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-meta">@Repository(&quot;userDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Select(&quot;select * from tb_user&quot;)</span><br>    List&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.domain;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String username, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><strong>Service层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> org.example.domain.User;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.example.config.SpringConfig;<br><span class="hljs-keyword">import</span> org.example.dao.UserDao;<br><span class="hljs-keyword">import</span> org.example.domain.User;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-meta">@Service(&quot;userService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userDao.selectAll();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>main方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String[] args )</span> <span class="hljs-keyword">throws</span> SQLException, IOException &#123;<br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) ctx.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        List&lt;User&gt; users = userService.selectAll();<br>        System.out.println(users);<br><br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>测试结果</strong></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307172144125.png" alt="image-20230717214413051" /></p><h3 id="整合junit"><a class="markdownIt-Anchor" href="#整合junit"></a> 整合JUnit</h3><p>如果用IDEA创建Maven项目的话，会自动添加Junit的依赖，所以这里只需在此基础上添加spring整合Junit的依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>步骤：</strong></p><ul><li><p>指定<strong>测试类</strong>由spring类运行器运行：添加<code>@RunWith</code>注解，指定参数为<code>SpringJUnit4ClassRunner.class</code></p><p><em>注意这是在<strong>junit4</strong>之后才有的,<code>SpringJUnit4ClassRunner.class</code>在4.12或者更高版本才能支持,</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br></code></pre></td></tr></table></figure></li><li><p>添加<code>@ContextConfiguration</code>注解，让测试类能读取spring的配置类信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ContextConfiguration(classes = SpringConfig.class)</span><br></code></pre></td></tr></table></figure></li></ul><p>这样就是spring中使用JUnit的方式了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service;<br><br><span class="hljs-keyword">import</span> org.example.config.SpringConfig;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes = SpringConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试类中如果需要用到bean，用<code>@AutoWired</code>自动装配即可，其他均和正常使用JUnit一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service;<br><br><span class="hljs-keyword">import</span> org.example.config.SpringConfig;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes = SpringConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectAll</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(userService.selectAll());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="aop"><a class="markdownIt-Anchor" href="#aop"></a> AOP</h3><ul><li>AOP(Aspect Oriented Programming)面向切面编程，一种编程范式，指导开发者如何组织程序结构<ul><li>OOP(Object Oriented Programming)面向对象编程</li></ul></li><li>作用：在<strong>不惊动原始设计</strong>基础上为其进行功能<strong>增强</strong></li><li>Spring理念：无侵入式/无入侵式编程</li></ul><h4 id="aop核心概念"><a class="markdownIt-Anchor" href="#aop核心概念"></a> AOP核心概念</h4><p>这里并不完全，后面遇到新的概念再增加</p><ul><li>连接点（JoinPoint）:程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等<ul><li>在SpringAOP中，理解为方法的执行</li></ul></li><li>切入点（Pointcut）：匹配连接点的式子<ul><li>在SpringAOP中，一个切入点可以只描述一个具体方法，也可以匹配多个方法</li><li>匹配多个方法：所有的save方法，所有get开头的方法，所有以Dao结尾的接口中的任意方法，所有带有一个参数的方法</li></ul></li><li>通知（Advice）:在切入点处执行的操作，也是共性功能<ul><li>在SpringAOP中，功能最终以方法的形式呈现</li></ul></li><li>切面（Aspect）:描述通知与切入点的对应关系</li><li>通知类：定义通知的类</li></ul><p><em>可以这样理解连接点与切入点的关系：连接点是切入点的所有可能，切入点是“切入时”具体所指的连接点。“切入”操作可以理解为不改动原始代码情况增强功能的操作（也是上边提到的通知）。所有的连接点均是“切入”操作的一个可选项，但具体进行“切入”操作的连接点称为切入点。而切面就是描述这件事的：在哪些连接点（这些连接点即切入点）“切入”通知</em></p><p>下面通过一个案例来了解SpringAOP具体是怎么做的：</p><h4 id="aop入门案例"><a class="markdownIt-Anchor" href="#aop入门案例"></a> AOP入门案例</h4><p>案例设定：在接口执行前输出系统时间</p><p>步骤：</p><ol><li><p>导入坐标（pom.xml）</p><p>spring-aop的包在导入spring-context时会自动导入，因为它们有依赖关系。还需导入<code>aspectjweaver</code>的包,具体坐标可以到maven官网中找到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>制作连接点方法（原始操作，Dao接口与实现类，这些在具体开发时就是已开发的代码，咱们需要做的就是增强功能）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.dao.impl;<br><br><span class="hljs-keyword">import</span> org.example.dao.BookDao;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;bookDao save ...&quot;</span>);<br>        System.out.println(System.currentTimeMillis());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;bookDao update ...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>制作共性功能（通知类与通知）</p><p>新建aop包，创建MyAdvice类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.aop;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(System.currentTimeMillis());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>定义切入点</p><p>在通知类定义一个方法，为该方法加上<code>@Pointcut</code>注解，参数传入一个<code>execution(切入点返回值类型 包名.类名.方法名)</code>，告诉程序在执行到该切入点方法时，切入我们定义的共性方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.aop;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(void org.example.dao.BookDao.update())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodPointcut</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(System.currentTimeMillis());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>绑定切入点与通知的关系（切面）</p><p>在要切入的共性功能方法添加注解:<code>@Before</code>表示在切入点前执行该方法,参数为定义的切入点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.aop;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(void org.example.dao.BookDao.update())&quot;)</span><span class="hljs-comment">//定义切入点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodPointcut</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>    <span class="hljs-meta">@Before(&quot;methodPointcut()&quot;)</span><span class="hljs-comment">//切面</span><br>    <span class="hljs-comment">//需要切入的共性方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(System.currentTimeMillis());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这些定义完成后spring还不能识别这是和aop相关的，还需添加<code>@Component</code>注解将通知类交给spring管理、<code>@Aspe</code>注解告诉spring这是一个通知类。最后在SpringConfig配置类中添加<code>@EnableAspectJAutoProxy</code>注解，告诉spring，项目中含有注解开发的aop</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.aop;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(void org.example.dao.BookDao.update())&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodPointcut</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-meta">@Before(&quot;methodPointcut&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(System.currentTimeMillis());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;<br><br><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;org.example&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><em>注意：SpringConfig类中扫描包需要包含到aop的包，否则仍不识别</em></p></li></ol><h4 id="aop工作流程"><a class="markdownIt-Anchor" href="#aop工作流程"></a> AOP工作流程</h4><ol><li>Spring容器启动</li><li>读取所有切面配置中的切入点：注意只会读取切面配置中的切入点，未进行切面配置的切入点并不会读取</li><li>初始化bean，bean对应的类中的方法是否匹配到切入点<ul><li>匹配失败，创建对象</li><li>匹配成功，创建原始对象（<strong>目标对象</strong>）的<strong>代理</strong>对象</li></ul></li><li>获取bean执行方法<ul><li>获取bean，调用方法并执行，完成操作</li><li>获取bean是代理对象时，根据代理对象的运行模式运行原始方法与增强的内容，完成操作</li></ul></li></ol><h4 id="aop核心概念新增"><a class="markdownIt-Anchor" href="#aop核心概念新增"></a> AOP核心概念（新增）</h4><ul><li>目标对象（Target）：原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的</li><li>代理（Proxy）:目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现</li></ul><p><em>整个aop的工作就是通过代理模式来完成的，即aop的本质是代理模式</em></p><h4 id="aop切入点表达式"><a class="markdownIt-Anchor" href="#aop切入点表达式"></a> AOP切入点表达式</h4><ul><li>切入点：要进行增强的方法</li><li>切入点表达式：要进行增强的方法描述方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>&#125;<br>---------------------------------------分割线---------------------------------------------------<br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(System.currentTimeMillis());<br>        System.out.println(<span class="hljs-string">&quot;bookDao save ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;bookDao update ...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>描述方式一：执行org.example.dao包下的BookDao接口中的无参数的update方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(<span class="hljs-keyword">void</span> org.example.dao.BookDao.update())<br></code></pre></td></tr></table></figure><p>描述方式二：执行org.example.dao.impl包下的BookDaoImpl类中的无参数的update方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(<span class="hljs-keyword">void</span> org.example.dao.impl.BookDaoImpl.update())<br></code></pre></td></tr></table></figure><h5 id="语法格式"><a class="markdownIt-Anchor" href="#语法格式"></a> 语法格式</h5><ul><li>切入点表达式标准格式：动作关键字（ 访问修饰符   返回值   包名.类/接口名.方法名( 参数 )  异常名 ）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(<span class="hljs-keyword">public</span> Book org.example.dao.BookDao.selectById(<span class="hljs-type">int</span>))<br></code></pre></td></tr></table></figure><ul><li>动作关键字：描述切入点的行为动作，例如<code>execution</code>表示执行到指定切入点</li><li>访问修饰符：public，private等，可以省略</li><li>返回值：返回值类型</li><li>包名</li><li>类/接口名</li><li>方法名</li><li>参数：参数类型</li><li>异常名：方法定义中抛出的异常，可以省略</li></ul><h5 id="通配符"><a class="markdownIt-Anchor" href="#通配符"></a> 通配符</h5><ul><li><p>可以使用通配符描述切入点，快速描述</p><p><strong><code>*</code>：单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现，匹配单项</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(<span class="hljs-keyword">public</span> * org.example.*.BookDao.selectBy*(*))<span class="hljs-comment">//返回值、包名、方法名、参数均可有通配符去匹配</span><br></code></pre></td></tr></table></figure><p>匹配org.example包下的任意包中的UserService类或接口中所有find开头的带有一参数的方法</p><p><strong><code>..</code>：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写，匹配多项</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(<span class="hljs-keyword">public</span> Book org..BookDao.selectById(..))<br></code></pre></td></tr></table></figure><p>匹配org包下的任意包中的BookDao类或接口中所有名称为findById的方法</p><p><strong><code>+</code>：专用于匹配子类类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(*  *..*Dao+.*(..))<br></code></pre></td></tr></table></figure><p>匹配项目中所有包中带有后缀Dao的类/接口的子类或者子接口中任意方法，不限定返回值、以及参数类型等。</p><p><em>tips1:匹配任意参数时，<code>*</code>匹配方法的一个参数；<code>..</code>则可以匹配参数任意的方法，包括无参</em></p><p><em>tips2:修饰符的匹配项一般省略，因为你要调用的方法基本都是public（除非某个类里在自己的公有方法里边调用自定义私有方法）但这种情况少之又少，而且对于私有的方法，代理根本就操作不了</em></p></li></ul><h5 id="书写技巧"><a class="markdownIt-Anchor" href="#书写技巧"></a> 书写技巧</h5><ul><li>所有代码按标准规范开发，否则以下技巧全部失效</li><li>描述切入点<strong>通常描述接口</strong>，而不是描述实现类</li><li>访问控制修饰符针对接口开发均采用public描述（可省略访问控制修饰符描述）</li><li>返回值类型对于<strong>增删改类方法</strong>使用<strong>精准类型</strong>加速匹配，对于<strong>查询类方法</strong>使用<code>*</code><strong>通配符</strong>快速描述</li><li><strong>包名</strong>书写<strong>尽量不使用<code>..</code>匹配</strong>，效率过低，常用<code>*</code>做单个包描述匹配，或精准匹配</li><li><strong>接口名/类名</strong>书写名称与模块相关的均<strong>采用<code>*</code>匹配</strong>，例如：BookService书写成*Service，绑定业务层接口名</li><li><strong>方法名</strong>书写以<strong>动词</strong>进行<strong>精准匹配</strong>，名词采用**<code>*</code>匹配**，例如：getById书写成getBy*(get为动词，Id为名词),selectAll书写成selectAll</li><li>参数规则较为复杂，根据业务方法灵活调整</li><li>通常<strong>不使用异常作为匹配规则</strong></li></ul><h4 id="aop通知类型"><a class="markdownIt-Anchor" href="#aop通知类型"></a> AOP通知类型</h4><ul><li><p>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置</p></li><li><p>AOP通知共分为5种类型</p><ul><li><p>前置通知：<code>@Before</code>，在切入点前执行</p></li><li><p>后置通知：<code>@After</code>，在切入点后执行</p></li><li><p>环绕通知（重点）：<code>@Around</code>，在切入点前后都执行</p><p>这时现需要说明，哪些代码是在切入点前执行哪些在之后执行.给通知方法添加<code>ProceedingJoinPoint</code>类型参数</p><p>并在指定位置执行 参数的<code>proceed()</code>方法，这个方法会指定抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(int org.example.BookDao.select())&quot;)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br>  <br>   <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>       System.out.println(<span class="hljs-string">&quot;before ...&quot;</span>);<br>       <span class="hljs-comment">//指定切入点的执行位置</span><br>       <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> proceedingJoinPoint.proceed();<br>       System.out.println(<span class="hljs-string">&quot;after ...&quot;</span>);<br>       <span class="hljs-keyword">return</span> proceed;<br>   &#125;<br></code></pre></td></tr></table></figure><p>注意如果原始切入点方法有返回值，那么由<code>proceedingJoinPoint.proceed()</code>执行后需要将返回值返回出去，否则这里执行后得到的返回值，就在通知方法被拦截了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* *..*Dao.*(*,*))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br>   <br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;before ...&quot;</span>);<br>        <span class="hljs-comment">//指定切入点的执行位置</span><br>        proceedingJoinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;after ...&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>返回后通知：<code>@AfterReturning </code>在原始方法成功执行后，执行通知方法。和后置通知有区别。后置通知，不论原始方法是否成功都会执行，这个不会。</p></li><li><p>抛出异常后通知：<code>@AfterThrowing</code>只有抛出异常才会运行</p></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307191738319.png" alt="image-20230719173812174" /></p><ul><li><p><code>ProceedingJoinPoint</code>的<code>getSnigature</code>获得<code>Snigature</code>对象，这个类封装了本次执行的所有信息。其中<code>Snigature</code>的<code>getDeclaringType()</code>方法可获得本次执行方法的原来属于哪个类，<code>getName()</code>获得该原始方法的名称。</p><ul><li><p>例如：我通过aop为UserService类中的selectAll方法做增强，采用环绕通知的方式，那么通过上述的<code>getDeclaringType()</code>得到UserService的<code>Class</code>对象，控制台打印就是<code>&quot;Interface org.example.Service.UserService&quot;</code>，通过<code>getName()</code>得到字符串<code>&quot;selectAll&quot;</code>。</p></li><li><p>注意：aop使用过动态代理来进行的，而动态代理对象只会接管对应接口的方法，而对于实现类来讲，它们唯一的共同点在于接口部分，所以这里获取bean时不能用实现类。不然环绕通知的代理对象无法接收一个实现类，就会有如下报错</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">class com.sun.proxy.$Proxy20 cannot be cast to class org.example.dao.impl.UserDaoImpl (com.sun.proxy.$Proxy20 and org.example.dao.impl.UserDaoImpl are in unnamed module of loader &#x27;app&#x27;)<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="aop通知获取数据"><a class="markdownIt-Anchor" href="#aop通知获取数据"></a> AOP通知获取数据</h4><ul><li><p>获取切入点方法的参数</p><ul><li><p><code>JoinPonit</code>：适用于前置、后置、返回后、抛出异常后通知</p></li><li><p><code>ProceedingJoinPoint</code>：适用于环绕通知</p><p>这样我们就可以将数据处理一下，再去执行<code>proceed()</code>方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* org.example.dao.impl.UserDaoImpl.print(..))&quot;)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">servicePt</span><span class="hljs-params">()</span>&#123;&#125;<br>  <br>   <span class="hljs-meta">@Around(&quot;MyAdvice.servicePt()&quot;)</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getArgs</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>       Object[] args = pjp.getArgs();<br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * do something ...</span><br><span class="hljs-comment">        */</span><br>       <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> pjp.proceed(args);<br>       <span class="hljs-keyword">return</span> ret;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>获取切入点方法返回值</p><ul><li><p>返回后通知，通过<code>@Afterreturning</code>注解的参数<code>returning</code>指定传入的返回值参数名，必须和参数名一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* org.example.dao.impl.UserDaoImpl.print(..))&quot;)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">servicePta</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>   <span class="hljs-meta">@AfterReturning(value = &quot;MyAdvice.servicePta()&quot;,returning = &quot;ret&quot;)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getReturning</span><span class="hljs-params">(JoinPoint jp,Object ret)</span>&#123;<br><span class="hljs-comment">//如果你同时需要这两参数的话，JoinPoint必须在前</span><br>       <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * do something ...</span><br><span class="hljs-comment">        */</span><br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>环绕通知</p><p>前面有讲过，<code>proceed</code>方法可以直接获取</p></li></ul></li><li><p>获取切入点方法运行异常信息</p><ul><li><p>抛出异常后通知，通过<code>@AfterThrowing</code>注解的参数<code>throwing</code>指定对应参数名，必须和参数名一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* org.example.dao.impl.UserDaoImpl.print(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">servicePtTh</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;MyAdvice.servicePtTh()&quot;,throwing = &quot;exception&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrow</span><span class="hljs-params">(Throwable exception)</span>&#123;<br>        <span class="hljs-comment">//通过形参来接收异常，然后处理就行</span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * do something ...</span><br><span class="hljs-comment">         */</span><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>环绕通知</p><p>通过<code>try...catch</code>的方式得到异常就可以处理了</p></li></ul></li></ul><h3 id="spring事务"><a class="markdownIt-Anchor" href="#spring事务"></a> Spring事务</h3><h4 id="事务"><a class="markdownIt-Anchor" href="#事务"></a> 事务</h4><p><em>其实在学习数据库操作（比如：JDBC）的时候已经了解过事务。</em></p><ul><li>事务作用：在数据层保障一系列的数据库操作同成功或同失败。</li><li>Spring事务作用：在数据层或<strong>业务层</strong>保障一系列操作同成功或者同失败</li></ul><h5 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h5><ol><li><p>在你想要开启事务的方法前面添加注解<code>@Transactional</code>，标准写方法一般写在接口里面，这样所有实现类都能实现开启事务的功能</p><p><em><code>@Transactional</code>注解既可添加在具体方法上，也可添加在接口或者实现类上，写在类上就是为所有方法开启事务</em></p></li><li><p>spring依然采取jdbc的事务管理器，因此我们还需要在JdbcConfig里边添加一个事务管理器，并将它交给spring容器管理</p><p>spring-jdbc提供了一个<code>PlatformTransactionManager</code>接口，和它的实现类<code>DataSourceTransactionManager</code>，顾名思义这个实现类需要一个<code>DataSource</code>，因为我们定义bean时，还要传入一个<code>DataSource</code>参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> PlatformTransactionManager <span class="hljs-title function_">transactionManager</span><span class="hljs-params">(DataSource source)</span>&#123;<br>    <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">transactionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>    transactionManager.setDataSource(source);<br>    <span class="hljs-keyword">return</span> transactionManager;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>让spring知道我们使用的是注解的方式管理事务：在SpringConfig配置类里边添加<code>@EnableTransactionManagement</code>注解</p></li></ol><h5 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h5><ul><li>银行账户转账</li></ul><ol><li>先准备一张数据库表<code>tb_account</code></li></ol><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307222105832.png" alt="image-20230722210550713" /></p><ol start="2"><li><p>采用Mybatis操作dao层，写好JdbcConfig、MyBatisConfig、SpringConfig配置类，准备好jdbc.properties数据库配置文件</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307222108695.png" alt="image-20230722210853660" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;<br><span class="hljs-keyword">import</span> org.springframework.transaction.PlatformTransactionManager;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> javax.xml.crypto.Data;<br><span class="hljs-keyword">import</span> java.lang.management.PlatformLoggingMXBean;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@PropertySource(&quot;jdbc.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(driver);<br>        dataSource.setUrl(url);<br>        dataSource.setUsername(username);<br>        dataSource.setPassword(password);<br>        System.out.println(driver + <span class="hljs-string">&quot;:&quot;</span> + url + <span class="hljs-string">&quot;:&quot;</span> + username + <span class="hljs-string">&quot;:&quot;</span> + password);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PlatformTransactionManager <span class="hljs-title function_">transactionManager</span><span class="hljs-params">(DataSource source)</span>&#123;<br>        <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">transactionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>        transactionManager.setDataSource(source);<br>        <span class="hljs-keyword">return</span> transactionManager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;<br><span class="hljs-keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Scope;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example.config&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Scope(&quot;singleton&quot;)</span><br>    <span class="hljs-keyword">public</span> SqlSessionFactoryBean <span class="hljs-title function_">sqlSessionFactory</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>        <span class="hljs-type">SqlSessionFactoryBean</span> <span class="hljs-variable">sqlSessionFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBean</span>();<br>        sqlSessionFactoryBean.setDataSource(dataSource);<br>        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="hljs-string">&quot;org.example.domain&quot;</span>);<br>        <span class="hljs-keyword">return</span> sqlSessionFactoryBean;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MapperScannerConfigurer <span class="hljs-title function_">mapperScannerConfigurer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MapperScannerConfigurer</span> <span class="hljs-variable">mapperScannerConfigurer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperScannerConfigurer</span>();<br>        mapperScannerConfigurer.setBasePackage(<span class="hljs-string">&quot;org.example.dao&quot;</span>);<br>        <span class="hljs-keyword">return</span> mapperScannerConfigurer;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;org.example&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>AccountDao提供转入和转出两个方法，AccountService提供转账方法：调用AccountDao的转入和转出方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.dao;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Update;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository(&quot;accountDao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountDao</span> &#123;<br>    <span class="hljs-meta">@Update(&quot;update tb_account set money = money + #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">inMoney</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name,<span class="hljs-meta">@Param(&quot;money&quot;)</span> <span class="hljs-type">int</span> money)</span>;<br>    <span class="hljs-meta">@Update(&quot;update tb_account set money = money - #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">outMoney</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name,<span class="hljs-meta">@Param(&quot;money&quot;)</span> <span class="hljs-type">int</span> money)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service;<br><br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountService</span> &#123;<br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String out,String in,<span class="hljs-type">int</span> money)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service.impl;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.ResultMap;<br><span class="hljs-keyword">import</span> org.example.dao.AccountDao;<br><span class="hljs-keyword">import</span> org.example.service.AccountService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-meta">@Service(&quot;accountService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccountService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountDao accountDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String out, String in, <span class="hljs-type">int</span> money)</span> &#123;<br>        accountDao.outMoney(out,money);<br>        <span class="hljs-comment">//int t = 1 / 0;手动造异常</span><br>        accountDao.inMoney(in,money);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>通过测试类进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.example.config.SpringConfig;<br><span class="hljs-keyword">import</span> org.example.service.AccountService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.test.context.ContextConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(classes = SpringConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountServiceTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTransfer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        accountService.transfer(<span class="hljs-string">&quot;Jony&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>开启事务后，等抛出异常，数据无变化，测试成功</p></li></ol><h4 id="spring事务角色"><a class="markdownIt-Anchor" href="#spring事务角色"></a> Spring事务角色</h4><ul><li>事务管理员：发起事务方，在Spring中通常指代业务层开启事务的方法</li><li>事务协调员：加入事务方，在Spring中通常指代数据层方法，也可以是业务层方法</li></ul><p>刚才的案例中，我们的<code>transfer</code>方法调用了<code>inMoney</code>，<code>outMoney</code>方法，它们都单独的开启了事务（这很好理解，因为它们会自己分别建立一个连接）。既然是不同的事务，又怎么做到统一的呢。这就是Spring事务的机制了，可以这样理解：我们添加的注解<code>@Transactional</code>会在方法执行时，开启Spring的事务，然后将<code>inMoney</code>和<code>outMoney</code>单独开启的事务，归并自己的事务中，这样它们就同属于一个事务了。但是为了区分，我们称Spring的事务为<strong>事务管理员</strong>，将两外两个事务称为<strong>事务协调员</strong></p><p>另外需要注意一个关键点：<code>SqlSessionFactory</code>注入的<code>DataSource</code>需要和事务管理器注入的<code>DataSource</code>是同一种类型。</p><h4 id="事务配置"><a class="markdownIt-Anchor" href="#事务配置"></a> 事务配置</h4><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307222124947.png" alt="image-20230722212436855" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(readOnly = true,timeout = -1)</span><br></code></pre></td></tr></table></figure><p>某些异常的抛出，事务是不会回滚的，这时就需要手动设定了。默认回滚的异常有两类：error类（除以0、内存溢出等系统异常）；运行时异常（空指针异常）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(roolBackFor = IOException.class)</span><br></code></pre></td></tr></table></figure><h4 id="事务的传播行为"><a class="markdownIt-Anchor" href="#事务的传播行为"></a> 事务的传播行为</h4><ul><li>事务传播行为：事务协调员对事物管理员所携带事务的处理态度，通过<code>@Transactional</code>注解的<code>propagation</code>参数进行管理</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307222154469.png" alt="image-20230722215404393" /></p><p>比如：为刚才转账功能添加一个日志功能，无论转账是否成功都要记录日志。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> LogService&#123;<br>    <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//do log</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(String out, String in, <span class="hljs-type">int</span> money)</span> &#123;<br>       <span class="hljs-keyword">try</span>&#123;<br>            accountDao.outMoney(out,money);<br>        <span class="hljs-comment">//int t = 1 / 0;</span><br>        accountDao.inMoney(in,money);<br>       &#125;<span class="hljs-keyword">finally</span>&#123;<br>           logService.log();<br>       &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过设置log方法的事务传播行为，让transfer方法开启事务时，log方法单独开启事务</p><h3 id="springmvc"><a class="markdownIt-Anchor" href="#springmvc"></a> SpringMVC</h3><h4 id="springmvc概述"><a class="markdownIt-Anchor" href="#springmvc概述"></a> SpringMVC概述</h4><ul><li>SpringMVC技术与Servlet技术功能等同，均属于web层开发技术</li><li>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架</li><li>优点<ul><li>使用简单</li><li>灵活性强</li></ul></li></ul><h5 id="springmvc坐标"><a class="markdownIt-Anchor" href="#springmvc坐标"></a> SpringMVC坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-comment">&lt;!--可能会和tomcat插件冲突，所以范围限定为provided--&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="创建springmvc控制器类作用等同于servlet"><a class="markdownIt-Anchor" href="#创建springmvc控制器类作用等同于servlet"></a> 创建SpringMVC控制器类（作用等同于Servlet）</h5><p><code>@Controller</code>注解告诉spring这个类是一个控制器，<code>@RequestMapping</code>注解来指定请求路径（等同于Servlet路径）,<code>@ResponseBody</code>告诉spring该方法是一个处理请求和进行响应的方法，等同于Servlet的doGet或者doPost。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/print&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;springmvc&#x27;:&#x27;print&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="初始化springmvc环境同spring环境设定springmvc加载对应的bean"><a class="markdownIt-Anchor" href="#初始化springmvc环境同spring环境设定springmvc加载对应的bean"></a> 初始化SpringMVC环境（同Spring环境），设定SpringMVC加载对应的bean</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;org.example&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMvcConfig</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="初始化servlet容器加载springmvc环境并设置springmvc技术处理请求"><a class="markdownIt-Anchor" href="#初始化servlet容器加载springmvc环境并设置springmvc技术处理请求"></a> 初始化Servlet容器，加载SpringMVC环境，并设置SpringMVC技术处理请求</h5><p>创建Servlet容器配置类，并继承<code>AbstractDispatcherServletInitializer</code>这个抽象类或者它的子类<code>AbstractDispatcherServletInitializer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.AbstractDispatcherServletInitializer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletContainerInitConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createServletApplicationContext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AnnotationConfigWebApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigWebApplicationContext</span>();<br>        ctx.register(SpringMvcConfig.class);<br>        <span class="hljs-keyword">return</span> ctx;<span class="hljs-comment">//SpringMvc环境</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createRootApplicationContext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AnnotationConfigWebApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigWebApplicationContext</span>();<br>        ctx.register(SpringConfig.class);<br>        <span class="hljs-keyword">return</span> ctx;<span class="hljs-comment">//Spring环境</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>首先重写<code>protected WebApplicationContext createServletApplicationContext()</code>这个方法，加载SpringMVC配置类</li><li>重写<code>protected String[] getServletMappings()</code>，告诉springMVC哪些请求交给SpringMVC处理，一般配<code>&quot;/&quot;</code>将所有请求拦截，交给SpringMVC处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationDispatcherServletInitializer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletContainerInitConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationDispatcherServletInitializer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    protetcted Class&lt;?&gt;[] getRootConfigClasses()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    protetcted Class&lt;?&gt;[] getRootConfigClasses()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307251037165.png" alt="image-20230725103738024" /></p><p><strong>SpringMVC加载与controller相关的bean；Spring则无需管理这些bean.则需让Spring排除管理这些bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ComponentScan(value=&quot;org.example&quot;,</span><br><span class="hljs-meta">      excludeFilter=@ComponentScan.Filter(</span><br><span class="hljs-meta">      type = FilterType.ANNOTATION,</span><br><span class="hljs-meta">      classes = Controller.class</span><br><span class="hljs-meta">      )</span><br><span class="hljs-meta">     )</span><br></code></pre></td></tr></table></figure><p>或者用精确扫描需要的bean的包</p><ul><li><p>若要使用类似<code>jdbc.properties</code>的资源文件，导入资源文件的路径最好写上前缀<code>classpath</code>,让tomcat在项目里找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="postman工具介绍"><a class="markdownIt-Anchor" href="#postman工具介绍"></a> PostMan工具介绍</h5><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307251101313.png" alt="image-20230725110100259" /></p><h4 id="请求与响应"><a class="markdownIt-Anchor" href="#请求与响应"></a> 请求与响应</h4><h5 id="请求路径的设置"><a class="markdownIt-Anchor" href="#请求路径的设置"></a> 请求路径的设置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">import</span> org.example.domain.User;<br><span class="hljs-keyword">import</span> org.example.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><span class="hljs-comment">//为该控制器所有方法添加前置路径</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@RequestMapping(&quot;/seletAll&quot;)</span><span class="hljs-comment">//具体方法的路径，对应一个具体的Servlet</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seletAll</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; users = userService.selectAll();<br>        System.out.println(users);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307251815610.png" alt="image-20230725181542478" /></p><h5 id="请求参数的获取与响应数据的设置"><a class="markdownIt-Anchor" href="#请求参数的获取与响应数据的设置"></a> 请求参数的获取与响应数据的设置</h5><p><em>用工具模拟发送请求</em></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307260300151.png" alt="image-20230726030046110" /></p><ul><li><p>请求参数获取：</p><ul><li><p>常见的是给处理请求的方法添加和请求参数value同类型的形参，还有以下扩展方式：</p><ol><li><p>形参名为请求参数名；每个请求参数，对应一个形参;</p></li><li><p>或者使用<code>@RequestParam</code>注解指定哪个形参接收哪个请求参数；</p></li><li><p>用实体对象；</p></li><li><p>数组；</p></li><li><p>集合；</p></li></ol><p>GET:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">http://localhost:8080/SpringMvc-requesrt-response/user/selectAll?name=zhangsan&amp;age=18<br></code></pre></td></tr></table></figure><p>POST:同理，形参对应请求体参数</p><ul><li>直接对应请求参数key：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@RequestMapping(&quot;/selectAll&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectAll</span><span class="hljs-params">(String name,String age)</span>&#123;<br>        <span class="hljs-comment">//这里得到的name值为zhangsan,age值为18</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用<code>@RequestParam</code>注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br>    <span class="hljs-meta">@RequestMapping(&quot;/selectAll&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectAll</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name,<span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> String age)</span>&#123;<br>        <span class="hljs-comment">//这里得到的name值为zhangsan,age值为18</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>实体对象：属性名和请求参数key一样</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/selectById&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectById</span><span class="hljs-params">(User user)</span>&#123;<br>       <span class="hljs-comment">//List&lt;User&gt; users = userService.selectById(user.getId());</span><br>       System.out.println(user);<br>   &#125;<br></code></pre></td></tr></table></figure><p>如果实体对象有引用类型的属性，则在发送请求时需要写具体的引用属性名，然后用成员访问符<code>.</code>连接引用属性的属性</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> Address address;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span>&#123;<br>    <span class="hljs-keyword">private</span> String country;<br>    <span class="hljs-keyword">private</span> String province;<br>    <span class="hljs-keyword">private</span> String city;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307260251662.png" alt="image-20230726025132534" /></p><p>发送请求则需像上图这样写请求参数的key</p><ul><li>接收数组请求参数：请求参数的key全写成形参名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/selectById&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectById</span><span class="hljs-params">(<span class="hljs-type">int</span>[] ids)</span>&#123;<br>       <span class="hljs-comment">//List&lt;User&gt; users = userService.selectById(user.getId());</span><br>       System.out.println(ids);<br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307260302956.png" alt="image-20230726030243902" /></p><ul><li>集合：和数组不一样的是需要添加一个<code>@RequestParam</code>注解，否则集合形参会被作为引用类型处理而报错</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/selectById&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;<span class="hljs-type">int</span>&gt; ids)</span>&#123;<br>       <span class="hljs-comment">//List&lt;User&gt; users = userService.selectById(user.getId());</span><br>       System.out.println(ids);<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>处理中文字符</p><p>POST请求：设置过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>();<br>        filter.setEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;filter&#125;;<br>    &#125;<br></code></pre></td></tr></table></figure><p>GET请求：参考Servlet处理方式</p></li></ul></li></ul><h6 id="请求与响应中json数据的传递"><a class="markdownIt-Anchor" href="#请求与响应中json数据的传递"></a> 请求与响应中Json数据的传递</h6><p>SpringMvc默认使用jackson解析json,因此需要添加相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>json数组</li><li>json对象</li><li>json对象数组</li></ul><p>首先要让形参自动将json数据转换为对象，需要到SpringMvc配置类添加注解<code>@EnableWebMvc</code></p><p>json数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/listJsonParam&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listJsonParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span>  List&lt;String&gt; list)</span>&#123;<span class="hljs-comment">//json携带在请求体中，需用@RequestBody注解</span><br><br>   &#125;<br></code></pre></td></tr></table></figure><p>json对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/listJsonParamPojo&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listJsonParamPojo</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span>  List&lt;String&gt; list)</span>&#123;<br><br>   &#125;<br></code></pre></td></tr></table></figure><p>json对象数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jsonParamPojoList&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jsonParamPojoList</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span>  List&lt;User&gt; users)</span>&#123;<br><br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307260325225.png" alt="image-20230726032551160" /></p><ul><li><p>日期型数据的字符串可以由<code>Date</code>对象接收。但日期字符串格式要在接收时，需要给Date形参执行日期i形式,通过<code>@DateTimeFormat</code>注解去做。其中<code>yyyy/mm/dd</code>形式的可以默认接收，即不需要注解去指定，也可以成功转换成Date对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/dateData&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dataDate</span><span class="hljs-params">(<span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-mm-dd&quot;)</span> Date date1,<span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy/mm/dd&quot;)</span> Date date2)</span>&#123;<br>       System.out.println(date1);<br>       System.out.println(date2);<br>   &#125;<br></code></pre></td></tr></table></figure><p>也可以精确到时分秒：<code>yyyy/mm/dd hh:mm:ss</code>、<code>yyyy-mm-dd hh:mm:ss</code>,若请求参数没有时分秒则默认为<code>00:00:00</code>,且形式字符串不能含有时分秒否则报错。</p><ul><li><p>这种类型自动转换，是通过类型转换器做到的。有一个<code>Convert</code>接口，它有非常丰富的实现类提供了大量的类型转换的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Convert</span>&lt;S,T&gt;&#123;<br>    <span class="hljs-meta">@Nullable</span><br>    T <span class="hljs-title function_">convert</span><span class="hljs-params">(S var1)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>年龄：String →Integer</li><li>日期：String→Date</li></ul></li><li><p>一些数据会有默认的转换规则，若开发时发现不能进行默认转换，则可以通过<code>EnableWebMvc</code>开启</p></li></ul></li></ul><h5 id="响应"><a class="markdownIt-Anchor" href="#响应"></a> 响应</h5><ul><li><p>响应页面</p><ul><li><p>方法返回一个<code>String</code>类型数据，值为页面名称，此时不能要<code>@ResponseBody</code>，否则会被当做json字符串处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jumpToPage&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">jumpToPage</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;页面跳转&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>响应数据</p><ul><li><p>文本数据：必须要<code>@ResponseBody</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/toText&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toText</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;返回字符串&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;i love you&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>json数据</p><ul><li>响应一个pojo对象，直接返回一个pojo对象，必须要<code>@ResponseBody</code>，才会被解析成json</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/toPojo&quot;)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> User <span class="hljs-title function_">toPojo</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;返回Pojo&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>返回Pojo集合：同上，<code>@ResponseBody</code>然后直接返回一个对象集合</li></ul></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307261423333.png" alt="image-20230726142122157" /></p></li></ul><p>有关json数据的自动转换都是依赖于<code>jackson</code>库完成的。因此添加了<code>jackson</code>依赖上述操作才会生效</p><h5 id="过滤器"><a class="markdownIt-Anchor" href="#过滤器"></a> 过滤器</h5><p>重写<code>SpringMvcConfig</code>配置类的<code>getServletFilters()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>       <span class="hljs-type">XxxFilter</span> <span class="hljs-variable">xxxFilter1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XxxFilter</span>;        <br>       <span class="hljs-type">XxxFilter</span> <span class="hljs-variable">xxxFilter2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XxxFilter</span>;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;xxxFilter1,xxxFilter2&#125;;<br>   &#125;<span class="hljs-comment">//和SpringMvc其他配置类类似,返回一个数组，要什么给什么就行</span><br></code></pre></td></tr></table></figure><h4 id="rest风格"><a class="markdownIt-Anchor" href="#rest风格"></a> REST风格</h4><h5 id="rest简介"><a class="markdownIt-Anchor" href="#rest简介"></a> REST简介</h5><ul><li><p><strong>REST(Representational State Transfer)</strong>，表现形式状态转换。简单说就是访问网络的格式</p><ul><li><p>传统风格的资源描述形式</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/user/selectById?id=1<br>http://localhost/user/selectAll<br></code></pre></td></tr></table></figure></li><li><p>REST风格描述形式</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/user/1<br>http://localhost/user<br></code></pre></td></tr></table></figure></li></ul></li><li><p>优点：</p><ul><li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li><li>书写简化</li></ul></li><li><p>按照REST风格访问资源时使用<strong>行为动作</strong>区分对资源进行了何种操作</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/users查询全部用户信息GET(查询)<br>http://localhost/users/1查询指定用户信息GET(查询)<br>http://localhost/users添加用户信息POST(新增、保存)<br>http://localhost/users修改用户信息PUT(修改、更新)<br>http://localhost/users/1删除用户信息DELETE(删除)<br></code></pre></td></tr></table></figure><p><strong>很多操作使用同一个请求路径，这时就需要通过它们发送请求的方式来区分了，比如：GET、POST、......即请求的<code>method</code>来区分</strong></p><p><strong>总结就是：增（POST）、删（DELETE）、改（PUT）、查（GET）</strong></p></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307262015480.png" alt="image-20230726201529386" /></p><ul><li>根据REST风格对资源进行访问成为<strong>RESTful</strong></li></ul><h5 id="restful入门案例"><a class="markdownIt-Anchor" href="#restful入门案例"></a> RESTful入门案例</h5><ol><li><p>通过<code>@RequestMapping</code>注解在请求路径映射时进行<code>method</code>方式的指定；</p></li><li><p>如果需要接收请求路径中带的参数，需要使用<code>@PathVarible</code>进行指定，说明参数从路径中获取值；同时路径映射中需要将对应位置替换为形如：<code>http://localhost/books/&#123;参数名&#125;</code>，比如：<code>http://localhost/books/1</code>→<code>@RequestMapping(value = &quot;/books/&#123;id&#125;&quot;,method = RequestMethod.POST)</code> 。<code>&#123;&#125;</code>里的路径参数需要和方法形参名相同。</p></li></ol><ul><li>添加</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/users<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/books&quot;,method = RequestMethod.POST)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;book add() ...&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.add()&#x27;&#125;&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/users/1<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/books/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span><br>  <span class="hljs-meta">@ResponseBody</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;book delete() ...&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.delete()&#x27;&#125;&quot;</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>修改</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/users<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/books&quot;,method = RequestMethod.PUT)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;book update() ...&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.update()&#x27;&#125;&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li><p>查询</p><ul><li>查询单个</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/users/1<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/books/&#123;id&#125;&quot;,method = RequestMethod.GET)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;book queryById() ...&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.queryById()&#x27;&#125;&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>查询所有</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://localhost/users<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/books&quot;,method = RequestMethod.GET)</span><br>   <span class="hljs-meta">@ResponseBody</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;book queryAll() ...&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.queryAll()&#x27;&#125;&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307262104096.png" alt="image-20230726210448015" /></p><h5 id="rest快速开发"><a class="markdownIt-Anchor" href="#rest快速开发"></a> REST快速开发</h5><p>如果该控制器的每个方法都有返回参数，且访问路径前缀相同直接在该控制器添加<code>@RequestMapping</code>和<code>@ResponseBody</code>注解</p><p>例如：上边的增删改查简化为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">import</span> org.example.domain.Book;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/books&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(method = RequestMethod.POST)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book add() ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.add()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book delete() ...&quot;</span> + id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.delete()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(method = RequestMethod.PUT)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book update() ...&quot;</span> + book);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.update()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book queryById() ...&quot;</span>+id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.queryById()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(method = RequestMethod.GET)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book queryAll() ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.queryAll()&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>控制器的<code>@Controller</code>注解和<code>@ResponseBody</code>注解可以用<code>@RestController</code>注解代替</p><p><code>@RestController</code>注解里边含有这两个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.Documented;<br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.AliasFor;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RestController &#123;<br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = Controller.class</span><br><span class="hljs-meta">    )</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>每个<code>@RequsetMapping</code>，都包含<code>method</code>部分，所以还可以简化</strong></p><ul><li>将<code>@RequestMapping(method = RequestMethod.POST)</code>→→<code>@PostMapping</code></li><li>将<code>@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</code>→→<code>@DeleteMapping(&quot;/&#123;id&#125;&quot;)</code></li><li>将<code>@RequestMapping(method = RequestMethod.PUT)</code>→→<code>@PutMapping</code></li><li>将<code>@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.GET)</code>→→<code>@GetMapping(&quot;/&#123;id&#125;&quot;)</code></li><li>将<code>@RequestMapping(method = RequestMethod.GET)</code>→→<code>@GetMapping</code></li></ul><p>经过简化后的写法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">import</span> org.example.domain.Book;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/books&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-comment">/*@RequestMapping(method = RequestMethod.POST)*/</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book add() ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.add()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/*@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.DELETE)*/</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book delete() ...&quot;</span> + id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.delete()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/*@RequestMapping(method = RequestMethod.PUT)*/</span><br>    <span class="hljs-meta">@PutMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book update() ...&quot;</span> + book);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.update()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/*@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.GET)*/</span><br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book queryById() ...&quot;</span>+id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.queryById()&#x27;&#125;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/*@RequestMapping(method = RequestMethod.GET)*/</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;book queryAll() ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&#x27;func&#x27;:&#x27;book.queryAll()&#x27;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="放行关于访问页面的请求交给tomcat处理"><a class="markdownIt-Anchor" href="#放行关于访问页面的请求交给tomcat处理"></a> 放行关于访问页面的请求交给tomcat处理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//添加这个后记得让SpringMvc配置类去加载</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMvcSupport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurationSupport</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/pages/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/pages/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/js/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/js/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/css/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/css/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/plugins/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/plugins/&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring开发技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven入门</title>
    <link href="/2023/06/02/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/02/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="maven笔记"><a class="markdownIt-Anchor" href="#maven笔记"></a> Maven笔记</h1><h2 id="maven概述"><a class="markdownIt-Anchor" href="#maven概述"></a> Maven概述</h2><ul><li>Maven是专门用于管理和构建Java项目的工具，它的主要功能有<ul><li>提供了一套标准化的项目结构</li><li>提供了一套标准化的构建流程（编译、测试、打包、发布、........）</li><li>提供了一套依赖管理机制</li></ul></li><li>依赖管理<ul><li>依赖管理就是管理你项目中的第三方资源（jar包、插件、.......）</li><li>Maven使用标准的坐标配置来管理各种依赖</li><li>只需要简单的配置就可轻松管理依赖</li></ul></li></ul><h2 id="maven简介"><a class="markdownIt-Anchor" href="#maven简介"></a> Maven简介</h2><ul><li>Apache Maven是一个项目管理和构建工具，它基于项目对象模型（POM）的概念，通过一小段描述信息来管理项目的构建、报告和文档</li><li>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a></li></ul><h3 id="maven模型"><a class="markdownIt-Anchor" href="#maven模型"></a> Maven模型</h3><p><img src="C:%5CUsers%5C86178%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230601220812070.png" alt="image-20230601220812070" /></p><p>其中仓库分为：<strong>本地仓库(Local Repository)、中央仓库(Central Repository)、远程仓库(私服)(Remote Repository)</strong></p><h4 id="本地仓库local-repository"><a class="markdownIt-Anchor" href="#本地仓库local-repository"></a> 本地仓库(Local Repository)</h4><ul><li>本机计算机上的一个目录</li></ul><h4 id="中央仓库central-repository"><a class="markdownIt-Anchor" href="#中央仓库central-repository"></a> 中央仓库(Central Repository)</h4><ul><li><p>由Maven团队维护的全球唯一的仓库</p><ul><li>网址：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li></ul></li></ul><h4 id="远程仓库私服remote-repository"><a class="markdownIt-Anchor" href="#远程仓库私服remote-repository"></a> 远程仓库(私服)(Remote Repository)</h4><ul><li>一般由公司团队搭建的私有仓库</li></ul><p><strong>当项目中使用坐标来引入对应依赖jar包后，首先去查找本地仓库是否有对应jar包：</strong></p><ul><li>如果有，则在项目中直接引用</li><li>如果没有，则去中央仓库下载对应的jar包到本地仓库</li></ul><h2 id="maven安装配置"><a class="markdownIt-Anchor" href="#maven安装配置"></a> Maven安装配置</h2><ol><li><p>解压apache-maven-3.6.1.rar即安装完成</p></li><li><p>配置环境变量MAVEN_HOME为安装路径的bin目录</p></li><li><p>配置本地仓库：修改conf/settings.xml中的&lt;localRepository&gt;为一个指定目录</p></li><li><p>配置阿里云私服：修改conf/settings.xml中的&lt;mirrors&gt;标签，为其添加如下子标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="maven基本使用"><a class="markdownIt-Anchor" href="#maven基本使用"></a> Maven基本使用</h2><h4 id="maven常用命令"><a class="markdownIt-Anchor" href="#maven常用命令"></a> Maven常用命令</h4><h5 id="compile编译mvn-compile"><a class="markdownIt-Anchor" href="#compile编译mvn-compile"></a> compile：编译<code>mvn compile</code></h5><ul><li>会先去下载（去我们配置的私服）编译插件，再进行编译。若插件已存在，则直接编译。生成target目录。</li></ul><h5 id="clean清理mvn-clean"><a class="markdownIt-Anchor" href="#clean清理mvn-clean"></a> clean：清理<code>mvn clean</code></h5><ul><li>也是先去下载clean对应的插件。若存在，则直接clean。也就是删除target目录。</li></ul><h5 id="test测试mvn-test"><a class="markdownIt-Anchor" href="#test测试mvn-test"></a> test：测试<code>mvn test</code></h5><ul><li>执行test目录下的代码。</li></ul><h5 id="package打包mvn-package"><a class="markdownIt-Anchor" href="#package打包mvn-package"></a> package：打包<code>mvn package</code></h5><ul><li>将java代码生成的字节码文件打包成jar包，若为web项目则打包成对应的压缩包。同样第一次会先去下载对应插件。</li></ul><h5 id="install安装mvn-install"><a class="markdownIt-Anchor" href="#install安装mvn-install"></a> install安装<code>mvn install</code></h5><ul><li>将当前的项目安装到本地仓库去。同样第一次回去下载对应插件。</li></ul><h4 id="maven生命周期"><a class="markdownIt-Anchor" href="#maven生命周期"></a> Maven生命周期</h4><ul><li>Maven构建项目生命周期描述的一次构建过程经历了多少个事件</li><li>Maven对项目构建的生命周期划分为三套<ul><li>clean：清理工作</li><li>default：核心工作，例如：测试、打包、安装等</li><li>site：产生报告、发布站点等</li></ul></li></ul><p><strong>统一生命周期内，执行后边的命令，前边的所有命令会自动执行</strong></p><h2 id="idea配置maven"><a class="markdownIt-Anchor" href="#idea配置maven"></a> IDEA配置Maven</h2><h3 id="idea配置maven环境"><a class="markdownIt-Anchor" href="#idea配置maven环境"></a> IDEA配置Maven环境</h3><ol><li>选择IDEA中的file--&gt;Settings</li><li>搜索maven</li><li>设置IDEA使用本地安装的Maven,并修改文件路径</li></ol><h3 id="maven坐标详解"><a class="markdownIt-Anchor" href="#maven坐标详解"></a> Maven坐标详解</h3><ul><li><p>什么是坐标？</p><ul><li>Maven中的坐标是<strong>资源的唯一标识</strong></li><li>使用坐标定义项目或引入项目中需要的依赖</li></ul></li><li><p>Maven坐标主要组成</p><ul><li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：<a href="http://com.xxx">com.xxx</a>）</li><li>artifactId：定义当前Maven项目的名称（通常是模块名称，例如：order-service、good-service）</li><li>version：定义当前的版本号</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xxx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>例如：使用mysql的依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">gropuId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">gropuId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="idea创建maven项目"><a class="markdownIt-Anchor" href="#idea创建maven项目"></a> IDEA创建Maven项目</h3><ol><li>创建模块，选择Maven，点击Next</li><li>填写模块名称，坐标信息，点击finish，创建完成</li><li>编写HelloWorld，并运行</li></ol><h3 id="idea导入maven项目"><a class="markdownIt-Anchor" href="#idea导入maven项目"></a> IDEA导入Maven项目</h3><ol><li>选择右侧Maven面板，点击+号</li><li>选中对应项目的pom.xml文件，双击即可</li><li>如果没有Maven面板，选择View-&gt;Appearance-&gt;Tool Window Bars</li></ol><h2 id="依赖管理"><a class="markdownIt-Anchor" href="#依赖管理"></a> 依赖管理</h2><h4 id="使用坐标导入jar包"><a class="markdownIt-Anchor" href="#使用坐标导入jar包"></a> <strong>使用坐标导入jar包</strong></h4><ol><li>pom.xml中编写<code>&lt;dependencies&gt;</code>标签</li><li>在<code>&lt;dependencies&gt;</code>标签中使用<code>&lt;dependency&gt;</code>引入坐标</li><li>定义坐标的<code>groupId</code>、<code>artifactId</code>、<code>version</code>.</li><li>点击刷新按钮，是坐标生效</li></ol><h4 id="依赖范围"><a class="markdownIt-Anchor" href="#依赖范围"></a> 依赖范围</h4><ul><li>通过设置坐标的依赖范围（scope），可以设置对应jar包的作用范围：编译环境、测试环境、运行环境。</li><li><code>&lt;scope&gt;</code>默认值为：compile</li><li><code>optional</code>:，可选依赖，默认fasle.，true表示设置当前依赖对外不透明，及别的项目看不到你的项目是否使用这个依赖</li></ul><table><thead><tr><th>**依赖范围 **</th><th style="text-align:center"><strong>编译classpath</strong></th><th><strong>测试classpath</strong></th><th><strong>运行classpath</strong></th><th><strong>例子</strong></th></tr></thead><tbody><tr><td>complie</td><td style="text-align:center">Y</td><td>Y</td><td>Y</td><td>logback</td></tr><tr><td>test</td><td style="text-align:center">-</td><td>Y</td><td>-</td><td>Junit</td></tr><tr><td>provided</td><td style="text-align:center">Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td style="text-align:center">-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr><tr><td>system</td><td style="text-align:center">Y</td><td>Y</td><td>-</td><td>存储在本地的jar包</td></tr><tr><td>import</td><td style="text-align:center">引入-</td><td>-Dependency-</td><td>-Management</td><td></td></tr></tbody></table><h4 id="排除依赖"><a class="markdownIt-Anchor" href="#排除依赖"></a> 排除依赖</h4><ul><li><p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本</p></li><li><pre class="highlight"><code class="xml">在<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>标签下<span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>    <span class="hljs-comment">&lt;!--这里写具体需要排除的资源的坐标--&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-comment">&lt;!--注意不需要写版本，自动排除所有版本--&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-comment"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><br><span class="hljs-section">## Maven高级</span><br><br><span class="hljs-section">### 分模块开发与设计</span><br><br><span class="hljs-strong">**分模块开发的意义**</span><br><br><span class="hljs-bullet">*</span> 将原始模块按照功能分成若干个子模块，方便模块间的相互调用，接口共享<br><br>![<span class="hljs-string">image-20230827100424199</span>](<span class="hljs-link">C:/Users/86178/AppData/Roaming/Typora/typora-user-images/image-20230827100424199.png</span>)<br><br><span class="hljs-section">#### 工程模块与模块划分</span><br><br><span class="hljs-bullet">*</span> 工程上每个层面的单独一个模块<br><span class="hljs-bullet">*</span> 主模块什么也不放<br><br><span class="hljs-section">### 聚合</span><br><br><span class="hljs-bullet">*</span> 聚合： 将多个模块组织成一个整体，同时进行项目构建的过程称为聚合<br><span class="hljs-bullet">*</span> 聚合工程： 通常是一个不具有业务功能的<span class="hljs-emphasis">*空*</span>工程（有且仅有一个pom文件）<br><span class="hljs-bullet">*</span> 作用：使用聚合工程可以将多个工程编组，通过对聚合工程进行构建，实现对所包含的模块继续进行同步构建<br><span class="hljs-bullet">  *</span> 当工程某个模块发生更新（变更）时，必须保障工程中与已更新模块关联的模块同步更新，此时可以使用聚合工程来解决批量模块同步构建的问题<br><br><span class="hljs-strong">**创建聚合工程**</span><br><br><span class="hljs-bullet">*</span> 创建一个maven模块，并将打包类型设置为<span class="hljs-code">`pom`</span><br><br>  <span class="hljs-code">```xml</span><br><span class="hljs-code">  &lt;packaging&gt;pom&lt;/packaging&gt;</span><br></code></pre></td></tr></table></figure></span></code></pre></li><li><p>在聚合工程的pom文件中通过<code>modules</code>属性来指定聚合工程需要管理的模块</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>SpringMvc-requesrt-response<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>SpringMvc-requesrt-response Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.apache.org<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--设置管理的模块名称--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../模块名1<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../模块名2<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h3><ul><li>概念：继承描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承</li><li>作用：<ul><li>简化配置</li><li>减少版本冲突</li></ul></li></ul><p><strong>配置当前工程的父工程</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--父工程坐标信息--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--相对路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../父工程名/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308271736396.png" alt="image-20230827173625301" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308271736176.png" alt="image-20230827173653114" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308271737598.png" alt="image-20230827173709547" /></p><p><em>可选依赖的意思就是，子工程并不强制继承的依赖，但是父工程给你提供在这里。如果子工程要用，需要在子工程里配置，配置时无需指定版本号，使用父工程提供的版本号，以避免冲突</em></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308271737517.png" alt="image-20230827173721452" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308271738675.png" alt="image-20230827173829619" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308271737199.png" alt="image-20230827173753157" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308271739354.png" alt="image-20230827173901296" /></p><h3 id="属性"><a class="markdownIt-Anchor" href="#属性"></a> 属性</h3><p><code>&lt;properties&gt;&lt;/properties&gt;</code></p><p>用于将一些在以来坐标中多次出现的值定义为一个<em>代称</em>，在以来坐标中用代称来替代原有值，这样方便值变化时，只需修改代称的值，而如需多出修改带来麻烦。比如：spring各个依赖使用相同的版本号，那么就可以定义一个这样的属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在依赖坐标中使用<code>$&#123;&#125;</code>来引用<code>spring.version</code>这个的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为了方便这种配置文件中类似常量的值的统一管理，我们也可以将jdbc相关的值也定义在<code>&lt;properties&gt;</code>中，然后再<code>jdbc.properties</code>文件中去引用这些相关值</p><p><strong>步骤：</strong></p><ol><li>在父工程中定义属性</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://localhost/db1?useSSL=false<span class="hljs-symbol">&amp;amp;</span>allowPublicKeyRetrieval=true<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>进行相关配置，扩大maven的管理范围，让其能读取对应资源包。这一步可以让jdbc.properties能引用到pom.xml中定义的属性。<code>$&#123;project.basedir&#125;</code>当前项目所在目录</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>在jdbc.properties中引用定义的属性</li></ol><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308272151251.png" alt="image-20230827215151146" /></p><h3 id="版本管理"><a class="markdownIt-Anchor" href="#版本管理"></a> 版本管理</h3><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308272207003.png" alt="image-20230827220723930" /></p><h3 id="资源配置"><a class="markdownIt-Anchor" href="#资源配置"></a> 资源配置</h3><h3 id="多环境开发配置"><a class="markdownIt-Anchor" href="#多环境开发配置"></a> 多环境开发配置</h3><ul><li>多环境开发<img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308272210911.png" alt="image-20230827221046871" /></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--开发环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>env_dep<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://127.1.1.1:3306/db1<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--设定是否默认启动的环境--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--生产环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>env_pro<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://127.1.1.1:3306/db1<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--测试环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>env_test<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbc.url</span>&gt;</span>jdbc:mysql://127.1.1.1:3306/db1<span class="hljs-tag">&lt;/<span class="hljs-name">jdbc.url</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308272218399.png" alt="image-20230827221852342" /></p><h3 id="跳过测试"><a class="markdownIt-Anchor" href="#跳过测试"></a> 跳过测试</h3><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308272220424.png" alt="image-20230827222003390" /></p><ul><li><p>方式一：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308272221058.png" alt="image-20230827222104029" /></p></li><li><p>方式二：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>maven_02/src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">skipTests</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipTests</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>方式三：</p><ul><li>也可以整体不跳过<code>&lt;skipTests&gt;false&lt;/skipTests&gt;</code>，然后通过<code>excludes</code>排除掉部分功能的测试</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>maven_02/src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">skipTests</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">skipTests</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>**/BookServiceTest.java<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308272232064.png" alt="image-20230827223244987" /></p></li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308272233710.png" alt="image-20230827223309609" /></p><h3 id="私服"><a class="markdownIt-Anchor" href="#私服"></a> 私服</h3><h4 id="私服简介"><a class="markdownIt-Anchor" href="#私服简介"></a> 私服简介</h4><ul><li><p>私服是一台独立的服务器，用于解决团队内部的资源共享与资源同步问题</p></li><li><p>Nexus</p><ul><li>Sonatype公司的一款maven私服产品</li><li>下载地址：<a href="https://help.sonatype.com/repomanager3/product-information/download">https://help.sonatype.com/repomanager3/product-information/download</a></li></ul><p><img src="C:/Users/86178/AppData/Roaming/Typora/typora-user-images/image-20230828203908024.png" alt="image-20230828203908024" /></p></li></ul><h4 id="私服仓库分类"><a class="markdownIt-Anchor" href="#私服仓库分类"></a> 私服仓库分类</h4><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308282045105.png" alt="image-20230828204547044" /></p><h4 id="资源的上传与下载"><a class="markdownIt-Anchor" href="#资源的上传与下载"></a> 资源的上传与下载</h4><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292043880.png" alt="image-20230828221650259" /></p><ul><li>为本地仓库配置访问私服的用户名和密码</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292039823.png" alt="image-20230829203947719" /></p><ul><li>配置资源上传的位置（私服的位置）</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292040157.png" alt="image-20230829204039083" /></p><ul><li>下载的地址（仓库组地址）</li></ul><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202308292043209.png" alt="image-20230829204013740" /></p>]]></content>
    
    
    <categories>
      
      <category>项目管理工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC学习笔记</title>
    <link href="/2023/05/29/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/29/JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="jdbc学习笔记"><a class="markdownIt-Anchor" href="#jdbc学习笔记"></a> JDBC学习笔记</h1><ul><li>JDBC是java提供操作各数据库的接口，由各数据库实现这个接口，以此实现用java操作各种数据库</li></ul><h3 id="jdbc快速入门"><a class="markdownIt-Anchor" href="#jdbc快速入门"></a> JDBC快速入门</h3><ul><li><p>步骤</p><ul><li><p>0、创建工程，导入驱动jar包</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131405041.png" alt="image-20230516213041994" /></p></li><li><p>1、注册成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>2、获取链接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,username,password);<br></code></pre></td></tr></table></figure></li><li><p>3、定义SQL语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update...&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>4、获取执行SQL对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br></code></pre></td></tr></table></figure></li><li><p>5、执行SQL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">stmt.executeUpdate(sql);<br></code></pre></td></tr></table></figure></li><li><p>6、处理返回结果</p></li><li><p>7、释放资源</p></li></ul></li></ul><h2 id="jdbc-api详解"><a class="markdownIt-Anchor" href="#jdbc-api详解"></a> JDBC API详解</h2><h3 id="drivermanager"><a class="markdownIt-Anchor" href="#drivermanager"></a> DriverManager</h3><p>1、注册驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><p>查看Driver类的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            DriverManager.registerDriver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>());<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException var1) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Can&#x27;t register driver!&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>提示：</p><ul><li>MySQL5之后的驱动包，可以省略注册驱动的步骤</li><li>自动加载jar包中META-INF/services/java.sql.Driver文件中的驱动类</li></ul></li></ul><p>2、获取链接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(String url,String user,String password)</span>;<br></code></pre></td></tr></table></figure><ul><li><p>参数：</p><ul><li><p>url链接路径</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">语法: jdbc:mysql://ip地址（域名）:端口名/数据库名称?参数键值对1&amp;参数键值对2...<br>实例: jdbc:mysql://127.0.0.1:3306/db1<br>细节: <br>如果链接的是本机的mysql服务器，并且mysql服务器默认端口是3306，则url可以简写为：jdbc:/mysql:///数据库名称?参数键值对1&amp;...<br>配置useSSL=false参数，禁用安全链接方式，解决警告提示<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>user:用户名</p></li><li><p>password:密码</p></li></ul></li></ul><h3 id="connection"><a class="markdownIt-Anchor" href="#connection"></a> Connection</h3><ul><li>Connection(数据库连接对象)的作用<ul><li>获取SQL执行对象</li><li>管理事务</li></ul></li></ul><h4 id="获取执行sql的对象"><a class="markdownIt-Anchor" href="#获取执行sql的对象"></a> 获取执行SQL的对象</h4><ul><li><p>普通执行SQL的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Statement <span class="hljs-title function_">createStatement</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure></li><li><p>预编译SQL的执行SQL对象：防止SQL注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PrepareStatement <span class="hljs-title function_">prepareStatement</span><span class="hljs-params">(sql)</span><br></code></pre></td></tr></table></figure></li><li><p>执行存储过程对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">CallableStatement <span class="hljs-title function_">prepareCall</span><span class="hljs-params">(sql)</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="事务管理"><a class="markdownIt-Anchor" href="#事务管理"></a> 事务管理</h4><ul><li><p>MySQL事务管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">开启事务：BEGIN;/START TRANSACTION;<br>提交事务：COMMIT;<br>回滚事务：ROLLBACK<br>MySQL默认自动提交事务<br></code></pre></td></tr></table></figure></li><li><p>JDBC事务管理：Connection接口中定义了三个对应方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">开启事务：setAutoCommit(<span class="hljs-type">boolean</span> autoCommit);<span class="hljs-comment">//true为自动提交事务；false为手动提交事务，即为开启事务</span><br>提交事务：commit();<br>回滚事务：rollback();<br></code></pre></td></tr></table></figure></li></ul><h3 id="statement"><a class="markdownIt-Anchor" href="#statement"></a> Statement</h3><ul><li>Stament作用：执行SQL语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">executeUpdate</span><span class="hljs-params">(sql)</span>;执行DML，DDL语句<br>    返回值：（<span class="hljs-number">1</span>）DML语句影响行数（<span class="hljs-number">2</span>）DDL语句执行后，执行成功也可能返回<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ResultSet <span class="hljs-title function_">executeQuery</span><span class="hljs-params">(sql)</span>; <br></code></pre></td></tr></table></figure><h3 id="resultset"><a class="markdownIt-Anchor" href="#resultset"></a> ResultSet</h3><ul><li><p>ResultSet(结果集对象)作用：</p><ul><li><p>封装了DQL查询语句的结果</p></li><li><pre class="highlight"><code class="java">ResultSet statement.executeQuery(sql);执行DQL语句，返回ResultSet对象&lt;!--code￼<span class="hljs-number">17</span>--&gt;&lt;!--code￼<span class="hljs-number">18</span>--&gt;</code></pre></li></ul></li><li><p>使用步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(resultset.next())&#123;<br>    <span class="hljs-comment">//获取数据 do something</span><br>    resultset.getXxx(参数)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="preparestatement"><a class="markdownIt-Anchor" href="#preparestatement"></a> PrepareStatement</h3><ul><li><p>PrepareStatement作用：</p><ul><li><p>预编译SQL语句并执行，防止SQL注入</p></li><li><p>SQL注入</p></li><li><p>SQL注入是通过操作输入来修改事先定义好的SQL语句，用以达到执行代码对服务器进行攻击的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#x27; or &#x27;1&#x27;=&#x27;1&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * from jianlai where name = &#x27;&quot;</span>+ username +<span class="hljs-string">&quot;&#x27; and gender = &#x27;&quot;</span>+ password +<span class="hljs-string">&quot;&#x27; &quot;</span>;<br></code></pre></td></tr></table></figure><p>上面的sql语句的字符串就成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM jianlai where name = &#x27;username(注意这是变量，具体值看你的输入)&#x27; and password = &#x27;&#x27; or &#x27;1&#x27;=&#x27;1&#x27;;这样由于&#x27;1&#x27;=&#x27;1&#x27;恒等式，where条件永远为true<br></code></pre></td></tr></table></figure><p>这样由于拼接字符串带来了输入可以修改sql语句原意的方式就叫SQL注入(Inject)。</p></li></ul></li><li><p>获取PrepareStatement对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义sql语句时，用?占位符代替参数值</span><br><span class="hljs-comment">//eg.</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from user where username = ? and password = ?&quot;</span>;<br><span class="hljs-comment">//通过Connection对象获取，并传入对应sql语句</span><br>PrepareStatemant = conn.prePareStatement(sql);<br></code></pre></td></tr></table></figure></li><li><p>设置参数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">PrepareStatement对象：setXxx(参数<span class="hljs-number">1</span>，参数<span class="hljs-number">2</span>)：给?赋值<br>Xxx :数据类型;如setString(参数<span class="hljs-number">1</span>，参数<span class="hljs-number">2</span>)<br>参数：<br>    参数<span class="hljs-number">1</span>：?的位置编号，从<span class="hljs-number">1</span>开始<br>    参数<span class="hljs-number">2</span>：?的值<br><span class="hljs-comment">//总结就是 根据位置编号给参数设置值</span><br></code></pre></td></tr></table></figure></li><li><p>执行sql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">executeUpdate();/executeQuery(); <span class="hljs-comment">//就不用传sql了 </span><br></code></pre></td></tr></table></figure></li><li><p>PrepareStatement好处</p><ul><li>预编译SQL,性能更高</li><li>防止SQL注入</li></ul></li><li><p>PrepareStatement预编译功能开启：<code>userServerPreStmts = true</code></p></li></ul><h2 id="数据库连接池"><a class="markdownIt-Anchor" href="#数据库连接池"></a> 数据库连接池</h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><ul><li><strong>数据库连接池</strong>是个容器，负责分配、管理数据库连接（Connection）</li><li>它允许程序重复使用一个现有的数据库连接，而不是再重新建立一个</li><li>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏</li><li>好处：<ul><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ul></li></ul><h3 id="数据库连接池的实现"><a class="markdownIt-Anchor" href="#数据库连接池的实现"></a> 数据库连接池的实现</h3><ul><li><p>标准接口：<strong>DataSource</strong></p><ul><li><p>官方（SUN）提供的数据库连接池标准接口，由第三方组织实现此接口</p></li><li><p>功能：获取链接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>常见的数据库连接池</p><ul><li>DBCP</li><li>C3P0</li><li>Druid</li></ul></li><li><p>Druid(德鲁伊)</p><ul><li>Druid连接池是阿里巴巴开源的数据库连接池项目</li><li>功能强大，性能优秀，是java语言最好的数据库连接池之一</li></ul></li></ul><h3 id="druid数据库连接池"><a class="markdownIt-Anchor" href="#druid数据库连接池"></a> Druid数据库连接池</h3><h4 id="使用步骤"><a class="markdownIt-Anchor" href="#使用步骤"></a> 使用步骤</h4><ul><li><p>导入jar包 druid-1.1.12.jar</p></li><li><p>定义配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql:///db1?useSSL=false&amp;useServerPreStmts=true&amp;allowPublicKeyRetrieval=true</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">1923403646lxg..</span><br><span class="hljs-attr">initialSize</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">maxActive</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">maxWait</span>=<span class="hljs-string">3000</span><br></code></pre></td></tr></table></figure></li><li><p>加载配置文件</p></li><li><p>获取数据库连接池对象</p></li><li><p>获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//3.加载配置文件</span><br><span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\IDEA\\JAVAcode\\JDBC\\JDBCDemo\\src\\druid.properties&quot;</span>));<br><span class="hljs-comment">//4.获取连接池对象</span><br><span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(prop);<br><span class="hljs-comment">//5.获取数据库连接</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>乘法逆元</title>
    <link href="/2023/05/29/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/"/>
    <url>/2023/05/29/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83/</url>
    
    <content type="html"><![CDATA[<h3 id="逆元模运算下的乘法逆元"><a class="markdownIt-Anchor" href="#逆元模运算下的乘法逆元"></a> 逆元（模运算下的乘法逆元）</h3><ul><li><p>乘法逆元是广义上的倒数，0没有逆元</p></li><li><p>涉及到的前置工具，快速幂、扩展欧几里得</p></li><li><p>快速幂</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-function">ll <span class="hljs-title">qpow</span><span class="hljs-params">(ll a,ll n,ll mod)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)<br>        &#123;<br>            res *= a;res %= mod;<br>        &#125;<br>        n &gt;&gt;= <span class="hljs-number">1</span>;<br>        a *= a;a %= mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>扩展欧几里得</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ll <span class="hljs-title">exgcd</span><span class="hljs-params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)<br>    &#123;<br>        x = <span class="hljs-number">1</span>;y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-type">int</span> d = <span class="hljs-built_in">exgcd</span>(b,a%b,y,x);<br>    y -= a/b*x;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>下面介绍几种求逆元的方法</strong>：<em>费马小定理、扩展欧几里得、线性递推</em>。前两种适用于，p为质数且a,p互质的情况。最后一种是通用的方法，适用于求一系列逆元</p><h4 id="费马小定理求逆元"><a class="markdownIt-Anchor" href="#费马小定理求逆元"></a> 费马小定理求逆元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    费马小定理求逆元</span><br><span class="hljs-comment">    若p为质数，a^(p-1) = 1(mod p) -&gt; a*a^(p-2)=1(mod p) -&gt; inv(a) = a^(p-2)(mod p)</span><br><span class="hljs-comment">    适用于 p 为质数，且a,p互质的情况</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">ll <span class="hljs-title">Inv</span><span class="hljs-params">(ll a,ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">qpow</span>(a,p<span class="hljs-number">-2</span>,p);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="扩展欧几里得求逆元"><a class="markdownIt-Anchor" href="#扩展欧几里得求逆元"></a> 扩展欧几里得求逆元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    拓展欧几里得求逆元</span><br><span class="hljs-comment">    线性同余方程 ax = c(mod b) -&gt; ax + by = gcd(a,b) (通过转化得到)exgcd的内容</span><br><span class="hljs-comment">    根据式子 a^(p-1) = 1(mod p) -&gt; a^(p-1) = k*p + 1 -&gt; a*a^(p-2) - k*p = 1;</span><br><span class="hljs-comment">    将 inv(a) = a^(p-2)看作x,-k看作y，用exgcd可求得逆元，本质还是费马小定理</span><br><span class="hljs-comment">    适用于 p 为质数，且a,p互质的情况</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">ll <span class="hljs-title">Inv</span><span class="hljs-params">(ll a,ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll x,y;<br>    ll d = <span class="hljs-built_in">exgcd</span>(a,p,x,y);<br>    <span class="hljs-keyword">if</span>(d != <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//a,p不互质则无解</span><br>    <span class="hljs-keyword">return</span> (x % p + p) % p;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="线性递推求逆元"><a class="markdownIt-Anchor" href="#线性递推求逆元"></a> 线性递推求逆元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//递推</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Inv</span><span class="hljs-params">(ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    inv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt; p;i ++)<br>    &#123;<br>        inv[i] = (-(p/i) * inv[p%i] % p + p) % p;<span class="hljs-comment">//防止负数</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>递归形式（递归+记忆化）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//递推形式对应的递归+记忆化</span><br><span class="hljs-function">ll <span class="hljs-title">Inv</span><span class="hljs-params">(ll a,ll p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(inv[a]) <span class="hljs-keyword">return</span> inv[a];<br>    inv[a] = (-p/a+<span class="hljs-built_in">Inv</span>(p%a,p)%p+p)%p;<br>    <span class="hljs-keyword">return</span> inv[a];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>美少女</title>
    <link href="/2023/05/17/%E7%BE%8E%E5%B0%91%E5%A5%B3/"/>
    <url>/2023/05/17/%E7%BE%8E%E5%B0%91%E5%A5%B3/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Tricolour Lovestory</span><br><span class="hljs-comment">                                    .</span><br><span class="hljs-comment">                            .....:&quot;</span><br><span class="hljs-comment">                                . `]        &#x27;^,:!+?&#125;&#123;&#123;[?+&gt;l;^.</span><br><span class="hljs-comment">                            . . &quot;/!.&#x27;:~1/xcLCCLLJYXzccccccvn/&#125;&lt;,.</span><br><span class="hljs-comment">                            . .  ]j/jvXUCmbqZQJYXXXcvvnrrjrncYCCf;&quot;&quot;</span><br><span class="hljs-comment">                                &quot;_jUJLLL0mOZzzXzcvnxxnuczzcccvvzr,&#x27;1c/)&#123;[-+&lt;l&quot;.</span><br><span class="hljs-comment">                            &#x27;&#x27;l)uXcXYXccUzvCnjxvvuvvr////txXUJCLu^^(oapZCYcxf\&#123;&lt;,.</span><br><span class="hljs-comment">                        `;l|JUuxuurfnYufcJX|t/fnunun/&#125;[_&lt;&#123;nXYCC\[&#125;Jh0LLCCCUcj\)+;&#x27;   .</span><br><span class="hljs-comment">                        . ,&#125;]xUx/rr/\|xXX\|cXOj]&#125;[?1xnnv/+-&#125;&#125;1fXJ00u\\CqZLQCUUCQJr&#125;~&lt;I&#x27; .</span><br><span class="hljs-comment">                        ixxUX&#125;)j)&#123;&#123;&#125;rXvj&#125;&#125;vXLO\!i&lt;&lt;]xunvu\(/jnXLCLZQC0bqZLLCUXYJO0v(&#125;_I. ..</span><br><span class="hljs-comment">                    . &quot;/wCQz?)f++_~|cX//+_xzU00t-&#123;)1)uvnvJvUcccXLJC0QmobwmJcuUXczCwmYt)?,   .</span><br><span class="hljs-comment">                ...   !rLqOJ|jj&#125;))&#125;tzXv|v)&#123;fXYJ00vt\/\tccuvCvUuvvuzUCQ0kh0OOrx\XUvcXmwqYrt&gt; ..</span><br><span class="hljs-comment">                ..   &gt;xxQZZrxc(//\tJvmxfUntfXYUUL0XurjjvXzvczXurnvuvYQ0qhOJZr|t[nCcvXOQQnYc].</span><br><span class="hljs-comment">                ....I1)UUJYrXxtfftJYJmxuCJnxcXYYYYtucnxxYcXXcvzYvnvvucC0mZCCJ[/)-tQzvJLQt?YC&#123;...</span><br><span class="hljs-comment">                .. &quot;-+rcrJcuXrfjfu0XU/uvYzXnuvvvcX(+/xjtft\czvccXCJUYzvzU0Z00x[t]?f0zzQCQ~:u0? .</span><br><span class="hljs-comment">                . .+&#125;)z|fJvvYxfjjYCz)+rxt]cxffffjjf~:_t\11]-1jnzUUQqpmmOO0L0O0//1&#125;]r0zO0LY^&#x27;jC; ...</span><br><span class="hljs-comment">                . &quot;))nffJqcXXcjrxzYx-&quot;[t|&lt;-((()1\|?+!;;i&lt;&gt;__;+\jvJ0QqppbdYQLLQxt/&#123;&#123;[vLX\LQ&#125; `c\ ..</span><br><span class="hljs-comment">                . &lt;|\z/YwZLQzJcxxnnf]:;[&#125;:&#x27;&gt;I-&#123;&#123;&#125;~+,l+[jXUJ0Oj///uJv|nZZ&lt;[CUUJj)t&#123;1&#123;(CX^f0c` lu&#x27; .</span><br><span class="hljs-comment">                .^&#123;)vx)L0CZwCY0Uuxx&#125;_|nXUc\_l^;+]!;I:-(zdZ0mpzxtfcC)+[j; /CJXXu|f((((XJ,,UQ&lt; .\^</span><br><span class="hljs-comment">                !((Oj|OXvCmqQJOJcn\/zuqmmZ&lt;`^&#x27;`::`````i|)&#125;t&#123;?&#125;|rXj&lt;iI&#x27; ^cJJuvv|j\\\|cC: &#125;O1 `&#123;&#x27;</span><br><span class="hljs-comment">                .?(rqx\0\(xCZpZQOXYXr_&gt;-(&#125;&#123;I``````^^^^,;!i&lt;+-?&#123;(vj-!^   -CUYjuv\j////zU&quot; ,J/.&lt;I .</span><br><span class="hljs-comment">                ,(\Ur&#125;tY(||nJZqmwf_xYr]~&lt;!:&quot;^:&quot;^^^^^^&quot;,:;;I!~?[|+:`  . `uUUcfcutrtttfUz&#x27;  x/`,..</span><br><span class="hljs-comment">        .....]jYu^^jc(|\/YZ00qn &#x27;-zc?I:,&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;,,,Ii&gt;+?I    .. )JUYxfXnjrfffxLf   ([</span><br><span class="hljs-comment">        .   ?cU/&quot; .uY\|\jYZJJZr   :-__I,,,,,,,,:;:::,,:;l_i&#x27;       +UUUvfrJrxxjjjvL_ . &#125;l .</span><br><span class="hljs-comment">            `)Ju+.  &#125;Xnr|\uJCYQO[ .. . &quot;!&gt;il;::::;I;:,:I&gt;-]&#123;^  .    lcXYXjjvYruxrrxUz&quot;  .&lt;...</span><br><span class="hljs-comment">        .&quot;+ff+`  &quot;\Cu|/\rzJcYmX&quot; .      &#x27;&quot;:;lllI::;l&gt;_]]?_[`   .. ;nczUnrrJvnvunxXL]   ,^ ..</span><br><span class="hljs-comment">    ..`&quot;:l&lt;+&gt;&quot;   &#x27;?xrYj/fjcUXvQm?            ..`&gt;&#125;---???----[?&lt;`.  :xvxzXxxuQnzvvuXCv` `!;.</span><br><span class="hljs-comment">    ...``&#x27;.   . l/),)YtxrcXYcXQz`             :?f&#125;_--______++tf+^.:xXjrUcunQLvYzzXJU&lt;&quot;+]; .</span><br><span class="hljs-comment">        .. .+&#123;: iUvjnvzYczr((.&quot;:;li&gt;&gt;&#123;\|(&#125;f&#123;]&#125;&lt;~~~~~~~~~~-[[?u&#125;rQxjcLcvXCYXYXYUJLj|&lt;&#x27;</span><br><span class="hljs-comment">            . ;_. &#x27;fJjvccUXzv,(1_&gt;:&quot;^&quot;&quot;]cYLXuf--[]&gt;&gt;&lt;&lt;&lt;&lt;&gt;&gt;_&#125;&#125;]?&#125;LnOJfjJQzc0tXCUYUUJ_^   .</span><br><span class="hljs-comment">            . l.. &lt;UcrXcUCcX&#125;&quot;/)&quot;;`&quot;&quot;`&gt;jtf\))I-\xr-&gt;&gt;&gt;&gt;&gt;+/(~!l,\CzczjrQ0YYX)Y0JYUJv&#x27;   .</span><br><span class="hljs-comment">            ;l. (QvuYcUJvz]:;/;;I::!fff(_j[&#123;\rY?_&lt;;:I![r\[;.^zLfXYxnQZJC)!umQYYJn&#x27;</span><br><span class="hljs-comment">            .l+&lt;uQczYz(XYX~.&#x27;I1]?&lt;I(jtffjjffxrC-&lt;]&#123;_i_unnnf1&lt;Jz\zOzcLwCO&#125;.[QZCYJv&gt; .</span><br><span class="hljs-comment">            . ^_n0YUUYn/zYx:.&#x27;I+[1|Xjfjxrt//t&#123;f&#123; :,:]f1/unrtfQu\jLXXJwOQ/.IttCCCx_&quot;</span><br><span class="hljs-comment">                &#x27;(/jUJC[&gt;~\/&gt;^&#x27;^I&#123;JXun/\/xuuuj-J-~)v/&#123;t|((|||nY/(jXJzQpL(~I,?+nLYi&gt; ..</span><br><span class="hljs-comment">                ..&#x27;If&#125;)nYU(!&quot;,l:l&#125;rv-+&lt;uYrCJuuvc(upCnxcY0\1)))))\xr\/ujtvZY&#123;&quot;.`!&gt;[x\_` ..</span><br><span class="hljs-comment">                .&#x27;l;tr;^;_~&lt;!:I-jzJu]1\cfn0(1)(jYu0c+&#123;))Lj&#123;1111(/tjnt\r&#123;&gt;l&gt;&lt;;&quot;:;:&#x27;&#x27;&gt;1;</span><br><span class="hljs-comment">                ..:&lt;&quot;]v&lt;.&quot;l:;:+xr\\tfxx(&#123;zZcXXYmZ|nbLf&#123;)0r|(()(|/jxuXzcv~&quot;^^^^&#x27;.&#x27;&#x27;.&quot;~&lt;</span><br><span class="hljs-comment">            ... ^!iI&lt;Iixt;&#x27;`.,tcxf/|)1&#123;&#123;&#123;)fj/fJYxjLOjcXJJ)(\\/fjrnvczcXt[-!&quot;&#x27;&#x27;.....I&lt;1: .</span><br><span class="hljs-comment">        .  `li;^^^&gt;+:?j+`;?nXccvvnxxjft/|jQYt|/Umn|fxxnnuuuuuvvvcvcX&#125;&#x27;;;&quot;`&#x27;....&#x27;I&gt;[\_.</span><br><span class="hljs-comment">    ...  .:&gt;I&quot;^````I_!I\rxtvJzzzzzzzzczcJqQvcnnvq0vcvcccvvvccczzzXXU\l:&quot;&quot;^^&quot;^^&quot;&gt;1jnj1:</span><br><span class="hljs-comment">        .  ^i!,^```^^^&quot;;~-?~_&#123;|/YXXXXXXXXcUqOzXXzzXwOcczzzzzzzzXXXXYYUv?-[&#125;&#125;&#125;&#125;]&#125;&#125;[&#125;-&lt;!:^.</span><br><span class="hljs-comment">    .. .l&gt;;^^^`^^&quot;&quot;:;i~&gt;^..&#x27;..\YXXXXXXXYmZYXJzzzYmOzXXXXXXXXXXXYYYUJQX+IIl!~~!!&gt;:^`.</span><br><span class="hljs-comment">    ..&quot;&gt;!:^`^^^&quot;,:I!~&gt;&quot;.     .|XnxrrrrruXuxzzrXuxQCxuvczXXXXYYYUUYYCQC&lt;&quot;^&quot;,;l!i?&#x27;</span><br><span class="hljs-comment">    . I&lt;;&quot;^^^^&quot;:!ii~~:....    .&gt;cjtttfffffffuurLJfjftttffjrxuvvunrffXQUl^```^,:l&lt;..</span><br><span class="hljs-comment">....I+;&quot;^^``^&quot;,I~[i&#x27; .       .^nxffffffffftjuttfrjfffffftttttttjrxzC0j:^^`^&quot;,:&gt;; .</span><br><span class="hljs-comment">....I_;&quot;^````^^&quot;;+!.  .     ...tnfffffffffffnffffffffffffffjxuvurfzOf+:^^^^&quot;:;&lt;` .</span><br><span class="hljs-comment">    I~;^^````^&quot;&quot;:&gt;!.....      ?cjffffffffffuxtfffffffffjjrxxrjfttYJ;+,^^^^,:l&gt;...</span><br><span class="hljs-comment">    .,~l,^```^^^&quot;:&lt;! ..       :urffffffffftczjzrtfffffffffffttffv0-&#x27;_,``^&quot;,:&gt;I ..</span><br><span class="hljs-comment">    ...`&gt;&lt;:^^^`^^&quot;,;&lt;l..     .  &#125;vfftttfffftcxv0XfjrrjffffffffrcJOj :-,^^^&quot;,:+^ ..</span><br><span class="hljs-comment">    . ..;~l&quot;````^&quot;:I~I .    . _nJrttttfffftfvvtfjjrjjfffrxuzYJCQmr&quot;i?;^^^&quot;,I_. .</span><br><span class="hljs-comment">        ... ^&gt;&gt;:&quot;``^&quot;,:I+;  .    &gt;zcznjtfttttttvJtffjrxuczzzcvvnxnzCO]&lt;?&lt;&quot;^^&quot;:l_...</span><br><span class="hljs-comment">        ...;~l&quot;^`^^,:I~:.. .. &lt;zxjjrrjjfjxvYLzrxxxxxrjjfffftfttjCZx&#123;+_&gt;,&quot;,:;+, .</span><br><span class="hljs-comment">            `i&lt;:^^`&quot;&quot;,I&lt;:    _vxfffffttttfjruujft/ttffffffffffjYLC0L/+~i:,:;&lt;l ..</span><br><span class="hljs-comment">                .;~l&quot;^^^&quot;,;&lt;I &#x27;&#123;vjttttffftttttttYj/tjfffffffffffjcruUJCLc[&gt;!I;;!&gt; ..</span><br><span class="hljs-comment">                . ^&gt;i,^^^&quot;&quot;;&lt;i|XxfttttffjjjfffffXfuJztfffffffftfujfjzJUUCJt~!lIl&lt; ..</span><br><span class="hljs-comment">                &#x27;l&lt;;&quot;^^^&quot;&gt;vcfxxjftttttffffttu0nxYzffffffttfrufjuujnYYYYJc?i!!&lt; ..</span><br><span class="hljs-comment">                .... :~l,&quot;^^nzjttfrrjfffffftttxQokCj/fffjrxrxcYnnxfttrXzzzXwui!&gt;&gt;...</span><br><span class="hljs-comment">                    `ii:^~qOtffftffffffffttzpaaqddJj/tffjxnnrjfffffncccUpaaX&lt;i&lt;...</span><br><span class="hljs-comment">                    . .l!_QZp0ftfffffffff/r0kdwdZZmppUjtfftffffffftjvvcOhakkh0]i...</span><br><span class="hljs-comment">                    . ..10O00wqxtffffffttzpdmZZqZZZZmqdUjtfffffffffxnUbohbbbkkp)  .</span><br><span class="hljs-comment">                .. .^:[0O000wbmXftffftnOdmOZZZwZZZZZZpdmYjttfffftfcmahkbbbbbkkb\`</span><br><span class="hljs-comment">                .   &#x27;Il&#123;QO0000pZ0mLrttfUbkwZOOOOmZOOZZZmqZwZXj/fftrQaakbbbbbbbkkkk0j~^</span><br><span class="hljs-comment">        ....  .`l&gt;;(ZO0QQQ0q000OZzvZwmpwqwZOOZZ0OOZZZpZOZmOYrjYqpqkbbbbbbbbbhhbbkbOn-&quot;</span><br><span class="hljs-comment">        ....`:i_~,/wOQQQQQZmQ0000ZmO0ZmOZmwmZZpO00OO0pmOZZZmwOwZOOdhbbbbbbbbbbkbddbkbZu-&quot;</span><br><span class="hljs-comment">        ....I~~i,\Z0QQQQQQw0QQQQ00000Zm00Omqpqqpwmmmqq0OOO0ZwO0000OakbbbbbbbdddbkdpppdbbOx_^   ...</span><br><span class="hljs-comment">            .&quot;i~)LQLQQQQQ0qQQQQQQQQQQZwQQQQ0ZpbkddddbZ00000mO00000Qdobbdddddppdpdbkddppppbb0/!`  ...</span><br><span class="hljs-comment">            .  &quot;)XOCCLLLLLObQLQQQQQQQQOpQQQQQQQmbdddbdQQQQQ0ZQQQQQQQmhobdddddppppppdkbddppw0cjcQuI.</span><br><span class="hljs-comment">            .   &quot;1vQ0CCCLLCCZkmCLLLLLLLL0b0LLQQQQLOdddkqQQQQQmQQQQQLLL0bhappddppppqqqqqdbqOJXzUQ0n+`.</span><br><span class="hljs-comment">            :)vYmCrjrnvzXmbpQCCCCCCLC0dZCLCCLLLCOpdkZCLLQmZLLLLLLCCCpbhhdpppqqqwqqqm0CzuYQYt+&quot;</span><br><span class="hljs-comment">        .  l\zYQQJu|&#123;&#123;&#125;&#123;&#125;JpwwLCCCCCCC0dwCJCCCCCCCZdhQCCQmmCCCCCCJJJJmpdhhpqqqqwmOCzjfrcZu&lt;&#x27;   .</span><br><span class="hljs-comment">        .  [JpppwqwZLJunvYnfjrfrnuvccUdqQJJJJJJJJ0kkJJQOZQJJJJJJJUYJ000QmbqZLYuj//cCLJn&#123;^</span><br><span class="hljs-comment">            .. .&lt;\fxzOwbdufQUcnft\1&#123;&#123;&#123;1&#123;\0QCzXXXYYYUOppULQQLYXzcunrjttnvzzzYJcvxfrcJCX\&lt;^</span><br><span class="hljs-comment">                    IvJ0OC?_?[&#125;&#123;)(()(|\nXvrj||\///tnuXXxxxxt\\\|||\/txcXXvQpmCJJOQv)_:</span><br><span class="hljs-comment">                .    `:i-&#123;_----__-__-_jXcvurtfffjcXUCxffffttfff/\|)1&#123;&#125;]-+(f|&#123;]&#123;)_i:,I:&quot;&#x27;  ...</span><br><span class="hljs-comment">                        ??+++~&gt;ill&gt;&gt;illll!!!!!ii&gt;&gt;+&#123;?_~&lt;&gt;!lII;;IIIl!i&gt;&lt;~&lt;&lt;~~?]&lt;I;!&gt;&gt;lII;&#x27;  .</span><br><span class="hljs-comment">                        ,]il;:&quot;&quot;^^^^^^^````&#x27;&#x27;``^^^:+,^^``````^^^^&quot;&quot;&quot;,,:;l!i~-^I_+-~_+_~&lt;l ..</span><br><span class="hljs-comment">                        ~&lt;;:,,&quot;&quot;&quot;&quot;^^^^^^`````^^&quot;&quot;,~I&quot;&quot;^^^^^^^^^&quot;&quot;&quot;,,,::;I!_&quot;.!~&gt;~+:~~[+&lt;  .</span><br><span class="hljs-comment">                        .^-!;:,,&quot;&quot;&quot;&quot;^^^^^^^``^^^&quot;&quot;&quot;ii&quot;^^^^^^^^&quot;&quot;&quot;&quot;,,,:;;Il_I &quot;_!`~l,-!I-_.</span><br><span class="hljs-comment">                        . l_I;:,,&quot;&quot;&quot;^^^^^^^```^^&quot;&quot;&quot;l&lt;&quot;^^^^^^&quot;&quot;&quot;&quot;&quot;&quot;,,::;Il~&lt;...`..&quot;&#x27;&#x27;&gt;,.&quot;,...</span><br><span class="hljs-comment">                        ...&lt;&lt;I;,&quot;&quot;&quot;&quot;&quot;^^^^^^^`^^^&quot;&quot;&quot;;~&quot;^^^^^^&quot;&quot;&quot;&quot;&quot;,,:::;l&gt;_&#x27;..        ..   ..</span><br><span class="hljs-comment">                        ...&#x27;_&gt;;:,&quot;&quot;&quot;&quot;^^^^^^^^^^^^&quot;&quot;,_:^^^^^^&quot;&quot;&quot;&quot;,,::;;Ii+&quot; ..</span><br><span class="hljs-comment">                        ..  `-i;:,&quot;&quot;&quot;&quot;&quot;&quot;^^^^^^^^^&quot;&quot;&quot;+;^^^^^&quot;&quot;&quot;&quot;&quot;,,:;;I!_,  ..</span><br><span class="hljs-comment">                            &quot;?!;:,&quot;&quot;&quot;&quot;&quot;^^^^^^^^^&quot;&quot;&quot;&gt;I^^^^^&quot;&quot;&quot;&quot;&quot;,,:;;l_I</span><br><span class="hljs-comment">                            . ;_l;,&quot;&quot;&quot;&quot;&quot;&quot;^^^^^^^^&quot;&quot;&quot;&gt;l&quot;^^^^&quot;&quot;&quot;&quot;&quot;,::;l+!..</span><br><span class="hljs-comment">                            ...!+I:,&quot;&quot;&quot;&quot;&quot;^^^^^^^^&quot;&quot;,&gt;l&quot;^^^^&quot;&quot;&quot;,,,:;I&lt;!...</span><br><span class="hljs-comment">                            .  .~&lt;I:,&quot;&quot;&quot;^^^^^^^^^&quot;&quot;&quot;&lt;l&quot;&quot;^^^&quot;&quot;&quot;,,,:;&lt;&lt;.  .</span><br><span class="hljs-comment">                            ....`_!;,,&quot;&quot;&quot;^^^^``^^&quot;&quot;&quot;&lt;l&quot;&quot;&quot;^^&quot;&quot;&quot;&quot;,:;i+`....</span><br><span class="hljs-comment">                            .... :_I:,,&quot;&quot;^^^^``^^&quot;&quot;&quot;~I^^^^^^&quot;&quot;&quot;,;l-^ ....</span><br><span class="hljs-comment">                                    ~&lt;I::,&quot;&quot;^^````^&quot;&quot;&quot;~;&quot;^^^^^&quot;&quot;&quot;:;~I</span><br><span class="hljs-comment">                                    &quot;?!I::,&quot;&quot;^^````&quot;&quot;,+;^^^^^^&quot;&quot;,;i+..</span><br><span class="hljs-comment">                                .._~lI;:,&quot;&quot;^^```&quot;&quot;&quot;~l&quot;&quot;^^^&quot;&quot;,,;_: .</span><br><span class="hljs-comment">                                ..!_!lI;;,&quot;&quot;^^^`^^&quot;i!&quot;&quot;&quot;&quot;&quot;&quot;&quot;:;!+. .</span><br><span class="hljs-comment">                                . :-i!lIIII;,&quot;^^^^&quot;li&quot;&quot;&quot;&quot;&quot;&quot;:II~! ..</span><br><span class="hljs-comment">                                . :?illII!~&gt;!I:,,,,l&gt;&quot;&quot;&quot;&quot;&quot;:Ill_:...</span><br><span class="hljs-comment">                                . :_!lIIII&gt;+&lt;&gt;!llI;ii&quot;&quot;&quot;,Illll_&quot; .</span><br><span class="hljs-comment">                                . i+!lII;;l+~&lt;&lt;&gt;&gt;i!_I::;i~i!ll+&quot; .</span><br><span class="hljs-comment">                                .&#x27;_ilIII;;I&gt;~&lt;&lt;&lt;&gt;&gt;&lt;+lll&gt;+&lt;illl+;...</span><br><span class="hljs-comment">                                    I_III;;;;;l&gt;&lt;&gt;&gt;&gt;i+~!!l&gt;&gt;!!lll&gt;i...</span><br><span class="hljs-comment">                                .]iIII;;;;;;l&gt;&gt;&gt;i!++i!llllllll!+&#x27;..</span><br><span class="hljs-comment">                                l?III;;;;;:;Il!!!l~+!!llIlllll!+I</span><br><span class="hljs-comment">                            . ..]&gt;II;;;;;;;;;;Ill!~~!!lllIIIIll&gt;+..</span><br><span class="hljs-comment">                            ... :&#125;lIII;;;;;;;;;IIl!~+!!llllIIIll!-&quot;</span><br><span class="hljs-comment">                            .. &lt;+llII;;;;;;;;;;Il!+-!!lIIIIIIIll+l</span><br><span class="hljs-comment">                            ...]&gt;llIII;;;;;;;;;;l!~_!!lIIIIIIIll&lt;!</span><br><span class="hljs-comment">                            ..&#x27;]illIII;;;;;;;;;;l!~_!llII;;IIIIl&gt;!</span><br><span class="hljs-comment">                            ..&#x27;?illII;;;;;;;;;;;l!__!lII;;;;;IIl&lt;l</span><br><span class="hljs-comment">                            ...]illII;;;;;;;;;;;ll_+!lI;;;;;;;Il~;</span><br><span class="hljs-comment">                            ...-&gt;llII;;;;;;;;;;IIl?&lt;lI;;;;;;;;Il+&quot;</span><br><span class="hljs-comment">                            .. &lt;&lt;lII;;;;;;;;;;;IIl?iII;;;;;;;Il!+&#x27;</span><br><span class="hljs-comment">                                . I+lII;;;;;;;;;;;II!?lII;;;;;;;;l&lt;! .</span><br><span class="hljs-comment">                            ...^_!lI;;;;;;;;;;;;I&lt;?II;;;;;;;;Il_^ .</span><br><span class="hljs-comment">                            .....+ilII;;;;;;;;;;II?_;;;;;;;;;IIi+..</span><br><span class="hljs-comment">                            . .. !~!lII;;;;;;;;;Il[i;;;;;;;;;II~:...</span><br><span class="hljs-comment">                                &quot;_!lI;I;;;;;;;;I&gt;]II;;;;;;;;;!&lt;....</span><br><span class="hljs-comment">                                .-ilIII;;;;;;III_+;;;;;;;;;;;~: .</span><br><span class="hljs-comment">                                    ~+lIIII;;IIIIl!?l;;;;;;;;;;!~....</span><br><span class="hljs-comment">                                    I_!lIIIIIIIIll++;;;:::::::;~: ....</span><br><span class="hljs-comment">                                    ^!&quot;;IIlIllll!!&#125;!;;::::::;;&gt;+.  .</span><br><span class="hljs-comment">                                .&#x27;&gt;&quot;``^&quot;&quot;,,,,&quot;I?II;;;;II;:&quot;i:</span><br><span class="hljs-comment">                                ..&gt;:&quot;^^^```&#x27;`^&lt;I&#x27;&#x27;&#x27;`^^`&#x27;..^!..</span><br><span class="hljs-comment">                                ..i;&quot;^^^^^^^^:-&quot;&#x27;........&#x27;l:..</span><br><span class="hljs-comment">                                . !!,&quot;&quot;&quot;&quot;&quot;&quot;&quot;^!+^&#x27;........&quot;&gt;.</span><br><span class="hljs-comment">                                ..li:,,,&quot;&quot;&quot;&quot;&quot;+~`&#x27;.......&#x27;!;</span><br><span class="hljs-comment">                                . ;&lt;::,,,,,&quot;,?&gt;`&#x27;.....&#x27;&#x27;&quot;&lt;&#x27;  .</span><br><span class="hljs-comment">                                . &quot;~;:::,,,,:&#125;i`&#x27;......&#x27;lI   .</span><br><span class="hljs-comment">                                    `~I:::::::l\!&#x27;&#x27;...&#x27;&#x27;&#x27;^&lt;`.. .</span><br><span class="hljs-comment">                                    &#x27;+l:::::::&lt;&#123;l&#x27;&#x27;...&#x27;&#x27;&#x27;;i</span><br><span class="hljs-comment">                                    &#x27;-l;;;::;;++l&#x27;&#x27;...&#x27;&#x27;`&lt;&quot;</span><br><span class="hljs-comment">                                    ^]!;;;;;;I~?l&#x27;&#x27;&#x27;.&#x27;&#x27;&#x27;,&lt;.</span><br><span class="hljs-comment">                                . I?!III;;;I+-;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;`i;</span><br><span class="hljs-comment">                                . ;[!IIIIIIl&lt;+:&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;,~`.</span><br><span class="hljs-comment">                                . I1lIIIIIIi~+&quot;`&#x27;&#x27;&#x27;&#x27;^l&lt;..</span><br><span class="hljs-comment">                                .&#x27;(+I;;;;;;&gt;&#125;i&quot;`&#x27;&#x27;&#x27;&#x27;,&gt;! .</span><br><span class="hljs-comment">                                    -jI::IlI;,~(:&quot;^^`^^:_; .</span><br><span class="hljs-comment">                                    nc[/nvQmCf|_&quot;^^^^&quot;&quot;:?. .</span><br><span class="hljs-comment">                                    vp000Qdbqqqil|xnxrXn\^ .</span><br><span class="hljs-comment">                                &#x27;uqZmmmqkbkZ+UZO00Qpdqv`</span><br><span class="hljs-comment">                                ;qhkbddaoookZZOOOOOwbbku^</span><br><span class="hljs-comment">                                . +bdpwwwdhkkZmqbbbbbbaaao0:</span><br><span class="hljs-comment">                                . xdwpwwwpkbhhkbqZZOO0mpkk*+</span><br><span class="hljs-comment">                                IqmZmqwwkhkhqOZZ00000Lmqpbx.</span><br><span class="hljs-comment">                                foqCXUJLOqdbQCCQOOO000Opdpdx&#x27;</span><br><span class="hljs-comment">                                nabw00QQ0Zqh0zcvczYUJCL0mmwbf..</span><br><span class="hljs-comment">                                !QhpkkkkkkhapZCXjuccXYJCQqpbhi</span><br><span class="hljs-comment">                                ^)nLmqpbbbbpwmmwmmZZmmwqbhh*_</span><br><span class="hljs-comment">                                    .^:Ill;,&#123;0qqdddddpddbhakJ,</span><br><span class="hljs-comment">                                            &quot;_\xvXUJCJXuf&#123;&gt;&#x27;</span><br><span class="hljs-comment">                                                    ....</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码画</category>
      
    </categories>
    
    
    <tags>
      
      <tag>美少女</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>22新生赛出题</title>
    <link href="/2023/05/15/22%E6%96%B0%E7%94%9F%E8%B5%9B%E5%87%BA%E9%A2%98/"/>
    <url>/2023/05/15/22%E6%96%B0%E7%94%9F%E8%B5%9B%E5%87%BA%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="鼓励计划废弃板子题"><a class="markdownIt-Anchor" href="#鼓励计划废弃板子题"></a> 鼓励计划（废弃,板子题）</h3><p>DZ要考六级口语了，但DZ不爱学习，整天游手好闲，无所事事，刚开始妄想裸考过去，没有任何准备。但事实很残酷，大家都知道这次六级会比以前难（虚构）。考试临头了，DZ才明白这个道理（妄想裸考是不可能的），但由于不知道怎么准备，DZ现在十分苦恼。DZ的室友是个热心肠，他想帮助DZ，于是他决定鼓励DZ多学习英语。</p><p>室友苦思冥想，想到了如下做法：</p><ul><li><p>室友决定给DZ进行为期<code>n</code>天的鼓励，但在这<code>n</code>天内限制DZ最多只能说<code>m</code>句英语（不能过度学习）。</p></li><li><p>第 $ i $ 天允许DZ说 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \le i \le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>)句英语 或者不说。</p></li><li><p>由于DZ说的英语每天都不同，室友会根据当天的情况对DZ进行奖励</p><p>更确切地说，如果DZ在第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 天说了英语，每说一句DZ就会得到奖励值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \le i \le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>)。规定DZ初始奖励值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 。</p></li></ul><p>DZ为了得到更多奖励会尽可能多说英语，但不会超过<code>m</code>句。室友虽然是热心肠，但他并不确定对DZ的鼓励是否有效，于是他设置了一个奖励值的阈值<code>M</code>,若DZ的奖励值能达到或者超过阈值，则可认为鼓励成功，否则鼓励是失败的。</p><h4 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入</h4><p>第一行 输入四个数 <code>n,m,M</code>分别表示：DZ的改造天数<code>n</code>，DZ最多只能说<code>m</code>句英语，以及奖励值阈值<code>M</code>。</p><p>第二行 输入n个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，表示第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 天允许DZ说的英语数量。</p><p>第二行 输入n个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，表示第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 天DZ说一句英语会得到的奖励值。</p><h4 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出</h4><p>若鼓励行动失败则输出<code>&quot;Failed&quot;</code>否则输出<code>&quot;Successful&quot;</code>,注意：不包含引号<code>&quot;&quot;</code>。</p><h4 id="数据范围"><a class="markdownIt-Anchor" href="#数据范围"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">1 \le n \le 10^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">1 \le m \le 10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>M</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup></mrow><annotation encoding="application/x-tex">1 \le M \le 10^{18}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span>.</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1 \le a_i \le 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><msub><mi>b</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1 \le b_i \le 10^{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>.</p><h4 id="时间限制"><a class="markdownIt-Anchor" href="#时间限制"></a> 时间限制</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mtext>、</mtext><mi>c</mi><mo>+</mo><mo>+</mo><mn>1</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">c、c++ 1s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">c</span><span class="mord cjk_fallback">、</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">1</span><span class="mord mathnormal">s</span></span></span></span>.</p><p>其他语言 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">2s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal">s</span></span></span></span>.</p><h4 id="样例输入1"><a class="markdownIt-Anchor" href="#样例输入1"></a> 样例输入1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">100</span><br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h4 id="样例输出1"><a class="markdownIt-Anchor" href="#样例输出1"></a> 样例输出1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">Failed<br></code></pre></td></tr></table></figure><ul><li>样例解释：选择第 1、3、4、5、6天，恰好为 10 句，得到最大奖励值60，但小于阈值100，因此失败了。</li></ul><h4 id="样例输入2"><a class="markdownIt-Anchor" href="#样例输入2"></a> 样例输入2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">4</span> <span class="hljs-number">9</span> <span class="hljs-number">26</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="样例输出2"><a class="markdownIt-Anchor" href="#样例输出2"></a> 样例输出2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">Successful<br></code></pre></td></tr></table></figure><ul><li>样例解释：选择第 2、3天或者第3、4天，DZ说了8句英语，得到最大奖励值34，大于阈值21，因此成功了。</li></ul><h4 id="solution01背包"><a class="markdownIt-Anchor" href="#solution01背包"></a> Solution(01背包)：</h4><p>题目是很明显的01背包，在保证DZ 说的英语不超过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">m</span></span></span></span> 句的情况下， 动态规划求其最大的奖励值，若最大值都小于阈值则鼓励失败。</p><p>板子题。直接上代码。</p><h4 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-type">int</span> n,m;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> M;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; M;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++) cin &gt;&gt; a[i];<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++) cin &gt;&gt; b[i];<br><br>    vector&lt;vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; &gt; <span class="hljs-built_in">dp</span>(n+<span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt;(m+<span class="hljs-number">1</span>));<span class="hljs-comment">//前i天说英语不超过j的最大奖励值</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j ++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(j&lt;a[i]) dp[i][j] = dp[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">else</span> dp[i][j] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][j],dp[i<span class="hljs-number">-1</span>][j-a[i]]+a[i]*b[i]);<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; (dp[n][m]&lt;M?<span class="hljs-string">&quot;Failed\n&quot;</span>:<span class="hljs-string">&quot;Successful\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="序列的与和easy-version"><a class="markdownIt-Anchor" href="#序列的与和easy-version"></a> 序列的与和(Easy Version)</h3><p><strong>注</strong>：Easy 与 Hard 唯一不同在于数据范围。</p><p>WY是一个序列大师，他喜欢研究一些和序列相关的操作。时间长了，WY对某一些特定的序列产生了感情，换句话说，WY喜欢和这些特定的序列打交道。比如说WY最近就迷上了这样一类序列：</p><ul><li>我们规定序列的<strong>与和</strong>定义为序列中所有元素按位与得到的结果。<ul><li>如序列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,2,3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">]</span></span></span></span> ：其与和结果为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi mathvariant="normal">&amp;</mi><mn>2</mn><mi mathvariant="normal">&amp;</mi><mn>3</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">1\&amp;2\&amp;3=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">&amp;</span><span class="mord">2</span><span class="mord">&amp;</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>.</li></ul></li><li>若一个序列与和的结果，其二进制表示形式下包含 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，WY则会认为这是他喜欢的序列</li></ul><p>现在WY的手里有一个序列了，他想知道，这个的子序列中有多少个他喜欢的序列。由于WY已经非常熟悉这类序列了，所以他想考考你，看看你是否能解决这个问题。</p><p>子序列定义为：从原序列中去除几个（可以为零个）元素后得到的序列。</p><h4 id="输入-2"><a class="markdownIt-Anchor" href="#输入-2"></a> 输入</h4><ul><li>第一行两个正整数， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> ：</li></ul><p>​   分别表示序列元素个数，以及WY喜欢的序列类型的与和，在其二进制形式下包含 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的个数。</p><ul><li>第二行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>个 数，表示给定的序列元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</li></ul><h4 id="输出-2"><a class="markdownIt-Anchor" href="#输出-2"></a> 输出</h4><p>对于每个测试样例输出一个数字，表示你统计的满足要求的子序列的个数。</p><h4 id="数据范围-2"><a class="markdownIt-Anchor" href="#数据范围-2"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>20</mn><mo separator="true">,</mo><mn>0</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mn>20</mn></mrow><annotation encoding="application/x-tex">1\le n\le20,0\le k\le20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><msup><mn>2</mn><mn>64</mn></msup><mo>−</mo><mn>1</mn><mo stretchy="false">(</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0\le a_i \le 2^{64}-1(i=1,2,...,n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><h4 id="时间限制-2"><a class="markdownIt-Anchor" href="#时间限制-2"></a> 时间限制</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mtext>、</mtext><mi>c</mi><mo>+</mo><mo>+</mo><mn>1</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">c、c++1s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">c</span><span class="mord cjk_fallback">、</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">1</span><span class="mord mathnormal">s</span></span></span></span></p><p>其他语言<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">2s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal">s</span></span></span></span></p><h4 id="样例输入"><a class="markdownIt-Anchor" href="#样例输入"></a> 样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">3</span> <span class="hljs-number">6</span><br><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><h4 id="样例输出"><a class="markdownIt-Anchor" href="#样例输出"></a> 样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>样例解释：对于样例，其子序列有：<ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span></span></span></span>：其与和为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>（二进制）,仅包含一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，不为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>，所以对答案贡献为零</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2,4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">]</span></span></span></span>：与和为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ,同理，贡献为零。</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>：与和结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2,4,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>：与和结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span></span></span></span>：与和结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>100</mn></mrow><annotation encoding="application/x-tex">100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>4</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[4,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>：与和结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>：与和结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li></ul></li></ul><p>​综上，答案为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><h4 id="solution"><a class="markdownIt-Anchor" href="#solution"></a> Solution：</h4><p>n的范围给到20，可以考虑二进制枚举序列的组合情况，暴力求各个子序列的与和，唯一需注意的是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><msup><mn>2</mn><mn>64</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 \le a_i \le 2^{64}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 很大，需用unsigned long long存。</p><p>不懂二进制枚举的自行查一下，不难（其实就是暴力枚举各种子序列情况）。</p><h4 id="code-2"><a class="markdownIt-Anchor" href="#code-2"></a> Code:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long                              </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,k;cin &gt;&gt; n &gt;&gt; k;<br><span class="hljs-function">vector&lt;ull&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++) cin &gt;&gt; a[i];<br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; (<span class="hljs-number">1</span> &lt;&lt; n);i ++)<span class="hljs-comment">//二进制枚举</span><br>&#123;<br>ull sum = <span class="hljs-number">-1</span>;<span class="hljs-comment">//2^64-1;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; n;j ++)<br>&#123;<br><span class="hljs-keyword">if</span>(i&amp;(<span class="hljs-number">1</span>&lt;&lt;j)) sum &amp;= a[j];<span class="hljs-comment">//当前情况的子序列用到了第j个元素</span><br>&#125;<br><span class="hljs-keyword">if</span>(__builtin_popcount(sum)==k) res ++;<br>&#125; <br>cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<span class="hljs-comment">//cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="序列的与和hard-version"><a class="markdownIt-Anchor" href="#序列的与和hard-version"></a> 序列的与和（Hard Version）</h3><p>WY是一个序列大师，他喜欢研究一些和序列相关的操作。时间长了，WY对某一些特定的序列产生了感情，换句话说，WY喜欢和这些特定的序列打交道。比如说WY最近就迷上了这样一类序列：</p><ul><li>我们规定序列的<strong>与和</strong>定义为序列中所有元素按位与得到的结果。<ul><li>如序列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,2,3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">]</span></span></span></span> ：其与和结果为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mi mathvariant="normal">&amp;</mi><mn>2</mn><mi mathvariant="normal">&amp;</mi><mn>3</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">1\&amp;2\&amp;3=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">&amp;</span><span class="mord">2</span><span class="mord">&amp;</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>.</li></ul></li><li>若一个序列与和的结果，其二进制表示形式下包含 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，WY则会认为这是他喜欢的序列</li></ul><p>现在WY的手里有一个序列了，他想知道，这个的子序列中有多少个他喜欢的序列。由于WY已经非常熟悉这类序列了，所以他想考考你，看看你是否能解决这个问题。</p><p>子序列定义为：从原序列中去除几个（可以为零个）元素后得到的序列。</p><h4 id="输入-3"><a class="markdownIt-Anchor" href="#输入-3"></a> 输入</h4><ul><li>第一行两个正整数， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> ：</li></ul><p>​   分别表示序列元素个数，以及WY喜欢的序列类型的与和其二进制形式包含 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的个数。</p><ul><li>第二行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>个 数，表示给定的序列元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。</li></ul><h4 id="输出-3"><a class="markdownIt-Anchor" href="#输出-3"></a> 输出</h4><p>对于每个测试样例输出一个数字，表示你统计的满足要求的子序列的个数。答案可能很大，所以你需要对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">10^9+7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>取模。</p><h4 id="数据范围-3"><a class="markdownIt-Anchor" href="#数据范围-3"></a> 数据范围</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>2</mn><mo separator="true">⋅</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo separator="true">,</mo><mn>0</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">1\le n\le2·10^5,0\le k\le6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>63</mn><mo stretchy="false">(</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0\le a_i \le 63(i=1,2,...,n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mord">3</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><h4 id="时间限制-3"><a class="markdownIt-Anchor" href="#时间限制-3"></a> 时间限制</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mtext>、</mtext><mi>c</mi><mo>+</mo><mo>+</mo><mn>1</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">c、c++1s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">c</span><span class="mord cjk_fallback">、</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">1</span><span class="mord mathnormal">s</span></span></span></span></p><p>其他语言<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">2s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal">s</span></span></span></span></p><h4 id="样例输入-2"><a class="markdownIt-Anchor" href="#样例输入-2"></a> 样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">3</span> <span class="hljs-number">6</span><br><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><h4 id="样例输出-2"><a class="markdownIt-Anchor" href="#样例输出-2"></a> 样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>样例解释：对于样例，其子序列有：<ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span></span></span></span>：其与和为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>（二进制）,仅包含一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，不为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>，所以对答案贡献为零</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2,4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">]</span></span></span></span>：与和为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ,同理，贡献为零。</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>：与和结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[2,4,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>：与和结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span></span></span></span>：与和结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>100</mn></mrow><annotation encoding="application/x-tex">100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>4</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[4,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>：与和结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>：与和结果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li></ul></li></ul><p>​综上，答案为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。</p><h4 id="solution-2"><a class="markdownIt-Anchor" href="#solution-2"></a> Solution：</h4><p>由于序列元素<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的数据范围很小，且与运算的性质（越与越小），与和结果只能在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>63</mn></mrow><annotation encoding="application/x-tex">63</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">3</span></span></span></span> 间，可以考虑枚举<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>63</mn></mrow><annotation encoding="application/x-tex">63</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">3</span></span></span></span> 的所有可能，然后动态规划求解。</p><p>现定义 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 表示前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 个元素的子序列中与和为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> 的个数,考虑当前的元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 对哪些情况有贡献即可，则有以下转移关系：</p><ul><li>对于当前元素 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，若选择，则有：<ul><li><code>dp[i][a[i]&amp;j] = dp[i][j&amp;a[i]] + dp[i-1][j]</code>,表示选择当前元素<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>对与和为 <code>a[i]&amp;j</code>的贡献。</li></ul></li><li>若不选 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ：<ul><li><code>dp[i][j] = dp[i][j] + d[i-1][j]</code></li></ul></li><li>同时，不管选不选 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ,当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>单独为一个序列时，对<code>dp[i][a[i]]</code>也有贡献：<ul><li><code>dp[i][a[i]] = dp[i][a[i]] + 1</code></li></ul></li></ul><p>最后统计下前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 个元素的子序列与和在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>63</mn></mrow><annotation encoding="application/x-tex">63</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">3</span></span></span></span> 中，有多少二进制表示下有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 位为1的就行。</p><h4 id="code-3"><a class="markdownIt-Anchor" href="#code-3"></a> Code：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,k;cin &gt;&gt; n &gt;&gt; k;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">dp</span>(n+<span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; (<span class="hljs-number">64</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;cin &gt;&gt; x;<br>        dp[i][x] += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; <span class="hljs-number">64</span>;j ++)  dp[i][x&amp;j] = (dp[i][x&amp;j]+dp[i<span class="hljs-number">-1</span>][j])%mod;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; <span class="hljs-number">64</span>;j ++)  dp[i][j] = (dp[i][j]+dp[i<span class="hljs-number">-1</span>][j])%mod;<br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">64</span>;i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(__builtin_popcount(i)==k) <span class="hljs-comment">//这个函数就是统计二进制下有几位为1，不知道的查一下</span><br>        &#123;<br>            res += dp[n][i];<br>            res %= mod;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>出题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AJAX</title>
    <link href="/2023/05/15/AJAX/"/>
    <url>/2023/05/15/AJAX/</url>
    
    <content type="html"><![CDATA[<h2 id="ajax"><a class="markdownIt-Anchor" href="#ajax"></a> AJAX</h2><ul><li><p><a href="https://www.w3cschool.cn/ajax/ajax-xmlhttprequest-response.html">AJAX XHR-创建对象_w3cschool</a></p></li><li><p>概念：AJAX(Asynchronous JavaSript And XML):<strong>异步的</strong>JavaScript和XML</p></li><li><p>AJAX作用：</p><ol><li><p>与服务器进行数据交换：通过AJAX可以给服务器发送请求，并获取服务器响应的数据</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307142138151.png" alt="img-2390398038928" /></p><ul><li>使用AJAX和服务器进行通信，就可以使用HTML+AJAX来<strong>替换JSP</strong>页面了</li><li>异步交互：可以在<strong>不重新加载整个页面的</strong>的情况下，与服务器交换数据并更新部分网页的技术，如：搜索联想、用户名是否可用校验，等等</li></ul></li></ol></li><li><p><strong>异步与同步</strong></p><ul><li><p>假设客户端正在做某件事，然后碰到了某个问题，需要向服务端发送请求，并接收响应。</p></li><li><p>同步：必须等服务器响应完成，才能继续做后面的事</p></li><li><p>异步：不用等服务器响应完成，客户端可以继续做自己的事，如果服务器有响应，再接收便是。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.创建核心对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> xmlhttp;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>)</span><br><span class="language-javascript">    &#123;<span class="hljs-comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="language-javascript">        xmlhttp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">else</span></span><br><span class="language-javascript">    &#123;<span class="hljs-comment">// code for IE6, IE5</span></span><br><span class="language-javascript">        xmlhttp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">//2.发送请求</span></span><br><span class="language-javascript">    xmlhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;http://localhost:8080/AJAXDemo/ajaxServlet&quot;</span>);</span><br><span class="language-javascript">    xmlhttp.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript">    <span class="hljs-comment">//3.获取响应数据</span></span><br><span class="language-javascript">    xmlhttp.<span class="hljs-property">onreadystatechange</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (xmlhttp.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> &amp;&amp; xmlhttp.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="axios异步框架"><a class="markdownIt-Anchor" href="#axios异步框架"></a> Axios异步框架</h3><ul><li><p><a href="https://www.axios-http.cn/">Axios 中文文档 | Axios 中文网 | Axios 是一个基于 promise 的网络请求库，可以用于浏览器和 node.js (axios-http.cn)</a></p></li><li><p>使用方式</p><ol><li><p>引入axios的js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用axios发送请求，并获取响应结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;get&quot;</span>,<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;http://localhost:8080/ajax-demo/ajaxServlet?username=zhangsan&quot;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resp</span>)&#123;<br>    <span class="hljs-title function_">alert</span>(resp.<span class="hljs-property">data</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;post&quot;</span>,<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;http://localhost:8080/ajax-demo/ajaxServlet&quot;</span><br>    <span class="hljs-attr">data</span>:<span class="hljs-string">&quot;username=zhangsan&quot;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resp</span>)&#123;<br>    <span class="hljs-title function_">alert</span>(resp.<span class="hljs-property">data</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol></li><li><p>Axios请求方式别名</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307142138179.png" alt="image-20230709101420323" /></p></li></ul><h3 id="json"><a class="markdownIt-Anchor" href="#json"></a> JSON</h3><ul><li><p>概念：JavaScript Object Notation。JavaScript对象表示法</p></li><li><p>语法简单，层次结构鲜明，现多用于<strong>数据载体</strong>，再网络中进行数据传输</p></li><li><p>e.g.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">var json = <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;value1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;value2&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;key4&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;value4_1&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;value4_2&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;key5&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            ...<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>JSON基础语法</p><ul><li><p>定义</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">var 变量名 = <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;key1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;value1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ley2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;value2&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307142138326.png" alt="image-20230709104645127" /></p><ul><li><p>e.g.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">var json = <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;zhangsan&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;addr&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;北京&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;上海&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;西安&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>获取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">变量名.<span class="hljs-property">key</span><br>json.<span class="hljs-property">name</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>JSON数据与Java对象转换</p><ul><li>请求数据：JSON字符串转为Java对象</li><li>响应数据：Java对象转为JSON字符串</li></ul></li><li><p><strong>Fastjson</strong>是阿里巴巴提供的一个Java语言编写的高性能、功能完善的JSON库，是目前Java语言中最快的JSON库，可以实现Java对象和JSON字符串的相互转换</p><ul><li><p>使用</p><ol><li><p>导入坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.62<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Java对象转JSON</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> JSON.toJSONString(obj);<br></code></pre></td></tr></table></figure></li><li><p>JSON字符串转Java对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> JSON.parseObject(jsonStr,User.class);<br></code></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>request.getParameter不能接收json对象</p><ul><li><p>解决方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取请求体数据</span><br><span class="hljs-type">BufferReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> request.getReader();<br><span class="hljs-type">String</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> reader.readLine();<br><span class="hljs-comment">//将数据转换为Java对象</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> JSON.parseObject(param,User.class);<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AJAX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Filter和Listener</title>
    <link href="/2023/05/15/Filter%E5%92%8CListener/"/>
    <url>/2023/05/15/Filter%E5%92%8CListener/</url>
    
    <content type="html"><![CDATA[<h2 id="filter"><a class="markdownIt-Anchor" href="#filter"></a> Filter</h2><ul><li>概念：Filter表示过滤器，是JavaWeb三大组件（Servlet、Filter、Listener）之一。</li><li>过滤器可以把对资源的请求<strong>拦截</strong>下来，从而是新鲜一些特殊的功能</li><li>过滤器一般完成一些通用的操作，比如权限控制，统一编码处理，敏感字符处理等等......</li></ul><h3 id="快速入门"><a class="markdownIt-Anchor" href="#快速入门"></a> 快速入门</h3><ol><li><p>定义类，实现Filter接口，并重写其所有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置Filter拦截资源路径：在类上定义<code>@WebFilter</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span>&#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>在doFilter方法中输出一句话，并放行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request,ServletResponse response,FilterChain chain)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;filerdemo excuting...&quot;</span>);<br>    chain.doFilter(request,response)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ul><li><p>执行逻辑</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307142143562.png" alt="image-20230708225157708" /></p></li><li><p>根上边的执行流程可以得出以下结论：</p><ul><li>放行前，对request数据进行处理</li><li>放行后，对response数据进行处理</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">//System.out.println(&quot;filterdemo excuting....&quot;);</span><br>        <span class="hljs-comment">//放行前，对request数据进行处理</span><br>        chain.doFilter(request, response);<br>        <span class="hljs-comment">//放行后对response数据进行处理</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="filer使用细节"><a class="markdownIt-Anchor" href="#filer使用细节"></a> Filer使用细节</h3><h4 id="filter拦截路径配置"><a class="markdownIt-Anchor" href="#filter拦截路径配置"></a> Filter拦截路径配置</h4><ul><li><p>Filter根据需求，配置不同的拦截路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Filterdemo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span>&#123;...&#125;<br></code></pre></td></tr></table></figure></li><li><p>拦截具体的资源，比如：<code>/index.jsp</code>。只有访问index.jsp时才会被拦截。</p></li><li><p>目录拦截，比如：<code>/user/*</code>。访问user目录下的任何资源都会被拦截。</p></li><li><p>后缀名拦截，比如：<code>*.jsp</code>。访问后缀名为<code>jsp</code>的资源都会被拦截。</p></li><li><p>拦截所有：<code>/*</code>。访问该web应用任何资源都被拦截</p></li></ul><h4 id="过滤器链"><a class="markdownIt-Anchor" href="#过滤器链"></a> 过滤器链</h4><ul><li><p>一个Web应用中可以配置<strong>多个</strong>过滤器，这多个过滤器被称为<strong>过滤器链</strong></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307142142753.png" alt="image-20230708230528554" /></p></li><li><p>执行顺序，按照过滤器链顺序执行。</p><ul><li>那么怎么确定过滤器链中的优先级顺序？<ul><li>根据过滤器类名，按字符串的字典序确定先后。</li></ul></li></ul></li><li><p>案例</p><ul><li><p>场景：在登录前不可访问服务器除了登录和注册之外的资源，因此做一个登录过滤器</p><ul><li><p>任意访问请求都需要拦截，因此拦截路径为<code>/*</code>。</p><ul><li>但是在拦截后需要判断是否为访问登录或者注册相关资源，如果是，则应放行</li></ul></li><li><p>步骤</p><ol><li>判断用户是否登录<ul><li>如果登录，我们会将user对象写入Session。因此可以根据Session是否为空来判断登录状态。</li></ul></li><li>若登录方形，否则跳转登录页面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.org.Filter;<br><br><span class="hljs-keyword">import</span> com.org.pojo.pojo.User;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (HttpServletRequest)request;<br>        <span class="hljs-comment">//对登录、注册相关资源进行放行</span><br>        String[] urls = &#123;<span class="hljs-string">&quot;/login.jsp&quot;</span>,<span class="hljs-string">&quot;/imgs/&quot;</span>,<span class="hljs-string">&quot;/css/&quot;</span>,<span class="hljs-string">&quot;/loginServlet&quot;</span>,<span class="hljs-string">&quot;/register.jsp&quot;</span>,<span class="hljs-string">&quot;/registerServlet&quot;</span>,<span class="hljs-string">&quot;/checkCodeServlet&quot;</span>&#125;;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> req.getRequestURL().toString();<br>        <span class="hljs-keyword">for</span>(String u:urls)&#123;<br>            <span class="hljs-keyword">if</span>(url.contains(u))&#123;<br>                <span class="hljs-comment">//该url与登录、注册相关</span><br>                chain.doFilter(request, response);<span class="hljs-comment">//放行</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//判断是否登录</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">//如果User对象存在则放行，否则跳转登录页面</span><br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>            req.setAttribute(<span class="hljs-string">&quot;login-msg&quot;</span>,<span class="hljs-string">&quot;您尚未登录！&quot;</span>);<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/FilerDemo/index.jsp&quot;</span>).forward(req,response);<br>        &#125;<br>        <span class="hljs-keyword">else</span> chain.doFilter(request, response);<span class="hljs-comment">//放行</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="listener"><a class="markdownIt-Anchor" href="#listener"></a> Listener</h2><ul><li><p>概念：Listener表示监听器，是JavaWeb三大组件（Servlet、Filter、Listener）之一。</p></li><li><p>监听器可以监听就是在appliaction，session，request三个对象创建、销毁或者往其中添加修改删除属性时<strong>自动</strong>执行代码的功能组件</p></li><li><p>Listener分类：JavaWeb提供了8类监听器</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307142143871.png" alt="image-20230708233913198" /></p></li></ul><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><ol><li><p>定义类实现对应监听器接口</p></li><li><p>给类添加<code>@WebListener</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.org.Listener;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletContextEvent;<br><span class="hljs-keyword">import</span> javax.servlet.ServletContextListener;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebListener;<br><br><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListenerDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        <span class="hljs-comment">//加载资源</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> &#123;<br>        <span class="hljs-comment">//释放资源</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Filer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MVC和三层架构</title>
    <link href="/2023/05/15/MVC%E6%A8%A1%E5%BC%8F%E5%92%8C%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    <url>/2023/05/15/MVC%E6%A8%A1%E5%BC%8F%E5%92%8C%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="mvc模式和三层架构"><a class="markdownIt-Anchor" href="#mvc模式和三层架构"></a> MVC模式和三层架构</h2><ul><li>MVC是一种分层开发的模式，其中：<ul><li>M：Model，业务模型，处理业务</li><li>V：view，视图，界面展示</li><li>C：Controller，控制器，处理请求，调用模型和视图</li></ul></li><li>MVC好处：<ul><li>职责单一，互不影响</li><li>有利于分工协作</li><li>有利于组件重用</li></ul></li></ul><h3 id="三层架构"><a class="markdownIt-Anchor" href="#三层架构"></a> 三层架构</h3><ul><li>表现层Web层<ul><li>接收请求，封装数据，调用业务逻辑层，响应数据</li><li><a href="http://com.xxxx.web">com.xxxx.web</a> or com.xxx.controller</li></ul></li><li>业务逻辑层Service层<ul><li>对业务逻辑进行封装，组合数据访问层层中基本功能，形成复杂的业务逻辑</li><li>com.xxxx.service</li></ul></li><li>数据访问层Dao(data access object)<ul><li>对数据库的CRUD基本操作</li><li>com.xxxx.dao or com.xxx.mapper</li></ul></li><li>比如：SSM(springMVC，Spring，MyBatis)</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb基础架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis</title>
    <link href="/2023/05/15/MyBatis%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/15/MyBatis%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="mybatis笔记"><a class="markdownIt-Anchor" href="#mybatis笔记"></a> MyBatis笔记</h1><p><strong>什么是MyBatis？</strong></p><ul><li>MyBatis是一款优秀的<strong>持久层框架</strong>,用于简化JDBC开发</li><li>MyBatis本是Apache的一个开源项目iBatis，2010年这个项目由apache software foundation迁移到了google code，并改名为MyBatis。2013年11月迁移到Github</li><li>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></li></ul><p><strong>持久层</strong></p><ul><li>负责将数据保存到数据库的那一层的代码</li><li>javaEE三层架构：表现层、业务层、持久层</li></ul><p><strong>框架</strong></p><ul><li>框架就是一个半成品的软件，是一套可重用、通用的、软件基础代码模型</li><li>在框架的基础之上构建软件编写更加高效、规范、通用、可扩展</li></ul><p><strong>JDBC的缺点</strong></p><ul><li>硬编码<ul><li>注册驱动，获取连接</li><li>SQL语句</li></ul></li><li>操作繁琐<ul><li>手动设置参数</li><li>手动封装结果集</li></ul></li></ul><p><strong>MyBatis简化</strong></p><ul><li><p>硬编码——&gt;<em>配置文件</em></p></li><li><p>操作繁琐——&gt;<em>自动完成</em></p></li></ul><h2 id="mybatis快速入门"><a class="markdownIt-Anchor" href="#mybatis快速入门"></a> MyBatis快速入门</h2><p><strong>步骤</strong></p><ol><li>创建user表，添加数据</li><li>创建模块，导入坐标</li><li>编写Mybatis核心配置文件--&gt;替换连接信息，解决听编码问题</li><li>编写SQL映射文件--&gt;统一管理sql语句，解决硬编码问题</li><li>编码<ol><li>定义POJO类</li><li>加载核心配置文件，获取SqlSessionFactory对象</li><li>获取SqlSession对象，执行SQL语句</li><li>释放资源</li></ol></li></ol><h2 id="mapper代理开发"><a class="markdownIt-Anchor" href="#mapper代理开发"></a> Mapper代理开发</h2><ul><li><p>目的</p><ul><li>解决原生开发方式中的硬编码</li><li>简化后期执行SQL</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; users =<br>sqlSession.selectList(<span class="hljs-string">&quot;test.selectAll&quot;</span>);<br><span class="hljs-comment">//将上面这种方式换为下面这种方式</span><br><span class="hljs-type">UserMapper</span> <span class="hljs-variable">userMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>List&lt;User&gt; users = userMapper.selectAll();<br></code></pre></td></tr></table></figure></li><li><p><strong>步骤</strong></p><ol><li>定义与SQL映射文件同名的Mapper接口，并将Mapper接口与SQL映射文件放置在统一目录下</li><li>设置SQL映射文件的namespace属性为Mapper接口全限定名</li><li>在Mapper接口中定义方法，方法名就是SQL映射文件中sql语句的id，并保持参数类型和返回值类型一致</li><li>编码<ol><li>通过Sqlsession的getMapper方法获取Mapper接口的代理对象</li><li>调用对应方法完成执行</li></ol></li></ol><ul><li>细节： 如果Mapper接口名称和SQL映射文件名称相同，并且在同一目录下，则可以使用包扫描的方式简化SQL映射文件的加载</li></ul></li></ul><h2 id="mybatis核心配置文件"><a class="markdownIt-Anchor" href="#mybatis核心配置文件"></a> MyBatis核心配置文件</h2><h4 id="configuration"><a class="markdownIt-Anchor" href="#configuration"></a> configuration</h4><h4 id="environments"><a class="markdownIt-Anchor" href="#environments"></a> environments</h4><ul><li><p>环境，配置数据库的连接环境信息，比如配置开发库，测试库，生产库等。可配置多个environment,通过default属性切换不同的environment</p></li><li><p>transactionManager</p><ul><li>事务管理模式，例如采用 JDBC 的事务管理模式</li></ul></li><li><p>dataSource</p><ul><li>数据库连接池信息，比如驱动<code>driver</code>,路径<code>url</code>，用户名<code>username</code>,密码<code>password</code>等</li></ul></li></ul><h4 id="mappers"><a class="markdownIt-Anchor" href="#mappers"></a> mappers</h4><ul><li>映射器</li></ul><h4 id="typealiases"><a class="markdownIt-Anchor" href="#typealiases"></a> typeAliases</h4><ul><li>类型别名</li><li>可以简化xxxMapper.xml的返回类型的编写</li></ul><p><strong>注意</strong>：这些属性的顺序一定按照官方文档给的顺序从上到下定义</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131346046.png" alt="image-20230701124422157" /></p><h2 id="配置文件完成增删改查"><a class="markdownIt-Anchor" href="#配置文件完成增删改查"></a> 配置文件完成增删改查</h2><h4 id="对结果集的封装"><a class="markdownIt-Anchor" href="#对结果集的封装"></a> 对结果集的封装</h4><p>当封装类属性名与表的列名不一致时，不能完成对象的封装。</p><p>可以在对应Mapper.xml里边使用如下方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">id:唯一标识，type:映射的类型，支持别名<br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;brandResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;brand&quot;</span>&gt;</span><br>    两种属性：<br>    id---用来映射主键<br>    result---用来映射一般列<br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;brand_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;brandName&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;brand&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">*参数占位符<br>1.#&#123;&#125;转换为？占位符，传入参数，防止sql注入<br>2.$&#123;&#125;拼接sql<br>*parameterType=&quot;int&quot;可以省略，一般不会写<br>*特殊字符,如：&lt;<br>1.转义字符<span class="hljs-symbol">&amp;lt;</span>                   <br>2.CDATA区<br>&lt;![CDATA[<br>&lt;<br>]]&gt;<br></code></pre></td></tr></table></figure><p>mapper文件的语句对应多参数传入时可采用下列方法</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131347383.png" alt="image-20230701143057399" /></p><ul><li><p>@Param(&quot;&quot;);</p><ul><li><pre class="highlight"><code class="java">List&lt;Brand&gt; <span class="hljs-title function_">selectByCondition</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;status&quot;)</span> <span class="hljs-type">int</span> status,<span class="hljs-meta">@Param(&quot;company_name&quot;)</span> String company_name,<span class="hljs-meta">@Param(&quot;brand_name&quot;)</span> String brand_name)</span>;&lt;!--code￼<span class="hljs-number">3</span>--&gt;</code></pre></li></ul></li><li><p>封装成对应实体类对象</p><ul><li><pre class="highlight"><code class="java"><span class="hljs-type">int</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">company_name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;华为&quot;</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">brand_name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;华为&quot;</span>;        company_name = <span class="hljs-string">&quot;%&quot;</span> + company_name + <span class="hljs-string">&quot;%&quot;</span>;        brand_name = <span class="hljs-string">&quot;%&quot;</span> + brand_name + <span class="hljs-string">&quot;%&quot;</span>;<span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">brand</span>();brand.setStatus(status);brand.setCompanyName(company_name);brand.setBrandName(brand_name);List&lt;Brand&gt; brands = brandMapper.selectByCondition(brand);&lt;!--code￼<span class="hljs-number">4</span>--&gt;</code></pre></li></ul></li></ul><h4 id="添加"><a class="markdownIt-Anchor" href="#添加"></a> 添加</h4><ul><li>添加时关闭事务（开启自动提交）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><ul><li><p>若开启事务，则这样提交事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sqlSession.commit();<br></code></pre></td></tr></table></figure></li><li><p>主键返回</p><ul><li><p>用useGeneratedKeys和keyProperty属性，其中keyProperty指示实体类的存储主键的那个成员变量</p></li><li><pre class="highlight"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span>       insert into tb_brand(brand_name, company_name, ordered, description, status)        values (#&#123;brand_name&#125;,#&#123;company_name&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><span class="hljs-comment"><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### 修改<br><br>##### 修改全部字段<br><br>```xml<br>&lt;update id=<span class="hljs-string">&quot;update&quot;</span>&gt;<br>        update tb_brand<br>        set brand_name   = #&#123;brand_name&#125;,<br>            company_name = #&#123;company_name&#125;,<br>            ordered      = #&#123;ordered&#125;,<br>            description  = #&#123;description&#125;,<br>            status       = #&#123;status&#125;<br>        <span class="hljs-keyword">where</span> id = #&#123;id&#125;;<br>    &lt;/update&gt;<br></code></pre></td></tr></table></figure></span></code></pre></li></ul></li></ul><h5 id="动态sql修改任意字段"><a class="markdownIt-Anchor" href="#动态sql修改任意字段"></a> 动态sql修改任意字段</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateAny&quot;</span>&gt;</span><br>        update tb_brand<br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brand_name != null and brand_name != &#x27;&#x27;&quot;</span>&gt;</span><br>                brand_name =<br>                #&#123;brand_name&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;company_name != null and company_name != &#x27;&#x27;&quot;</span>&gt;</span><br>                company_name =<br>                #&#123;company_name&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;ordered != null&quot;</span>&gt;</span><br>                ordered =<br>                #&#123;ordered&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span><br>                status =<br>                #&#123;status&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;description != null and description != &#x27;&#x27;&quot;</span>&gt;</span><br>                description =<br>                #&#123;description&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        where id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h4><h5 id="删除一个"><a class="markdownIt-Anchor" href="#删除一个"></a> 删除一个</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteById&quot;</span>&gt;</span><br>       delete from tb_brand where id = #&#123;id&#125;;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="批量删除"><a class="markdownIt-Anchor" href="#批量删除"></a> 批量删除</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByIds&quot;</span>&gt;</span><br>        delete from tb_brand<br>        where id in<br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>            #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>collection 的值必须写”array“，但是可以通过@Param注解指定自己的命名</p></li><li><pre class="highlight"><code class="">    int deleteByIds(@Param(&quot;ids&quot;) int[] ids);<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">## 注解完成增删改查</span><br><br><span class="hljs-comment">## 动态SQL</span><br><br>![image-20230701144655125](https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131347181.png)<br><br>* <span class="hljs-keyword">if</span> 多条件查询<br><br>```xml<br>&lt;select <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;selectByCondition&quot;</span> resultType=<span class="hljs-string">&quot;brand&quot;</span>&gt;<br>    select * from tb_brand <span class="hljs-built_in">where</span><br>    &lt;<span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;status!=null&quot;</span>&gt;<br>        status = <span class="hljs-comment">#&#123;status&#125;</span><br>    &lt;/if&gt;<br>    &lt;<span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;company_name!=null and company_name!=&#x27;&#x27;&quot;</span>&gt;<br>        and company_name like <span class="hljs-comment">#&#123;company_name&#125;</span><br>    &lt;/if&gt;<br>    &lt;<span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;brand_name!=null and brand_name!=&#x27;&#x27;&quot;</span>&gt;<br>        and brand_name like <span class="hljs-comment">#&#123;brand_name&#125;</span><br>    &lt;/if&gt;<br><br>&lt;/select&gt;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>这种写法会出现一种情况就是第一个参数没有的话，就会报错，可以这样解决</p><ul><li><p>将and置于上一个条件尾</p></li><li><pre class="highlight"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status!=null&quot;</span>&gt;</span>    status = #&#123;status&#125; and<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><span class="hljs-comment"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>* 使用`&lt;<span class="hljs-built_in">where</span>&gt;`标签<br><br>* ```xml<br>  &lt;<span class="hljs-built_in">where</span>&gt;<br>     &lt;<span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;status!=null&quot;</span>&gt;<br>       status = <span class="hljs-comment">#&#123;status&#125; and</span><br>     &lt;/if&gt;<br>     &lt;<span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;company_name!=null and company_name!=&#x27;&#x27;&quot;</span>&gt;<br>        company_name like <span class="hljs-comment">#&#123;company_name&#125; and</span><br>     &lt;/if&gt;<br>     &lt;<span class="hljs-keyword">if</span> <span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;brand_name!=null and brand_name!=&#x27;&#x27;&quot;</span>&gt;<br>        brand_name like <span class="hljs-comment">#&#123;brand_name&#125;</span><br>     &lt;/if&gt;<br>  &lt;/where&gt;<br></code></pre></td></tr></table></figure></span></code></pre></li></ul></li><li><p>choose单条件查询</p><ul><li><pre class="highlight"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;xxx!=null&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span>        1=1            <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><span class="hljs-comment"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-section">## MyBatis参数传递</span><br><br><span class="hljs-bullet">*</span> MyBatis接口方法中可以接受各种各样的参数，MyBatis底层对于这些参数进行不同的封装处理方式<br><span class="hljs-bullet">  *</span> 单个参数<br><span class="hljs-bullet">    1.</span> POJO类型<br><span class="hljs-bullet">    2.</span> Map类型<br><span class="hljs-bullet">    3.</span> Collection<br><span class="hljs-bullet">    4.</span> List<br><span class="hljs-bullet">    5.</span> Array<br><span class="hljs-bullet">    6.</span> 其他类型<br><span class="hljs-bullet">  *</span> 多个参数<br><span class="hljs-bullet">*</span> MyBatis提供了ParamNameResolver类来进行参数封装<br><br><span class="hljs-section">## 使用注解的方式实现增删改查</span><br><br><span class="hljs-bullet">*</span> 使用注解的方式会更加方便<br><br><span class="hljs-bullet">*</span> 一般用注解完成简单功能，配置文件完成复杂功能<br><span class="hljs-bullet">  *</span> 查询@Select<br><span class="hljs-bullet">  *</span> 添加@Insert<br><span class="hljs-bullet">  *</span> 修改@Update<br><span class="hljs-bullet">  *</span> 删除@Delete<br><br><span class="hljs-code">```java</span><br><span class="hljs-code">@Select(&quot;select * from tb_user where id = #&#123;id&#125;&quot;)</span><br><span class="hljs-code">public User selectById(int id);</span><br></code></pre></td></tr></table></figure></span></code></pre></li></ul></li></ul><h2 id="抽取sqlsessionfactory工具类简化代码"><a class="markdownIt-Anchor" href="#抽取sqlsessionfactory工具类简化代码"></a> 抽取SqlsessionFactory工具类简化代码</h2><p>SqlsessionFactory工厂对象理应只被创建一次，因此我们可以将创建工厂对象的代码抽取成工具类，并置为静态代码块，这样SqlsessionFactory对象就只会被创建一次，同时大大简化了我们的代码。</p><ul><li><p>创建Utils工具包</p></li><li><p>创建SqlsessionFactoryUtil类</p></li><li><p>将将创建工厂对象写为静态代码块</p><ul><li><pre class="highlight"><code class="java"><span class="hljs-keyword">package</span> org.example.Utils;<span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.utils.res.XResources_ja_JP_A;<span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlsesssionFactoryUtil</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;    <span class="hljs-comment">//静态代码块，只会执行一次，会随着类的加载自动执行</span>    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">InputStream</span> <span class="hljs-variable">resourceAsStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);            sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resourceAsStream);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionFactory <span class="hljs-title function_">getSqlsessionFactory</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> sqlSessionFactory;    &#125;&#125;</code></pre></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat</title>
    <link href="/2023/05/15/Web%E6%9C%8D%E5%8A%A1%E5%99%A8-TomCat/"/>
    <url>/2023/05/15/Web%E6%9C%8D%E5%8A%A1%E5%99%A8-TomCat/</url>
    
    <content type="html"><![CDATA[<h2 id="web服务器-tomcat"><a class="markdownIt-Anchor" href="#web服务器-tomcat"></a> Web服务器-TomCat</h2><ul><li>Web服务器是一个应用程序（软件），对http协议的操作进行封装，是的程序员不必直接对协议进行操作，让web开发更加便捷，主要功能是”提供网上信息浏览服务“</li></ul><h3 id="tomcat简介"><a class="markdownIt-Anchor" href="#tomcat简介"></a> TomCat简介</h3><ul><li><p>是apache的一个核心项目，一个开源免费的轻量级Web服务器，支持Servlet/JSP少量javaEE规范</p></li><li><p>JavaEE: Java Enterprise Edition,java企业版，指java企业级开发的技术规范总和。包括13项技术规范：JDBC、JNDI、RMI、JSP、Servlet、XML、JMS、JavaIDL、JTS、JTA、JavaMail、JAF</p></li><li><p>Tomcat也被称为Web容器，Servlet容器、Servlet需要依赖于Tomcat才能运行</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitignore</title>
    <link href="/2023/05/15/gitignore(git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6)/"/>
    <url>/2023/05/15/gitignore(git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6)/</url>
    
    <content type="html"><![CDATA[<h1 id="gitignoregit忽略文件"><a class="markdownIt-Anchor" href="#gitignoregit忽略文件"></a> gitignore(git忽略文件)</h1><p>在使用Git的过程中，有的文件比如日志，临时文件，编译的中间文件等不要提交到代码仓库，这时就要设置相应的忽略规则，来忽略这些文件的提交。简单来说一个场景：在你使用git add .的时候，遇到了把你不想提交的文件也添加到了缓存中去的情况，比如项目的本地配置信息，如果你上传到Git中去其他人pull下来的时候就会和他本地的配置有冲突，所以这样的个性化配置文件我们一般不把它推送到git服务器中，但是又为了偷懒每次添加缓存的时候都想用git add .而不是手动一个一个文件添加，该怎么办呢？很简单，git为我们提供了一个.gitignore文件，只要在这个文件中声明哪些文件你不希望添加到git中去，这样当你使用git add .的时候这些文件就会被自动忽略掉。</p><p><strong>Git忽略文件的原则</strong></p><ul><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如产生的.log日志文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ul><p><strong>.gitignore文件的使用方法</strong> 首先，在你的工作区新建一个名称为.gitignore的文件。 然后，把要忽略的文件名填进去，Git就会自动忽略这些文件。不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。<a href="https://link.zhihu.com/?target=https%3A//github.com/github/gitignore">https://github.com/github/gitignore</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># dir 不需要提交的目录</span><br>/node_modules<br><br><span class="hljs-comment"># file 不需要提交的文件</span><br>config.ini<br><br><span class="hljs-comment"># log 不需要提交的任意包含后缀名为log的文件</span><br>*.<span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># Package Files 不需要提交的任意包含后缀名为jar的文件</span><br>*.jar<br></code></pre></td></tr></table></figure><p>.gitignore注释用'#', *表示匹配0个或多个任意字符，所以上面的模式就是要忽略所有的xml文件,log文件和apk文件。</p><p>.gitignore配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为版本管理带来很大的便利。</p><p>如果有些文件已经被忽略了，当使用<code>git add</code>时是无法添加的。需要加上<code>-f</code>参数才能强制添加到git中去，这样就能强制添加到缓存中去了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add -f node_modules/jquery/dist/jquery.min.js<br></code></pre></td></tr></table></figure><p>如果我们意外的将想要忽略的文件添加到缓存中去了，我们可以使用<code>rm</code>命令将其从中移除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> --cached test.js <br></code></pre></td></tr></table></figure><p><strong>.gitignore忽略规则的优先级</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">在 .gitingore 文件中，每一行指定一个忽略规则，Git检查忽略规则的时候有多个来源，它的优先级如下（由高到低）：<br>1、从命令行中读取可用的忽略规则<br>2、当前目录定义的规则<br>3、父级目录定义的规则，依次递推<br>4、$GIT_DIR/info/exclude 文件中定义的规则<br>5、core.excludesfile中定义的全局规则<br></code></pre></td></tr></table></figure><p><strong>.gitignore忽略规则的匹配语法</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">在 .gitignore 文件中，每一行的忽略规则的语法如下：<br>1、空格不匹配任意文件，可作为分隔符，可用反斜杠转义<br>2、以“＃”开头的行都会被 Git 忽略。即#开头的文件标识注释，可以使用反斜杠进行转义。<br>3、可以使用标准的glob模式匹配。所谓的glob模式是指shell所使用的简化了的正则表达式。<br>4、以斜杠&quot;/&quot;开头表示目录；&quot;/&quot;结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件；&quot;/&quot;开始的模式匹配项目跟目录；如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录。<br>5、以星号&quot;*&quot;通配多个字符，即匹配多个任意字符；使用两个星号&quot;**&quot; 表示匹配任意中间目录，比如a/**/z可以匹配 a/z, a/b/z 或 a/b/c/z等。<br>6、以问号&quot;?&quot;通配单个字符，即匹配一个任意字符；<br>7、以方括号&quot;[]&quot;包含单个字符的匹配列表，即匹配任何一个列在方括号中的字符。比如[abc]表示要么匹配一个a，要么匹配一个b，要么匹配一个c；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配。比如[0-9]表示匹配所有0到9的数字，[a-z]表示匹配任意的小写字母）。<br>8、以叹号&quot;!&quot;表示不忽略(跟踪)匹配到的文件或目录，即要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。需要特别注意的是：如果文件的父目录已经被前面的规则排除掉了，那么对这个文件用&quot;!&quot;规则是不起作用的。也就是说&quot;!&quot;开头的模式表示否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用&quot;!&quot;也不会再次被包含。可以使用反斜杠进行转义。<br></code></pre></td></tr></table></figure><p><strong>需要谨记</strong>：git对于.ignore配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</p><p><strong>十分重要</strong>：如果你不慎在创建.gitignore文件之前就push了项目，那么即使你在.gitignore文件中写入新的过滤规则，这些规则也不会起作用，Git仍然会对所有文件进行版本管理。简单来说出现这种问题的原因就是Git已经开始管理这些文件了，所以你无法再通过过滤规则过滤它们。所以大家一定要养成在项目开始就创建.gitignore文件的习惯，否则一单push，处理起来会非常麻烦。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#               表示此为注释,将被Git忽略</span><br>*.a             表示忽略所有 .a 结尾的文件<br>!lib.a          表示但lib.a除外<br>/TODO           表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO<br>build/          表示忽略 build/目录下的所有文件，过滤整个build文件夹；<br>doc/*.txt       表示会忽略doc/notes.txt但不包括 doc/server/arch.txt<br> <br>bin/:           表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件<br>/bin:           表示忽略根目录下的bin文件<br>/*.c:           表示忽略cat.c，不忽略 build/cat.c<br>debug/*.obj:    表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj<br>**/foo:         表示忽略/foo,a/foo,a/b/foo等<br>a/**/b:         表示忽略a/b, a/x/b,a/x/y/b等<br>!/bin/run.sh    表示不忽略bin目录下的run.sh文件<br>*.<span class="hljs-built_in">log</span>:          表示忽略所有 .<span class="hljs-built_in">log</span> 文件<br>config.php:     表示忽略当前路径的 config.php 文件<br> <br>/mtk/           表示过滤整个文件夹<br>*.zip           表示过滤所有.zip文件<br>/mtk/do.c       表示过滤某个具体文件<br> <br>被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。<br> <br>需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下：<br>!*.zip<br>!/mtk/one.txt<br> <br>唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？<br>想象一个场景：假如我们只需要管理/mtk/目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么.gitignore规则应写为：：<br>/mtk/*<br>!/mtk/one.txt<br> <br>假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！<br>注意上面的/mtk/*不能写为/mtk/，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！<br> <br>----------------------------------------------------------------------------------<br>还有一些规则如下：<br>fd1/*<br>说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；<br> <br>/fd1/*<br>说明：忽略根目录下的 /fd1/ 目录的全部内容；<br> <br>/*<br>!.gitignore<br>!/fw/ <br>/fw/*<br>!/fw/bin/<br>!/fw/sf/<br>说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。<br></code></pre></td></tr></table></figure><p>如果你已经把不想上传的文件上传到了git仓库，那么你必须先从远程仓库删了它，我们可以从远程仓库直接删除然后pull代码到本地仓库这些文件就会本删除，或者从本地删除这些文件并且在.gitignore文件中添加这些你想忽略的文件，然后再push到远程仓库。</p><p><strong>gitignore忽略规则查看</strong> 如果你发下.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">git check-ignore -v xxx.js<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gitignore</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>会话跟踪技术</title>
    <link href="/2023/05/15/%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E6%8A%80%E6%9C%AF/"/>
    <url>/2023/05/15/%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="会话跟踪技术"><a class="markdownIt-Anchor" href="#会话跟踪技术"></a> 会话跟踪技术</h2><ul><li>会话跟踪技术<ul><li>会话：用户打开浏览器，访问服务器的资源，会话建立，直到有一方断开连接，会话结束。再一次会话中可以包含多次请求和响应</li><li>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自同一浏览器，以便在同一次会话的多次请求间<strong>共享数据</strong></li><li>HTTP协议是无状态的，每次浏览器向服务器请求时，服务器都会将该请求视为<strong>新的</strong>请求，因此我们需要会话跟踪技术实现会话内数据共享</li><li>实现方式：<ul><li>客户端会话跟踪技术：Cookie</li><li>服务端会话跟踪技术：Session</li></ul></li></ul></li></ul><h3 id="cookie"><a class="markdownIt-Anchor" href="#cookie"></a> Cookie</h3><h4 id="基本使用"><a class="markdownIt-Anchor" href="#基本使用"></a> 基本使用</h4><ul><li><p>Cookie:客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问</p></li><li><p>基本使用</p><ul><li><p><strong>发送Cookie</strong></p></li><li><p>创建Cookie对象，设置数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>发送Cookie到客户端：适用response对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.addCookie(cookie);<br></code></pre></td></tr></table></figure></li><li><p><strong>获取Cookie</strong></p></li><li><p>获取到客户端携带的所有Cookie，使用request对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Cookie[] cookies = request.getCookies();<br></code></pre></td></tr></table></figure></li><li><p>遍历数组，获取每一个Cookie对象</p></li><li><p>使用Cookie对象获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cookie.getName();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cookie.getValue();<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h4><ul><li>Cookie的实现是基于HTTP协议的<ul><li>响应头：set-cookie</li><li>请求头：cookie</li></ul></li></ul><h4 id="使用细节"><a class="markdownIt-Anchor" href="#使用细节"></a> 使用细节</h4><ul><li>Cookie存活时间<ul><li>默认情况下，Cookie存储在浏览器内存中，当浏览器关闭，内存释放，则Cookie被销毁</li><li>setMaxAge(int seconds)：设置Cookie存活时间<ul><li>正数：将Cookie写入浏览器所在电脑的硬盘，持久化存储，到时间自动删除</li><li>负数：默认值，Cookie在当前浏览器内存中，当浏览器关闭，则Cookie被销毁</li><li>零：删除对应Cookie</li></ul></li></ul></li><li>Cookie存储中文<ul><li>Cookie不能直接存储中文数据</li><li>如需存储，则需转码：URL编码</li></ul></li></ul><h3 id="session"><a class="markdownIt-Anchor" href="#session"></a> Session</h3><ul><li>服务端会话跟踪技术：将数据保存到服务端</li><li>JavaEE提供的HttpSession接口，来实现一次会话的多次请求间数据共享功能</li></ul><h4 id="基本使用-2"><a class="markdownIt-Anchor" href="#基本使用-2"></a> 基本使用</h4><ol><li><p>获取Session对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br></code></pre></td></tr></table></figure></li><li><p>Session对象功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setAttribute</span><span class="hljs-params">(String name,Object o)</span>;<span class="hljs-comment">//存储数据到session中</span><br>Object <span class="hljs-title function_">getAttribute</span><span class="hljs-params">(String name)</span>;<span class="hljs-comment">//根据key，获取值</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeAttribute</span><span class="hljs-params">(String name)</span>;<span class="hljs-comment">//根据key，删除该键值对</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="原理-2"><a class="markdownIt-Anchor" href="#原理-2"></a> 原理</h4><ul><li>Session是基于Cookie实现的<ul><li>当你使用Session时，tomcat会自动的帮你向浏览器发送一个Cookie <code>set-cookie:JSESSIONID=10</code>,当下一次浏览器携带含有<code>cookie:JSSESIONID</code>的Cookie访问服务器时，服务器获取session对象时就会根据请求去内存中去看是否有一个id为10的session对象，有的话就直接拿来用了，没有的话才会自己创建</li></ul></li></ul><h4 id="使用细节-2"><a class="markdownIt-Anchor" href="#使用细节-2"></a> 使用细节</h4><ul><li><p>Session的钝化、活化</p><ul><li>服务器重启后、Session中的数据是否还在？<ul><li>钝化：在服务器正常关闭后，Tomcat会自动将Session数据写入硬盘文件中</li><li>活化：再次启动服务器后，从文件中加载数据到Session中</li></ul></li></ul></li><li><p>Session销毁：</p><ul><li><p>默认情况下，无操作，30分钟自动销毁</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>调用Session对象的invalidate()方法</li></ul></li></ul></li></ul><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li>Cookie和Session都是完成一次会话内多次请求间数据共享的</li><li>区别：<ul><li>存储位置：Cookie是将数据存储在客户端，Session将数据存储在服务端</li><li>安全性：Cookie不安全，Session安全</li><li>存储时间：Cookie可以长期存储，Session默认30分钟</li><li>数据大小：Cookie最大3KB,Session无大小限制</li><li>服务器性能：Cookie不占服务器资源，Session占用服务器资源</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cookie &amp; Session</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>请求与响应</title>
    <link href="/2023/05/15/%E5%93%8D%E5%BA%94%E4%B8%8E%E8%AF%B7%E6%B1%82/"/>
    <url>/2023/05/15/%E5%93%8D%E5%BA%94%E4%B8%8E%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h2 id="request类"><a class="markdownIt-Anchor" href="#request类"></a> Request类</h2><h4 id="获取请求数据"><a class="markdownIt-Anchor" href="#获取请求数据"></a> 获取请求数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//-------请求行相关</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> req.getMethod();<span class="hljs-comment">//获取请求方式：GET或者POST,这里是GET</span><br>        System.out.println(method);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">contextPath</span> <span class="hljs-operator">=</span> req.getContextPath();<span class="hljs-comment">//获取虚拟目录（项目访问路径）:/ServletDemo1</span><br>        System.out.println(contextPath);<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">requestURL</span> <span class="hljs-operator">=</span> req.getRequestURL();<span class="hljs-comment">//获取URL:http://localhost:8080/ServletDemo1/req1</span><br>        System.out.println(requestURL.toString());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">requestURI</span> <span class="hljs-operator">=</span> req.getRequestURI();<span class="hljs-comment">//获取URI:/ServletDemo1/req1</span><br>        System.out.println(requestURI);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">queryString</span> <span class="hljs-operator">=</span> req.getQueryString();<span class="hljs-comment">//获取请求参数（GET方式）</span><br>        System.out.println(queryString);<br><br>        <span class="hljs-comment">//-------请求头相关</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">header</span> <span class="hljs-operator">=</span> req.getHeader(<span class="hljs-string">&quot;user-agent&quot;</span>);<br>        System.out.println(header);<br><br></code></pre></td></tr></table></figure><ul><li><p>若请求发送方式为POST则还有与请求体相关操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//-----请求体相关</span><br><span class="hljs-comment">//获取字符输入</span><br><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> req.getReader()<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> reader.readLine();<br>System.out.println(s);<br></code></pre></td></tr></table></figure></li></ul><h4 id="请求数据中文乱码问题解决方案"><a class="markdownIt-Anchor" href="#请求数据中文乱码问题解决方案"></a> 请求数据中文乱码问题解决方案</h4><ul><li><p>原理</p><ul><li>浏览器在发送请求时，先将中文数据进行编码：对中文的二进制先将每个字转换为16进制形式，再按照每个字+%拼接在一起</li><li>例如：某串中文的二进制为1001 1000 1111 1100 则会被编码为 %98%fc%</li><li>导致问题的原因为在编码时对应字符集不同，浏览器默认为utf-8，而tomcat默认为ISO-8859-1，不同的字符集，每个中文底层二进制不同，导致乱码</li><li>编码与解码的标准不同就会导致问题</li></ul></li><li><p>解决方案</p><ul><li><p>获取请求数据，先按照tomcat的字符集将解码后的数据转换为字节流，获取数据的二进制形式。接着再将二进制数据按照浏览器的字符集转为字符串就行</p></li><li><p>POST方式，可直接设置请求数据的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<span class="hljs-comment">//解决POST方式乱码问题</span><br><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>通用的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br><span class="hljs-type">byte</span>[] bytes = username.getBytes(StandardCharsets.ISO_8859_1);<span class="hljs-comment">//先获取乱码数据的二进制字节码，tomcat默认编码为ISO-8859-1</span><br>username = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,StandardCharsets.UTF_8);<span class="hljs-comment">//按utf-8编码转换为字符串</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="请求转发"><a class="markdownIt-Anchor" href="#请求转发"></a> 请求转发</h4><ul><li><p>接到请求后，可以进行一部分处理，并转发给其他Servlet，比如：添加或删除一些数据后，转发给其他的Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//存储数据到request域中 void setAttribute(String name,Object o)</span><br><span class="hljs-comment">//根据key值获取值Object getAttribute(String name)</span><br><span class="hljs-comment">//根据key删除对应值void removeAttribute(String name)</span><br><span class="hljs-comment">//请求转发</span><br>   request.getRequestDispatcher(<span class="hljs-string">&quot;/req2&quot;</span>).forward(request,response);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="response类"><a class="markdownIt-Anchor" href="#response类"></a> Response类</h2><h4 id="设置-响应数据"><a class="markdownIt-Anchor" href="#设置-响应数据"></a> 设置 响应数据</h4><p><strong>响应数据分为3部分</strong></p><ol><li><p>响应行</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-number">200</span> OK//http/1.1是协议版本号；<span class="hljs-number">200</span>是状态码；OK是状态码的描述<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> sc)</span><span class="hljs-comment">//设置响应状态码</span><br></code></pre></td></tr></table></figure></li><li><p>响应头</p></li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">Content-Type:text/html<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeader</span><span class="hljs-params">(String name,String value)</span><span class="hljs-comment">//设置响应头键值对</span><br></code></pre></td></tr></table></figure><ol start="3"><li>响应体</li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">&lt;html&gt;&lt;head&gt;&lt;body&gt;&lt;/body&gt;&lt;/head&gt;&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">PrintWriter <span class="hljs-title function_">getWriter</span><span class="hljs-params">()</span><span class="hljs-comment">//获取字符输出流</span><br>ServletOutpuStream <span class="hljs-title function_">getOutputStream</span><span class="hljs-params">()</span><span class="hljs-comment">//获取字节输出流</span><br></code></pre></td></tr></table></figure><h4 id="response完成重定向"><a class="markdownIt-Anchor" href="#response完成重定向"></a> Response完成重定向</h4><ul><li><p>重定向（Redirect）：一种资源跳转方式</p></li><li><p>我处理不了，找别人处理，状态码：302</p></li><li><p>那个人的位置xxx,响应头location:xxx;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">resp.setStatus(<span class="hljs-number">302</span>);<br>resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;资源B的路径&quot;</span>)；<br><span class="hljs-comment">//上边代码几乎固定，所以可以采取下面的简便方法；</span><br>resp.sendRedirect(<span class="hljs-string">&quot;xxxx&quot;</span>)<span class="hljs-comment">//对应上边方式的路径    </span><br></code></pre></td></tr></table></figure></li></ul><p><em>可以重定向到任意位置资源，比如：<a href="https://www.baidu.com">https://www.baidu.com</a></em></p><h4 id="路径的使用问题"><a class="markdownIt-Anchor" href="#路径的使用问题"></a> <strong>路径的使用问题</strong></h4><ul><li><p>明确路径是谁使用</p><ul><li><p>浏览器使用：需要加虚拟目录（项目的访问路径）</p></li><li><p>服务器使用：不用加虚拟目录</p></li><li><p>获取虚拟目录，最好不要根据眼看直接写死，建议使用getContextPath()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getContextPath() + <span class="hljs-string">&quot;/req1&quot;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="response响应字符数据"><a class="markdownIt-Anchor" href="#response响应字符数据"></a> <strong>Response响应字符数据</strong></h4><ul><li><p>获取字符输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br></code></pre></td></tr></table></figure></li><li><p>写数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">writer.write(<span class="hljs-string">&quot;aaaa&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h4 id="设置响应头信息"><a class="markdownIt-Anchor" href="#设置响应头信息"></a> <strong>设置响应头信息</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">resp.setHeader(<span class="hljs-string">&quot;content-type&quot;</span>,<span class="hljs-string">&quot;text/html&quot;</span>);<br></code></pre></td></tr></table></figure><p><em>不需要关流操作，tomcat会做这些操作</em></p><p>同样在设置中文数据时，应设置流的字符集为utf-8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">resp.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="response响应字节数据"><a class="markdownIt-Anchor" href="#response响应字节数据"></a> <strong>Response响应字节数据</strong></h4><ul><li><p>获取字节输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br></code></pre></td></tr></table></figure></li><li><p>写数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">outputStream.write(字节数据)<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取文件</span><br>       <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src/main/webapp/a.jpg&quot;</span>);<br>       <span class="hljs-comment">//获取response字节输出流</span><br>       <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>  <br>       <span class="hljs-comment">//完成流的copy</span><br>       <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>       <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span>(;(len=fileInputStream.read(buffer)) != -<span class="hljs-number">1</span>;)&#123;<br>           outputStream.write(buffer,<span class="hljs-number">0</span>,len);<br>       &#125;<br>       fileInputStream.close();<br></code></pre></td></tr></table></figure></li></ul><p><em>这种方式挺麻烦可以使用线程的工具类</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后流的copy这样就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">IOUtils.copy(fileInputStream,outputStream);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Requset和Response</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2023/05/15/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/05/15/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a class="markdownIt-Anchor" href="#正则表达式"></a> 正则表达式</h2><ul><li><p>语法</p><ul><li>^:表示开始</li><li>$:表示结束</li><li>[]:代表某个范围内的单个字符，比如：[0-9]表示单个数字字符</li><li>.:代表任意单个字符，除了换行符和行结束符</li><li>\w:戴白哦单词字符：字母、数字、下划线(_),相当于[A-Za-z0-9_]</li><li>\d:代表数字字符：相当于[0-9]</li></ul><p><strong>量词</strong></p><ul><li><p>+:至少一个</p></li><li><p>*：零个或多个</p></li><li><p>？：零个或一个</p></li><li><p>{x}:x个</p></li><li><p>{m,}至少m个</p></li><li><p>{m,n}至少m个至多n个</p></li></ul></li></ul><p><em>注意：量用来限定对应格式个数</em></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 871 (Div. 4)</title>
    <link href="/2023/05/07/Codeforces-Round-871-Div-4/"/>
    <url>/2023/05/07/Codeforces-Round-871-Div-4/</url>
    
    <content type="html"><![CDATA[<h4 id="codeforces-round-871-div-4"><a class="markdownIt-Anchor" href="#codeforces-round-871-div-4"></a> Codeforces Round 871 (Div. 4)</h4><p><a href="https://codeforces.com/contest/1829">https://codeforces.com/contest/1829</a></p><h5 id="a-love-story"><a class="markdownIt-Anchor" href="#a-love-story"></a> A. Love Story</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s = <span class="hljs-string">&quot;codeforces&quot;</span>;<br>    string a;cin &gt;&gt; a;<br>    <span class="hljs-type">int</span> res= <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; a.<span class="hljs-built_in">size</span>();i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]!=s[i]) res ++;<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-blank-space"><a class="markdownIt-Anchor" href="#b-blank-space"></a> B. Blank Space</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> &amp;i:a) cin &gt;&gt; i;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; a.<span class="hljs-built_in">size</span>();i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-number">1</span>)<br>        &#123;<br>            res = <span class="hljs-built_in">max</span>(res,cnt);<br>            cnt = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> cnt ++;<br>    &#125;<br>    res = <span class="hljs-built_in">max</span>(res,cnt);<br>    cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="c-mr-perfectly-fine"><a class="markdownIt-Anchor" href="#c-mr-perfectly-fine"></a> C. Mr. Perfectly Fine</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;cin &gt;&gt; n;<br>    vector&lt;<span class="hljs-type">int</span>&gt; a,b,c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;cin &gt;&gt; x;<br>        string s;cin &gt;&gt; s;<br>        <span class="hljs-keyword">if</span>(s==<span class="hljs-string">&quot;01&quot;</span>) a.<span class="hljs-built_in">push_back</span>(x);<br>        <span class="hljs-keyword">if</span>(s==<span class="hljs-string">&quot;10&quot;</span>) b.<span class="hljs-built_in">push_back</span>(x);<br>        <span class="hljs-keyword">if</span>(s==<span class="hljs-string">&quot;11&quot;</span>) c.<span class="hljs-built_in">push_back</span>(x);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">sort</span>(b.<span class="hljs-built_in">begin</span>(),b.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">sort</span>(c.<span class="hljs-built_in">begin</span>(),c.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(!a.<span class="hljs-built_in">empty</span>()&amp;&amp;!b.<span class="hljs-built_in">empty</span>()) res = a[<span class="hljs-number">0</span>]+b[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span>(!c.<span class="hljs-built_in">empty</span>()) <br>    &#123;<br>        <span class="hljs-keyword">if</span>(res==<span class="hljs-number">-1</span>) res = c[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> res = <span class="hljs-built_in">min</span>(res,c[<span class="hljs-number">0</span>]);<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="d-gold-rush"><a class="markdownIt-Anchor" href="#d-gold-rush"></a> D. Gold Rush</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;n,<span class="hljs-type">int</span> &amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(n%<span class="hljs-number">3</span>!=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> a = n/<span class="hljs-number">3</span>;<span class="hljs-type">int</span> b = a*<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(m==a||m==b) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(b&lt;m) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">bool</span> ok = <span class="hljs-built_in">dfs</span>(b,m);<br>    <span class="hljs-keyword">if</span>(a&gt;m) ok |= <span class="hljs-built_in">dfs</span>(a,m);<br>    <span class="hljs-keyword">return</span> ok;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">if</span>(n==m)&#123;cout &lt;&lt; <span class="hljs-string">&quot;YES\n&quot;</span>;<span class="hljs-keyword">return</span>;&#125;<br>    <span class="hljs-type">bool</span> ok = <span class="hljs-built_in">dfs</span>(n,m);<br>    cout &lt;&lt; (ok?<span class="hljs-string">&quot;YES\n&quot;</span>:<span class="hljs-string">&quot;NO\n&quot;</span>);  <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="e-the-lakes"><a class="markdownIt-Anchor" href="#e-the-lakes"></a> E. The Lakes</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> b[N][N];<br><span class="hljs-type">int</span> d[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>] = &#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;,&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;&#125;;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ok</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>&amp;&amp;x&lt;n&amp;&amp;y&gt;=<span class="hljs-number">0</span>&amp;&amp;y&lt;m) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> v = b[x][y];<br>    b[x][y] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">4</span>;i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> nx = x + d[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> ny = y + d[i][<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ok</span>(nx,ny)&amp;&amp;b[nx][ny]!=<span class="hljs-number">0</span>) v += <span class="hljs-built_in">dfs</span>(nx,ny);<br>    &#125;<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; m;j ++)<br>        &#123;<br>            cin &gt;&gt; b[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i ++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m;j ++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(b[i][j]!=<span class="hljs-number">0</span>) <br>            &#123;<br>                res = <span class="hljs-built_in">max</span>(res,<span class="hljs-built_in">dfs</span>(i,j));<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="f-forever-winter"><a class="markdownIt-Anchor" href="#f-forever-winter"></a> F. Forever Winter</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">deg</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        deg[a]++;<br>        deg[b]++;<br>    &#125;<br>    map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        mp[deg[i]]++;<br>    &#125;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : mp)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (it.second == <span class="hljs-number">1</span>)<br>        &#123;<br>            x = it.first;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : mp)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (it.first != <span class="hljs-number">1</span>)<br>            &#123;<br>                x = it.first;<br>                y = x - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : mp)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (it.second == x)<br>            &#123;<br>                y = it.first - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="g-hits-different"><a class="markdownIt-Anchor" href="#g-hits-different"></a> G. Hits Different</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1500</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a[N][N];<br><span class="hljs-type">bool</span> v[N][N];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ok</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">0</span>&amp;&amp;y&gt;<span class="hljs-number">0</span>&amp;&amp;y&lt;=x) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    v[x][y] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> t = a[x][y];<br>    <span class="hljs-keyword">if</span>(!v[x<span class="hljs-number">-1</span>][y<span class="hljs-number">-1</span>]&amp;&amp;<span class="hljs-built_in">ok</span>(x<span class="hljs-number">-1</span>,y<span class="hljs-number">-1</span>)) t += <span class="hljs-built_in">dfs</span>(x<span class="hljs-number">-1</span>,y<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span>(!v[x<span class="hljs-number">-1</span>][y]&amp;&amp;<span class="hljs-built_in">ok</span>(x<span class="hljs-number">-1</span>,y)) t += <span class="hljs-built_in">dfs</span>(x<span class="hljs-number">-1</span>,y);<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;cin &gt;&gt; n;<br>    <span class="hljs-built_in">memset</span>(v,<span class="hljs-literal">false</span>,<span class="hljs-keyword">sizeof</span> v);<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>)<br>    &#123;<br>        num ++;<br>        n -= num;<br>    &#125;<br>    n += num;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-built_in">dfs</span>(num,n);<br>    cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; <span class="hljs-number">1500</span>;i ++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= i;j ++)<br>        &#123;<br>            sum ++;<br>            a[i][j] = sum*sum;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="h-dont-blame-me"><a class="markdownIt-Anchor" href="#h-dont-blame-me"></a> H. Don't Blame Me</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,k;cin &gt;&gt; n &gt;&gt; k;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">dp</span>(n+<span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; (<span class="hljs-number">64</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> x;cin &gt;&gt; x;<br>        dp[i][x] += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; <span class="hljs-number">64</span>;j ++)  dp[i][x&amp;j] = (dp[i][x&amp;j]+dp[i<span class="hljs-number">-1</span>][j])%mod;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; <span class="hljs-number">64</span>;j ++)  dp[i][j] = (dp[i][j]+dp[i<span class="hljs-number">-1</span>][j])%mod;<br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">64</span>;i ++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(__builtin_popcount(i)==k) <br>        &#123;<br>            res += dp[n][i];<br>            res %= mod;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mex Tree</title>
    <link href="/2023/05/03/Mex-Tree/"/>
    <url>/2023/05/03/Mex-Tree/</url>
    
    <content type="html"><![CDATA[<h4 id="jmex-tree"><a class="markdownIt-Anchor" href="#jmex-tree"></a> J.Mex Tree</h4><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131358742.png" alt="img-mextree" /></p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131359739.png" alt="image-20230503203637357" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> v[N];<span class="hljs-comment">//节点权值</span><br>vector&lt;<span class="hljs-type">int</span>&gt; g[N];<br><span class="hljs-type">int</span> mn[N];<span class="hljs-comment">//以节点i为根的子树的mex值</span><br><span class="hljs-type">int</span> ans[N];<span class="hljs-comment">//ans[k]即为答案</span><br><span class="hljs-type">int</span> sz[N];<span class="hljs-comment">//以i为根的子树尺寸</span><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> root;<span class="hljs-comment">//权值为0的节点为根</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> fa,<span class="hljs-type">int</span> gfa)</span><span class="hljs-comment">//现预处理以每个节点为根的子树的尺寸和最小值</span></span><br><span class="hljs-function"></span>&#123;<br>    mn[fa] = v[fa];<br>    sz[fa] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; g[fa].<span class="hljs-built_in">size</span>();i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> son = g[fa][i];<br>        <span class="hljs-keyword">if</span>(son == gfa) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//由于建的双向边，防止重复</span><br>        <span class="hljs-built_in">dfs1</span>(son,fa);<br>        sz[fa] += sz[son];<br>        mn[fa] = <span class="hljs-built_in">min</span>(mn[fa],mn[son]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> fa,<span class="hljs-type">int</span> gfa)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(v[fa]!=<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(mn[fa]==v[fa]) ans[v[fa]] = n-sz[fa];<span class="hljs-comment">//如果以fa为根的子树的节点权值最小值为fa的值，</span><br>        <span class="hljs-comment">//说明子树中都是大于根节点权值的，这是满足要求的连通子图即为删去以fa为根的子树后的连通子图</span><br>        <span class="hljs-keyword">else</span> ans[v[fa]] = <span class="hljs-number">0</span>;<span class="hljs-comment">//由于整棵树是以0为根的，故当fa不是子树的最小权值时，其所有子树的mex都为0，</span><br>        <span class="hljs-comment">//而删去fa为根的子树后得到的子图里的mex必然为fa的子树中的最小值,必不可能fa，故答案为0</span><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; g[fa].<span class="hljs-built_in">size</span>();i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> son = g[fa][i];<br>        <span class="hljs-keyword">if</span>(son == gfa) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs2</span>(son,fa);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i ++)  <br>    &#123;<br>        cin &gt;&gt; v[i];<br>        <span class="hljs-keyword">if</span>(v[i]==<span class="hljs-number">0</span>) root = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt;= n;i ++)  <br>    &#123;<br>        <span class="hljs-type">int</span> x;cin &gt;&gt; x;<br>        g[i].<span class="hljs-built_in">push_back</span>(x);<br>        g[x].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    ans[n] = n;<br>    <span class="hljs-built_in">dfs1</span>(root,<span class="hljs-number">-1</span>);<span class="hljs-comment">//预处理</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; g[root].<span class="hljs-built_in">size</span>();i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> son = g[root][i];<br>        ans[<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(ans[<span class="hljs-number">0</span>],sz[son]);<span class="hljs-comment">//k==0时,答案为以0为根的子树的尺寸中的最大值</span><br>    &#125;<br>    <span class="hljs-built_in">dfs2</span>(root,<span class="hljs-number">-1</span>);<span class="hljs-comment">//求1-n-1的答案</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= n;i ++) cout &lt;&lt; ans[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> T = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin &gt;&gt; T;</span><br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL笔记</title>
    <link href="/2023/04/27/SQL%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/04/27/SQL%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="sqlstruct-query-language"><a class="markdownIt-Anchor" href="#sqlstruct-query-language"></a> SQL(Struct Query Language)</h3><ul><li><p>结构化查询语言</p></li><li><p>可单行或多行书写，以分号结尾</p></li><li><p>MYSQL 数据库的SQL语句不区分大小写，关键字建议大写</p></li><li><p>注释</p><ul><li><p>单行注释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 注释内容(注意有空格) 或 #注释内容(MySql特有)<br></code></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*这是多行注释*/<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="ddl数据定义语言"><a class="markdownIt-Anchor" href="#ddl数据定义语言"></a> DDL(数据定义语言)</h4><ul><li><p>操作数据库和表</p><ol><li><p>查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW DATABASES;#查询数据库<br>SHOW TABLES;#查询数据库下所有表<br>DESC 表名称;#查询表结构，显示表的具体内容<br></code></pre></td></tr></table></figure></li><li><p>创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#创建数据库<br>CREATE DATABASE 数据库名称;<br>#创建数据库（判断是否存在，不存在则创建）<br>CREATE DATABASE IF NOT EXISTS 数据库名称;<br>#创建表<br>CREATE TABLE 表名(<br>字段1 数据类型1,<br>    字段2 数据类型2,<br>    ...<br>    字段n 数据类型n<br>    #注意最后一行不能加逗号（其实可以看成一个函数）<br>);<br>#创建表(判断是否存在)<br>CREATE TABLE IF NOT EXISTS 表名(<br>字段1 数据类型1,<br>    字段2 数据类型2,<br>    ...<br>    字段n 数据类型n,<br>);<br></code></pre></td></tr></table></figure><ul><li><p>数据类型：mysql支持多种数据类型，可以分为三类：</p><ul><li><p>数值</p></li><li><p>日期</p></li><li><p>字符串</p></li><li><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131353888.png" alt="image-20230422212747333" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#例如定义一个总长度为 5，小数点后保留2位的double<br>score doulbe(5,2)<br>#日期 只含年月日<br>birthday date<br>#定长字符串<br>name char(10)#固定保存十个字符<br>#变长字符串<br>name varchar(10)#最长只能十个字符<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131354141.png" alt="image-20230422213621264" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE IF NOT EXISTS STUDENT(<br>id int,<br>    name varchar(10),-- 还可以写注释 <br>    gender char(1),<br>    birthday date,<br>    score double(5,2),<br>    email varchar(64),<br>    tel varchar(15),<br>    status tinyinit<br>);<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP DATABASE 数据库名称;<br>DROP DATABASE IF EXISTS 数据库名称;<br></code></pre></td></tr></table></figure></li><li><p>使用数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看当前数据库<br>SELECT DATABASE();<br>#使用数据库<br>USE 数据库名称;<br></code></pre></td></tr></table></figure></li><li><p>修改表</p><ol><li><p>修改表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 RENAME TO 新的表名;<br></code></pre></td></tr></table></figure></li><li><p>添加一列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 ADD 列名 数据类型;<br></code></pre></td></tr></table></figure></li><li><p>修改数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 MODIFY 列名 数据类型; <br></code></pre></td></tr></table></figure></li><li><p>修改列名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 CHANGE 列名 新列名 新数据类型;<br></code></pre></td></tr></table></figure></li><li><p>删除列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 DROP 列名;<br></code></pre></td></tr></table></figure></li></ol></li></ol></li></ul><h4 id="dml数据操作语言"><a class="markdownIt-Anchor" href="#dml数据操作语言"></a> DML(数据操作语言)</h4><ul><li><p>操作数据，对表中数据进行增删改</p><ol><li><p>添加</p><ul><li><p>给指定列添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO 表名(列名1,列名2,...) VALUES(值1,值2,...);<br></code></pre></td></tr></table></figure></li><li><p>给全部列添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO 表名 VALUES(值1,值2,...);#不建议这么做，建议用第一种方法，写出全部列名<br></code></pre></td></tr></table></figure></li><li><p>批量添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO 表名(列名1,列名2,...) VALUES(值1,值2,...),(值1,值2,...)...;<br>INSERT INTO 表名 VALUES(值1,值2,...),(值1,值2,...)...;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM 表名#查询所有数据<br></code></pre></td></tr></table></figure></li><li><p>修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE 表名 SET 列名1=值1,列名2=值2,...[WHERE 条件];#注意：不加条件，所有行都会被修改<br></code></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM 表名 [WHERE 条件];#删除满足条件的行<br></code></pre></td></tr></table></figure></li></ol></li></ul><h4 id="dql数据查询语言"><a class="markdownIt-Anchor" href="#dql数据查询语言"></a> DQL(数据查询语言)</h4><h5 id="单表查询"><a class="markdownIt-Anchor" href="#单表查询"></a> 单表查询</h5><ul><li><p>操作数据，对表中数据进行查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>字段列表<br>FROM<br>表名列表<br>WHERE <br>条件列表<br>GROUP BY<br>分组字段<br>HAVING <br>分组后条件<br>ORDER BY<br>排序字段<br>LIMIT<br>分页限定<br><br></code></pre></td></tr></table></figure><h5 id="基础查询"><a class="markdownIt-Anchor" href="#基础查询"></a> 基础查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询所有<br>SELECT * FROM 表名;#不建议这么用，建议使用下面的方式，列出所有列名<br><br>#查询对应列<br>SELECT 列名1,列名2,... FROM 表名;#查询对应列<br><br>#去重查询<br>SELECT DISTINCT 列名1,列名2,... FROM 表名;<br><br>#查询时可以给列名取别名来方便理解<br>#使用 AS关键字<br>SELECT 列名1 AS 别名1,列名2 AS 别名2,... FROM 表名;<br>#也可以省略 AS 关键字，但列名与别名间保持至少一个空格<br>SELECT 列名1 别名1,列名2 别名2,... FROM 表名;<br></code></pre></td></tr></table></figure><h5 id="条件查询"><a class="markdownIt-Anchor" href="#条件查询"></a> 条件查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 字段列表 FROM 表名 WHERE 条件;<br>#eg.从stu表查年龄大于20 岁的信息<br>SELECT * FROM stu WHERE age &gt; 20;<br><br>#eg.从stu表查年龄大于等于20 岁的信息<br>SELECT * FROM stu WHERE age &gt;= 20;<br><br>#eg.从stu表查年龄大于等于20岁并且小于等于30岁的信息(建议使用AND)<br>SELECT * FROM stu WHERE age &gt;= 20 &amp;&amp; age &lt;= 30;<br>SELECT * FROM stu WHERE age &gt;= 20 AND age &lt;= 30;<br>SELECT * FROM stu WHERE age BETWEEN 20 AND 30;<br><br>#eg.从stu表查日期在&#x27;1998-09-01&#x27;和&#x27;1999-09-01&#x27;之间的信息<br>SELECT * FROM stu WHERE date BETWEEN &#x27;1998-09-01&#x27; AND &#x27;1999-09-01&#x27;;<br><br>#eg.从stu表查年龄等于20 岁的信息<br>SELECT * FROM stu WHERE age = 20;<br><br>#eg.从stu表查年龄不等于20 岁的信息<br>SELECT * FROM stu WHERE age != 20;<br>SELECT * FROM stu WHERE age &lt;&gt; 20;#sql里 &lt;&gt; 也表示不等<br><br>#eg.从stu表查年龄等于20或者等于30或者等于40 岁的信息<br>SELECT * FROM stu WHERE age = 20 OR age = 30 OR age = 30;# 也可以使用 || ，但不建议 <br>SELECT * FROM stu WHERE age IN (20,30,40);<br><br>#eg.从stu表查年龄为 null 的信息<br>SELECT * FROM stu WHERE age IS null;#判断是否为 null 使用 IS 或者 IS NOT关键字<br></code></pre></td></tr></table></figure><ul><li><p>模糊查询 使用 <code>LIKE</code>关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># _匹配单个任意字符 %匹配多个任意字符<br>#eg.查询姓张的信息<br>SELECT * FROM stu WHERE name LIKE &#x27;张%&#x27;;<br><br>#eg.查询姓名中第二个字是花的的信息<br>SELECT * FROM stu WHERE name LIKE &#x27;_花%&#x27;;<br><br>#eg.查询姓名中包含 花 的信息<br>SELECT * FROM stu WHERE name LIKE &#x27;%花%&#x27;;<br></code></pre></td></tr></table></figure></li></ul><h5 id="排序查询"><a class="markdownIt-Anchor" href="#排序查询"></a> 排序查询</h5><ul><li><p>排序方式</p><p>升序<code>ASC</code>(默认)</p><p>降序<code>DESC</code></p><p>注意：如果有多个排序条件，当前面的条件值一样时，才会根据后面的条件排序</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#格式<br>SELECT 字段列表 FROM 表名 ORDER BY 排序字段名1 [排序方式1],排序字段名2 [排序方式2],...;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#eg.查询学生信息，按照年龄升序排列<br>SELECT * FROM stu ORDER BY age ASC;<br>SELECT * FROM stu ORDER BY age;<br>#eg.查询学生信息，按照年龄降序排列<br>SELECT * FROM stu ORDER BY age DESC;<br>#eg.查询学生信息，按照年龄升序排列，如果年龄一样再按照成绩降序排列<br>SELECT * FROM stu ORDER BY age ASC,score DESC;<br></code></pre></td></tr></table></figure><h5 id="聚合函数"><a class="markdownIt-Anchor" href="#聚合函数"></a> 聚合函数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#格式<br>SELECT 聚合函数(字段名) FROM 表名;#注意 null 不参与所有聚合函数运算<br></code></pre></td></tr></table></figure><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>count(列名)</td><td>统计数量(不统计为null的列)</td></tr><tr><td>max(列名)</td><td>最大值</td></tr><tr><td>min(列名)</td><td>最小值</td></tr><tr><td>avg(列名)</td><td>平均值</td></tr><tr><td>sum(列名)</td><td>求和</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># eg.查学生数量<br>SELECT count(name) FROM stu;<br>#推荐使用 *<br>SELECT count(*) FROM stu;<br># eg.查最高分<br>SELECT max(score) FROM stu;<br></code></pre></td></tr></table></figure><h5 id="分组查询"><a class="markdownIt-Anchor" href="#分组查询"></a> 分组查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#格式<br>SELECT 字段列表 FROM 表名 [WHERE 分组前条件限定]GROUP BY 分组字段名 [HAVING 分组后条件过滤];<br># 注意： 分组后，查询的字段为聚合函数的字段和分组字段，其他字段无效<br># where 和 having 区别 <br>#执行时机不同：where是分组前限定，不满足条件不进行分组，having是对分组后的数据进行限定<br>#可判断条件不同：where不能对聚合函数进行判断，having可以 <br># 执行顺序<br># where -&gt; 聚合函数 -&gt; having<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#eg. 查询男同学和女同学各自的平均分<br>SELECT avg(score) FROM stu GROUP BY gender;<br>#这样仅能看到 平均分，不能清晰的看到平均分属于谁，所以一般会像下面这样写<br>SELECT gender,avg(score) FROM stu GROUP BY gender;<br># 注意： 分组后，查询的字段为聚合函数的字段和分组字段，其他字段意义<br><br>#eg. 查询男同学和女同学各自的平均分，以及各自的人数<br>SELECT gender,avg(score),count(*) FROM stu GROUP BY gender;<br><br>#eg. 查询男同学和女同学各自的平均分，以及各自的人数，要求：分数低于70的不参与分组<br>SELECT gender,avg(score),count(*) FROM stu WHERE score &gt;= 70 GROUP BY gender;<br><br>#eg. 查询男同学和女同学各自的平均分，以及各自的人数，要求：分数低于70的不参与分组，分组之后人数大于20<br>SELECT gender,avg(score),count(*) FROM stu WHERE score &gt;= 70 GROUP BY gender HAVING count(*) &gt;= 20;<br></code></pre></td></tr></table></figure><h5 id="分页查询"><a class="markdownIt-Anchor" href="#分页查询"></a> 分页查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#格式<br>SELECT 字段列表 FROM 表名 LIMIT 起始索引，查询条目;#索引是从0开始的<br></code></pre></td></tr></table></figure><p>计算公式<code>起始索引 = (当前页码-1)*每页显示的条数</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># eg.从0开始查询，查询3条数据<br>SELECT * FROM stu LIMIT 0,3;<br><br># eg.每页显示3条数据，查询第1页的数据<br>SELECT * FROM stu LIMIT 0,3;<br><br># eg.每页显示3条数据，查询第2页的数据<br>SELECT * FROM stu LIMIT 3,3;<br><br># eg.每页显示3条数据，查询第3页的数据<br>SELECT * FROM stu LIMIT 6,3;<br></code></pre></td></tr></table></figure></li></ul><h5 id="多表查询"><a class="markdownIt-Anchor" href="#多表查询"></a> 多表查询</h5><h4 id="dcl数据控制语言"><a class="markdownIt-Anchor" href="#dcl数据控制语言"></a> DCL(数据控制语言)</h4><ul><li>对数据库进行权限控制</li></ul><h3 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h3><h4 id="约束"><a class="markdownIt-Anchor" href="#约束"></a> 约束</h4><h5 id="约束的概念"><a class="markdownIt-Anchor" href="#约束的概念"></a> 约束的概念</h5><ul><li>约束是作用于表上的规则，用于限制加入表中的数据</li><li>约束的存在保证了数据库中数据的正确性，有效性和完整性</li></ul><h5 id="约束的分类"><a class="markdownIt-Anchor" href="#约束的分类"></a> 约束的分类</h5><table><thead><tr><th>约束名称</th><th>描述</th><th style="text-align:center">关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>保证列中所有数据不能有ｎｕｌｌ值</td><td style="text-align:center">NOT NULL</td></tr><tr><td>唯一约束</td><td>保证列中所有数据各不相同</td><td style="text-align:center">UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一表示，要求非空且唯一</td><td style="text-align:center">PRIMARY KEY</td></tr><tr><td>检查约束</td><td>保证列中数据满足某一条件</td><td style="text-align:center">CHECK</td></tr><tr><td>默认约束</td><td>保存数据时，未指定值则采用默认值</td><td style="text-align:center">DEFAULT</td></tr><tr><td>外键约束</td><td>外键用来让两个表的数据之间建立链接，保证数据的一致性和完整性</td><td style="text-align:center">FOREIGN KEY</td></tr></tbody></table><p><strong>注意：Mysql不支持检查约束</strong></p><h5 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#员工表<br>CREATE TABLE IF NOT EXISTS emp(<br>id INT PRIMARY, -- 员工id,主键且自增长<br>    ename VARCHAR(50) NOT NULL UNIQUE, -- 员工姓名，非空且唯一<br>    joindate DATE NOT NULL, -- 入职日期，非空<br>    salary DOUBLE(7,2) NOT NULL, -- 薪资，非空<br>    bonus DOUBLE(7,2) DEFAULT 0 -- 奖金，如果没有就默认为零<br>);<br></code></pre></td></tr></table></figure><h5 id="外键约束"><a class="markdownIt-Anchor" href="#外键约束"></a> 外键约束</h5><ul><li><p>概念</p><ul><li><p>外键用来让两个表的数据之间建立链接，保证数据一致性和完整性</p></li><li><p>例如：</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131355182.png" alt="image-20230424170918074" /></p></li></ul></li></ul><p>这两张表的部门id时相关的，即员工表的dep_id和部门表的id相关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 现在需要删除研发部，则需将两张表链接起来，删除研发部同时，删除属于研发部的员工，才符合逻辑需求。这时就要用到外键约束<br></code></pre></td></tr></table></figure><ul><li><p>语法</p><ul><li>添加约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 创建表时添加外键约束<br>CREATE TABLE 表名(<br>列名 数据类型,<br>    ...<br>    [CONSTRAINT] [外键名称] FOREIGN KEY (外键列名) REFERENCES 主表(主表列名)<br>);<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 建完表后添加外键约束<br>ALTER 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY(外键列名) REFERENCES 主表(主表列名); <br></code></pre></td></tr></table></figure><p>一般创建外键时，被引用的表我们称为主表（上述例子中的部门表），创键的那张表被称为从表（上述例子中的员工表）</p><ul><li>删除约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER 表名 DROP FOREIGN KEY 外键名称;<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 部门表<br>CREATE TABLE IF NOT EXISTS dept(<br>id int primary key auto_increment,<br>    dep_name varchar(20),<br>    addr varchar(20)<br>);<br>-- 员工表<br>CREATE TABLE IF NOT EXISTS emp(<br>id int primary key auto_increment,<br>    name varchar(20),<br>    age int,<br>    dep_id int,<br>    -- 添加外键约束，将dep_id与表dept的id关联<br>    CONSTRAINT fk_emp_dept FOREIGN KEY(dep_id) REFERENCES dept(id)<br>    -- 这种方式需要先创建主表，添加数据时同理即得让主表有这个外键<br>    -- 由于这种外键约束，删除数据时，则是先删除从表的数据，才可删除主表的数据<br>);<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="数据库设计"><a class="markdownIt-Anchor" href="#数据库设计"></a> 数据库设计</h4><h5 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h5><p>根据需求建立数据库中的表结构和表之间的关系的过程</p><ul><li>步骤<ul><li>需求分析</li><li>逻辑分析</li><li>物理设计</li><li>维护设计</li></ul></li></ul><h5 id="一对多多对一"><a class="markdownIt-Anchor" href="#一对多多对一"></a> 一对多（多对一）</h5><p>如: 员工和部门</p><p>一个部门可以有多个员工，但一个员工只能属于一个部门</p><ul><li><p>实现方式</p><p>在 “多” 的一方建立外键，并和 “一” 的一方的主键链接</p></li></ul><h5 id="多对多"><a class="markdownIt-Anchor" href="#多对多"></a> 多对多</h5><p>如：商品和订单</p><p>一个商品可以有多个订单，一个订单也可以包含多个商品</p><ul><li><p>实现方式</p><p>建立一个中间表，在中间表建两个外键来链接两张表的主键</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131403257.png" alt="image-20230425103709512" /></p></li></ul><h5 id="一对一"><a class="markdownIt-Anchor" href="#一对一"></a> 一对一</h5><p>如：用户和用户详情</p><p>一对一关系多用于对表的拆分，将不常用的信息分离出来，提升查询性能</p><ul><li><p>实现方式</p><p>在一方建立外键链接另一方的主键，并设置外键唯一（UNIQUE）;</p></li></ul><h4 id="多表查询-2"><a class="markdownIt-Anchor" href="#多表查询-2"></a> 多表查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE emp(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>    name VARCHAR(20),<br>    dep_id INT,<br>    CONSTRAINT emp_dept_key FOREIGN KEY(dep_id) REFERENCES dept(did)<br>);<br>CREATE TABLE dept(<br>did INT PRIMARY KEY AUTO_INCREMENT,<br>    dname VARCHAR(20)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FORM emp,dept;<br>-- 此时查询的是两个表的笛卡尔积，即两张表的数据的所有组合，若 两张表分别有n,m条数据，则会查出来n*m条数据<br></code></pre></td></tr></table></figure><p>因此在做多表查询时需要依据他们之间的逻辑关系查</p><p><img src="https://gitee.com/ymxl0823/blogimg/raw/master/img/202307131403184.png" alt="image-20230425110848435" /></p><ul><li><p>连接查询</p><ul><li><p>内连接：查询两个集合的交集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 隐式内连接<br>SELECT 字段列表 FROM 表1,表2,... WHERE 条件;<br>-- 显示内连接<br>SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 条件;· <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM emp,dept WHERE emp.dep_id = dept.did;<br></code></pre></td></tr></table></figure></li><li><p>外连接：</p><p>左外连接：查询A表和交集的所有数据（A表所有+B表符合条件的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件;<br></code></pre></td></tr></table></figure><p>右外连接：查询B表和交集的所有数据（同理）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件<br></code></pre></td></tr></table></figure></li></ul></li><li><p>子查询</p><p>查询中嵌套查询，称嵌套查询为子查询</p><p>子查询根据结果不同，作用不同</p><ul><li>单行单列</li><li>多行单列</li><li>多行多列</li></ul></li></ul><h4 id="事务"><a class="markdownIt-Anchor" href="#事务"></a> 事务</h4><h5 id="简介-2"><a class="markdownIt-Anchor" href="#简介-2"></a> 简介</h5><ul><li><p>数据库的<strong>事务</strong>(Transaction)是一种机制、一个操作序列，包含了<strong>一组数据库操作命令</strong></p></li><li><p>事务把所有的命令作为一个整体，一起向系统提交或撤销操作请求，即这一组数据库命令要么<strong>同时成功</strong>，要么<strong>同时失败</strong></p></li><li><p>事务是一个不可分割的工作逻辑单元</p></li></ul><p>例：张三给李四转五百需要有以下操作</p><pre><code class="hljs">* 查询张三余额* 张三余额 -500* 李四余额 +500</code></pre><p>这些操作要求同时进行，要么同时成功，要么同时失败，要是在中间出现异常，则会撤销事务（回滚事务）。</p><h5 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 开启事务<br>START TRANSACTION;<br>或者 BEGIN;<br>--提交 <br>COMMIT;<br>--回滚<br>ROLLBACK;<br></code></pre></td></tr></table></figure><h5 id="四大特征"><a class="markdownIt-Anchor" href="#四大特征"></a> 四大特征</h5><ul><li>原子性（Atomicity）事务是不可分割的最小的操作单位，要么同时成功，要么同时失败</li><li>一致性（Consistency）事务完成时，必须使所有数据保持一致状态</li><li>隔离性（Isolation）多个事务之间，操作的可见性</li><li>持久性（Durability）事务一旦提交或回滚，它对数据库中的数据的改变是永久的</li></ul><h5 id="mysql事务默认自动提交"><a class="markdownIt-Anchor" href="#mysql事务默认自动提交"></a> MySql事务默认自动提交</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 查看事务的默认提交方式<br>SELECT @@autocommit;<br><br>-- 1 自动提交 0 手动提交<br>-- 修改事务提交方式<br>set @@autocommit = 0;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL&amp;MySql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>倍增lca</title>
    <link href="/2023/04/26/%E5%80%8D%E5%A2%9Elca/"/>
    <url>/2023/04/26/%E5%80%8D%E5%A2%9Elca/</url>
    
    <content type="html"><![CDATA[<h3 id="倍增lca"><a class="markdownIt-Anchor" href="#倍增lca"></a> 倍增lca</h3><p>注：这里默认为无权树</p><h4 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h4><ul><li><p>先一遍<code>dfs</code>求树上各个节点的深度</p><p>注意：树结构不存在环,故不担心重复遍历不用设置<code>vis</code>数组来确保每个点只遍历一次</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> cur)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = h[cur];i;i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> eg = e[i];<br>        dep[eg] = dep[cur] + <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">dfs</span>(eg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>用倍增思想预处理出各个节点的各级父节点</p><p>这一步也在<code>dfs</code>里做，对于<code>f[cur][0]</code>即cur的一级父节点我们可以直接<code>dfs</code>时直观求得</p><p><em>这里求当前节点的各级父节点时就用到了<code>倍增</code>思想</em></p><p>具体解释如下：<code>f[cur][i]</code>表示cur的  2<sup>i</sup>  级父节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= Log2[dep[cur]];i ++)<br>        f[cur][i] = f[f[cur][i<span class="hljs-number">-1</span>]][i<span class="hljs-number">-1</span>];<span class="hljs-comment">// cur 的2^(i-1)级父节点的2^(i-1)级父节点为cur的2^i级父节点</span><br></code></pre></td></tr></table></figure><p>完整<code>dfs</code>代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> cur)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= Log2[dep[cur]];i ++)<br>        f[cur][i] = f[f[cur][i<span class="hljs-number">-1</span>]][i<span class="hljs-number">-1</span>];<span class="hljs-comment">// cur 的2^(i-1)级父节点的2^(i-1)级父节点为cur的2^i级父节点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = h[cur];i;i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> eg = e[i];<br>        dep[eg] = dep[cur] + <span class="hljs-number">1</span>;<br>        f[eg][<span class="hljs-number">0</span>] = cur;<br>        <span class="hljs-built_in">dfs</span>(eg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>最后让两个节点网上爬，寻求最近父节点</p><p>这里是这样想的，先让a和b爬到同一深度，再一起往上爬。当然我们希望爬的次数尽量少，因此我们可以先看看最高能爬到的位置他们对应节点是否相同，若相同，则看看刚才一半高的位置是否相同，高度依次减半，直到不同时再往上走</p><p>若a是b的父节点，在b往上爬到和a同一深度时判断以下和a是否相同，是的话直接返回a节点即可</p><p>同时b再往上爬时，我们贪心的让他尽可能往a的深度爬即一次跳转的深度为 <code>dep[a]-dep[b]</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//我们不妨设a的深度比b浅</span><br>    <span class="hljs-keyword">if</span>(dep[a]&gt;dep[b]) <span class="hljs-built_in">swap</span>(a,b);<br>    <span class="hljs-keyword">while</span>(dep[a]!=dep[b])<span class="hljs-comment">//先找到b的父节点中深度与a一样的,即让b往上爬</span><br>    &#123;<br>        <span class="hljs-type">int</span> k = Log2[dep[b]-dep[a]];<br>        b = f[b][k];<span class="hljs-comment">//每次让b尽可能跳到深度与a相同的父节点</span><br>    &#125;<br>    <span class="hljs-comment">//如果a是b父节点的话直接返回</span><br>    <span class="hljs-keyword">if</span>(a==b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = Log2[dep[a]];i &gt;= <span class="hljs-number">0</span>;i --)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(f[a][i]!=f[b][i])<br>        &#123;<br>            a = f[a][i];b=f[b][i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f[a][<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>在此之前还得预处理以下log<sub>2</sub>函数，用递推公式求</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mtext> </mtext><mi>i</mi><mo>=</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mtext> </mtext><mi>i</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">log_{2}\ i = log_{2}\ i/2 + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord mathnormal">i</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt; N;i ++)<br>        Log2[i] = Log2[i/<span class="hljs-number">2</span>] + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*测试数据</span><br><span class="hljs-comment">8</span><br><span class="hljs-comment">1 2</span><br><span class="hljs-comment">1 3</span><br><span class="hljs-comment">1 4</span><br><span class="hljs-comment">2 5</span><br><span class="hljs-comment">2 6</span><br><span class="hljs-comment">3 7</span><br><span class="hljs-comment">4 8</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> h[N],e[N],ne[N],cnt;<span class="hljs-comment">//链式前向星</span><br><span class="hljs-type">int</span> Log2[N],f[N][<span class="hljs-number">30</span>];<br><span class="hljs-type">int</span> dep[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ne[++cnt] = h[a];e[cnt] = b;h[a] = cnt;<br>&#125;<br><span class="hljs-comment">//一遍dfs求各个结点深度</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> cur)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//cout &lt;&lt; cur &lt;&lt; &quot; &quot;;</span><br>    <span class="hljs-comment">//if(v[cur]) return;</span><br>    <span class="hljs-comment">//v[cur] = true;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= Log2[dep[cur]];i ++)<br>        f[cur][i] = f[f[cur][i<span class="hljs-number">-1</span>]][i<span class="hljs-number">-1</span>];<span class="hljs-comment">// cur 的2^(i-1)级父节点的2^(i-1)级父节点为cur的2^i级父节点</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = h[cur];i;i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> eg = e[i];<br>        dep[eg] = dep[cur] + <span class="hljs-number">1</span>;<br>        f[eg][<span class="hljs-number">0</span>] = cur;<br>        <span class="hljs-built_in">dfs</span>(eg);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//我们不妨设a的深度比b浅</span><br>    <span class="hljs-keyword">if</span>(dep[a]&gt;dep[b]) <span class="hljs-built_in">swap</span>(a,b);<br>    <span class="hljs-keyword">while</span>(dep[a]!=dep[b])<span class="hljs-comment">//先找到b的父节点中深度与a一样的,即让b往上爬</span><br>    &#123;<br>        <span class="hljs-type">int</span> k = Log2[dep[a]-dep[b]];<br>        b = f[b][k];<span class="hljs-comment">//每次让b尽可能跳到深度与a相同的父节点</span><br>    &#125;<br>    <span class="hljs-comment">//如果a是b父节点的话直接返回</span><br>    <span class="hljs-keyword">if</span>(a==b) <span class="hljs-keyword">return</span> a;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = Log2[dep[a]];k&gt;=<span class="hljs-number">0</span>;k--)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(f[a][k]!=f[b][k])<br>        &#123;<br>            a = f[a][k];b = f[b][k];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f[a][<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; n;i ++)<br>    &#123;<br>        <span class="hljs-type">int</span> a,b;cin &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-built_in">add</span>(a,b);<span class="hljs-comment">//a是b的父节点</span><br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//打印各节点及其从下到上的父节点</span><br>    <span class="hljs-comment">// for(int i = 1;i &lt;= n;i ++)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; &quot;#&quot; &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; dep[i] &lt;&lt; &quot;\n&quot;;</span><br>    <span class="hljs-comment">//     for(int j = 0;j &lt;= Log2[dep[i]];j ++)</span><br>    <span class="hljs-comment">//         cout &lt;&lt; f[i][j] &lt;&lt; &quot; &quot;;</span><br>    <span class="hljs-comment">//     cout &lt;&lt; &quot;\n&quot;;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-type">int</span> a,b;cin &gt;&gt; a &gt;&gt; b;<span class="hljs-comment">//假设我们要求节点 a和b的最近公共祖先</span><br>    <span class="hljs-type">int</span> fa = <span class="hljs-built_in">lca</span>(a,b);<br>    cout &lt;&lt; fa;<br>    <span class="hljs-comment">//这样就可以求a与b的最近距离了，用以下公式</span><br>    <span class="hljs-type">int</span> dis = dep[a] + dep[b] - <span class="hljs-number">2</span>*dep[fa];<span class="hljs-comment">//当然这里默认树是无权树</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt; N;i ++)<br>        Log2[i] = Log2[i/<span class="hljs-number">2</span>] + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//cin &gt;&gt; t;</span><br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>最近公共祖先</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/26/hello-world/"/>
    <url>/2023/02/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
